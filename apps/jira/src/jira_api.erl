%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(jira_api).

-export([
    get_user/3,
    create_issue/3
]).

get_user(BaseUrl, Username, AuthToken) ->
    Query = igor_http:compose_query([{"username", Username, string}]),
    Url = io_lib:format("~s/rest/api/2/user?~s", [BaseUrl, Query]),
    Request = {Url, [{"Authorization", [AuthToken]}]},
    case httpc:request(get, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, 200, _ReasonPhrase}, _Headers, Body}} ->
            jira_protocol:get_user_response_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, 400, _ReasonPhrase}, _Headers, Body}} ->
            throw(jira_protocol:jira_response400_from_json(jsx:decode(Body, [return_maps])));
        {ok, {{_HttpVersion, 404, _ReasonPhrase}, _Headers, Body}} ->
            throw(jira_protocol:jira_response404_from_json(jsx:decode(Body, [return_maps])));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

create_issue(BaseUrl, RequestContent, AuthToken) ->
    Url = io_lib:format("~s/rest/api/2/issue", [BaseUrl]),
    Request = {Url, [{"Authorization", [AuthToken]}], "application/json", jsx:encode(jira_protocol:fields_to_json(RequestContent, {custom, fun jira_protocol:create_issue_request_to_json/1}))},
    case httpc:request(post, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, 201, _ReasonPhrase}, _Headers, Body}} ->
            jira_protocol:create_issue_response_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, 400, _ReasonPhrase}, _Headers, Body}} ->
            throw(jira_protocol:jira_response400_from_json(jsx:decode(Body, [return_maps])));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

