%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(jira_protocol).

-include_lib("stdlib/include/assert.hrl").
-include("jira_protocol.hrl").

-export([
    issue_type_to_string/1,
    issue_type_from_string/1,
    issue_type_to_json/1,
    issue_type_from_json/1,
    fields_to_json/2,
    fields_from_json/2,
    key_object_to_json/2,
    key_object_from_json/2,
    name_object_to_json/2,
    name_object_from_json/2,
    create_issue_request_to_json/1,
    create_issue_request_from_json/1,
    create_issue_response_to_json/1,
    create_issue_response_from_json/1,
    jira_item_collection_to_json/2,
    jira_item_collection_from_json/2,
    jira_group_entry_to_json/1,
    jira_group_entry_from_json/1,
    get_user_response_to_json/1,
    get_user_response_from_json/1,
    jira_response400_to_json/1,
    jira_response400_from_json/1,
    jira_response404_to_json/1,
    jira_response404_from_json/1
]).

-export_type([
    issue_type/0,
    fields/1,
    key_object/1,
    name_object/1,
    create_issue_request/0,
    create_issue_response/0,
    jira_item_collection/1,
    jira_group_entry/0,
    get_user_response/0,
    jira_response400/0,
    jira_response404/0
]).

-type issue_type() :: 'bug'.
-type fields(_T) :: #fields{}.
-type key_object(_T) :: #key_object{}.
-type name_object(_T) :: #name_object{}.
-type create_issue_request() :: #create_issue_request{}.
-type create_issue_response() :: #create_issue_response{}.
-type jira_item_collection(_T) :: #jira_item_collection{}.
-type jira_group_entry() :: #jira_group_entry{}.
-type get_user_response() :: #get_user_response{}.
-type jira_response400() :: #jira_response400{}.
-type jira_response404() :: #jira_response404{}.

-spec issue_type_to_string(issue_type()) -> binary().

issue_type_to_string(bug) -> <<"Bug">>.

-spec issue_type_from_string(binary()) -> issue_type().

issue_type_from_string(<<"Bug">>) -> bug.

-spec issue_type_to_json(issue_type()) -> igor_json:json_string().

issue_type_to_json(bug) -> <<"Bug">>.

-spec issue_type_from_json(igor_json:json()) -> issue_type().

issue_type_from_json(<<"Bug">>) -> bug.

-spec fields_to_json(fields(T), igor_json:pack_type(T)) -> igor_json:json_object().

fields_to_json(Record, T) ->
    #fields{fields = Fields} = Record,
    ?assert(Fields =/= undefined),
    #{
        <<"fields">> => igor_json:pack(Fields, T)
    }.

-spec fields_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> fields(T).

fields_from_json(Json, T) ->
    Fields = igor_json:parse(Json, <<"fields">>, T),
    #fields{fields = Fields}.

-spec key_object_to_json(key_object(T), igor_json:pack_type(T)) -> igor_json:json_object().

key_object_to_json(Record, T) ->
    #key_object{key = VarKey} = Record,
    ?assert(VarKey =/= undefined),
    #{
        <<"key">> => igor_json:pack(VarKey, T)
    }.

-spec key_object_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> key_object(T).

key_object_from_json(Json, T) ->
    VarKey = igor_json:parse(Json, <<"key">>, T),
    #key_object{key = VarKey}.

-spec name_object_to_json(name_object(T), igor_json:pack_type(T)) -> igor_json:json_object().

name_object_to_json(Record, T) ->
    #name_object{name = Name} = Record,
    ?assert(Name =/= undefined),
    #{
        <<"name">> => igor_json:pack(Name, T)
    }.

-spec name_object_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> name_object(T).

name_object_from_json(Json, T) ->
    Name = igor_json:parse(Json, <<"name">>, T),
    #name_object{name = Name}.

-spec create_issue_request_to_json(create_issue_request()) -> igor_json:json_object().

create_issue_request_to_json(Record) ->
    #create_issue_request{
        project = Project,
        summary = Summary,
        description = Description,
        issuetype = Issuetype
    } = Record,
    ?assert(Project =/= undefined),
    ?assert(Summary =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(Issuetype =/= undefined),
    #{
        <<"project">> => igor_json:pack(Project, {custom, fun(V) -> jira_protocol:key_object_to_json(V, string) end}),
        <<"summary">> => igor_json:pack(Summary, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"issuetype">> => igor_json:pack(Issuetype, {custom, fun(V) -> jira_protocol:name_object_to_json(V, {custom, fun jira_protocol:issue_type_to_json/1}) end})
    }.

-spec create_issue_request_from_json(igor_json:json_object()) -> create_issue_request().

create_issue_request_from_json(Json) ->
    Project = igor_json:parse(Json, <<"project">>, {custom, fun(V) -> jira_protocol:key_object_from_json(V, string) end}),
    Summary = igor_json:parse(Json, <<"summary">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    Issuetype = igor_json:parse(Json, <<"issuetype">>, {custom, fun(V) -> jira_protocol:name_object_from_json(V, {custom, fun jira_protocol:issue_type_from_json/1}) end}),
    #create_issue_request{
        project = Project,
        summary = Summary,
        description = Description,
        issuetype = Issuetype
    }.

-spec create_issue_response_to_json(create_issue_response()) -> igor_json:json_object().

create_issue_response_to_json(Record) ->
    #create_issue_response{id = Id, key = VarKey, self = Self} = Record,
    ?assert(Id =/= undefined),
    ?assert(VarKey =/= undefined),
    ?assert(Self =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"key">> => igor_json:pack(VarKey, string),
        <<"self">> => igor_json:pack(Self, string)
    }.

-spec create_issue_response_from_json(igor_json:json_object()) -> create_issue_response().

create_issue_response_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, string),
    VarKey = igor_json:parse(Json, <<"key">>, string),
    Self = igor_json:parse(Json, <<"self">>, string),
    #create_issue_response{id = Id, key = VarKey, self = Self}.

-spec jira_item_collection_to_json(jira_item_collection(T), igor_json:pack_type(T)) -> igor_json:json_object().

jira_item_collection_to_json(Record, T) ->
    #jira_item_collection{size = Size, items = Items} = Record,
    ?assert(Size =/= undefined),
    ?assert(Items =/= undefined),
    #{
        <<"size">> => igor_json:pack(Size, int),
        <<"items">> => igor_json:pack(Items, {list, T})
    }.

-spec jira_item_collection_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> jira_item_collection(T).

jira_item_collection_from_json(Json, T) ->
    Size = igor_json:parse(Json, <<"size">>, int),
    Items = igor_json:parse(Json, <<"items">>, {list, T}),
    #jira_item_collection{size = Size, items = Items}.

-spec jira_group_entry_to_json(jira_group_entry()) -> igor_json:json_object().

jira_group_entry_to_json(Record) ->
    #jira_group_entry{name = Name, self = Self} = Record,
    ?assert(Name =/= undefined),
    ?assert(Self =/= undefined),
    #{
        <<"name">> => igor_json:pack(Name, string),
        <<"self">> => igor_json:pack(Self, string)
    }.

-spec jira_group_entry_from_json(igor_json:json_object()) -> jira_group_entry().

jira_group_entry_from_json(Json) ->
    Name = igor_json:parse(Json, <<"name">>, string),
    Self = igor_json:parse(Json, <<"self">>, string),
    #jira_group_entry{name = Name, self = Self}.

-spec get_user_response_to_json(get_user_response()) -> igor_json:json_object().

get_user_response_to_json(Record) ->
    #get_user_response{
        self = Self,
        name = Name,
        email_address = EmailAddress,
        avatar_urls = AvatarUrls,
        display_name = DisplayName,
        active = Active,
        time_zone = TimeZone,
        groups = Groups,
        application_roles = ApplicationRoles,
        expand = Expand
    } = Record,
    ?assert(Self =/= undefined),
    ?assert(Name =/= undefined),
    ?assert(EmailAddress =/= undefined),
    ?assert(AvatarUrls =/= undefined),
    ?assert(DisplayName =/= undefined),
    ?assert(Active =/= undefined),
    ?assert(TimeZone =/= undefined),
    ?assert(Groups =/= undefined),
    ?assert(ApplicationRoles =/= undefined),
    ?assert(Expand =/= undefined),
    #{
        <<"self">> => igor_json:pack(Self, string),
        <<"name">> => igor_json:pack(Name, string),
        <<"emailAddress">> => igor_json:pack(EmailAddress, string),
        <<"avatarUrls">> => igor_json:pack(AvatarUrls, json),
        <<"displayName">> => igor_json:pack(DisplayName, string),
        <<"active">> => igor_json:pack(Active, boolean),
        <<"timeZone">> => igor_json:pack(TimeZone, string),
        <<"groups">> => igor_json:pack(Groups, {custom, fun(V) -> jira_protocol:jira_item_collection_to_json(V, {custom, fun jira_protocol:jira_group_entry_to_json/1}) end}),
        <<"applicationRoles">> => igor_json:pack(ApplicationRoles, {custom, fun(V) -> jira_protocol:jira_item_collection_to_json(V, json) end}),
        <<"expand">> => igor_json:pack(Expand, string)
    }.

-spec get_user_response_from_json(igor_json:json_object()) -> get_user_response().

get_user_response_from_json(Json) ->
    Self = igor_json:parse(Json, <<"self">>, string),
    Name = igor_json:parse(Json, <<"name">>, string),
    EmailAddress = igor_json:parse(Json, <<"emailAddress">>, string),
    AvatarUrls = igor_json:parse(Json, <<"avatarUrls">>, json),
    DisplayName = igor_json:parse(Json, <<"displayName">>, string),
    Active = igor_json:parse(Json, <<"active">>, boolean),
    TimeZone = igor_json:parse(Json, <<"timeZone">>, string),
    Groups = igor_json:parse(Json, <<"groups">>, {custom, fun(V) -> jira_protocol:jira_item_collection_from_json(V, {custom, fun jira_protocol:jira_group_entry_from_json/1}) end}),
    ApplicationRoles = igor_json:parse(Json, <<"applicationRoles">>, {custom, fun(V) -> jira_protocol:jira_item_collection_from_json(V, json) end}),
    Expand = igor_json:parse(Json, <<"expand">>, string),
    #get_user_response{
        self = Self,
        name = Name,
        email_address = EmailAddress,
        avatar_urls = AvatarUrls,
        display_name = DisplayName,
        active = Active,
        time_zone = TimeZone,
        groups = Groups,
        application_roles = ApplicationRoles,
        expand = Expand
    }.

-spec jira_response400_to_json(jira_response400()) -> igor_json:json_object().

jira_response400_to_json(Record) ->
    #jira_response400{error_messages = ErrorMessages, errors = Errors} = Record,
    ?assert(ErrorMessages =/= undefined),
    #{
        <<"errorMessages">> => igor_json:pack(ErrorMessages, {list, string}),
        <<"errors">> => igor_json:pack(Errors, json)
    }.

-spec jira_response400_from_json(igor_json:json_object()) -> jira_response400().

jira_response400_from_json(Json) ->
    ErrorMessages = igor_json:parse(Json, <<"errorMessages">>, {list, string}, []),
    Errors = igor_json:parse(Json, <<"errors">>, json, undefined),
    #jira_response400{error_messages = ErrorMessages, errors = Errors}.

-spec jira_response404_to_json(jira_response404()) -> igor_json:json_object().

jira_response404_to_json(#jira_response404{}) -> #{}.

-spec jira_response404_from_json(igor_json:json_object()) -> jira_response404().

jira_response404_from_json(_Json) -> #jira_response404{}.

