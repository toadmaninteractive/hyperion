%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(slack_api).

-export([
    post_message/1,
    post_message_ex/1,
    post_snippet/1,
    get_users/0
]).

post_message(RequestContent) ->
    Url = io_lib:format("~s/chat.postMessage", [slack_config:api_url()]),
    Request = {Url, slack_auth:default_headers(), "application/json", jsx:encode(slack_protocol:post_message_request_to_json(RequestContent))},
    case httpc:request(post, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            slack_protocol:post_message_response_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

post_message_ex(RequestContent) ->
    Url = io_lib:format("~s/chat.postMessage", [slack_config:api_url()]),
    Request = {Url, slack_auth:default_headers(), "application/json", jsx:encode(slack_protocol:post_message_ex_request_to_json(RequestContent))},
    case httpc:request(post, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            slack_protocol:post_message_response_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

post_snippet(RequestContent) ->
    Url = io_lib:format("~s/files.upload", [slack_config:api_url()]),
    Request = {Url, slack_auth:default_headers(), "application/x-www-form-urlencoded", iolist_to_binary(slack_protocol:post_snippet_request_to_form(RequestContent))},
    case httpc:request(post, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            slack_protocol:post_snippet_response_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

get_users() ->
    Url = io_lib:format("~s/users.list", [slack_config:api_url()]),
    Request = {Url, slack_auth:default_headers()},
    case httpc:request(get, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            slack_protocol:get_users_response_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

