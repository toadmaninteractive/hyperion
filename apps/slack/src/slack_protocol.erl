%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(slack_protocol).

-include_lib("stdlib/include/assert.hrl").
-include("slack_protocol.hrl").

-export([
    file_mode_to_json/1,
    file_mode_from_json/1,
    file_to_json/1,
    file_from_json/1,
    message_to_json/1,
    message_from_json/1,
    post_message_request_to_json/1,
    post_message_request_from_json/1,
    attachment_field_to_json/1,
    attachment_field_from_json/1,
    attachment_block_to_json/1,
    attachment_block_from_json/1,
    post_message_ex_request_to_json/1,
    post_message_ex_request_from_json/1,
    post_message_response_to_json/1,
    post_message_response_from_json/1,
    post_snippet_request_to_json/1,
    post_snippet_request_from_json/1,
    post_snippet_request_to_form/1,
    post_snippet_request_from_form/1,
    post_snippet_response_to_json/1,
    post_snippet_response_from_json/1,
    get_users_response_to_json/1,
    get_users_response_from_json/1,
    member_to_json/1,
    member_from_json/1,
    member_profile_to_json/1,
    member_profile_from_json/1,
    channel_to_json/1,
    channel_from_json/1
]).

-export_type([
    file_mode/0,
    file/0,
    message/0,
    post_message_request/0,
    attachment_field/0,
    attachment_block/0,
    post_message_ex_request/0,
    post_message_response/0,
    post_snippet_request/0,
    post_snippet_response/0,
    get_users_response/0,
    member/0,
    member_profile/0,
    channel/0
]).

-type file_mode() :: 'hosted' | 'external' | 'snippet' | 'post'.
-type file() :: #file{}.
-type message() :: #message{}.
-type post_message_request() :: #post_message_request{}.
-type attachment_field() :: #attachment_field{}.
-type attachment_block() :: #attachment_block{}.
-type post_message_ex_request() :: #post_message_ex_request{}.
-type post_message_response() :: #post_message_response{}.
-type post_snippet_request() :: #post_snippet_request{}.
-type post_snippet_response() :: #post_snippet_response{}.
-type get_users_response() :: #get_users_response{}.
-type member() :: #member{}.
-type member_profile() :: #member_profile{}.
-type channel() :: #channel{}.

-spec file_mode_to_json(file_mode()) -> igor_json:json_string().

file_mode_to_json(hosted) -> <<"hosted">>;
file_mode_to_json(external) -> <<"external">>;
file_mode_to_json(snippet) -> <<"snippet">>;
file_mode_to_json(post) -> <<"post">>.

-spec file_mode_from_json(igor_json:json()) -> file_mode().

file_mode_from_json(<<"hosted">>) -> hosted;
file_mode_from_json(<<"external">>) -> external;
file_mode_from_json(<<"snippet">>) -> snippet;
file_mode_from_json(<<"post">>) -> post.

-spec file_to_json(file()) -> igor_json:json_object().

file_to_json(Record) ->
    #file{
        id = Id,
        created = Created,
        timestamp = Timestamp,
        name = Name,
        title = Title,
        mimetype = Mimetype,
        filetype = Filetype,
        pretty_type = PrettyType,
        user = User,
        editable = Editable,
        size = Size,
        mode = Mode,
        is_external = IsExternal,
        external_type = ExternalType,
        is_public = IsPublic,
        public_url_shared = PublicUrlShared,
        display_as_bot = DisplayAsBot,
        username = Username,
        url_private = UrlPrivate,
        url_private_download = UrlPrivateDownload,
        permalink = Permalink,
        permalink_public = PermalinkPublic,
        edit_link = EditLink,
        preview = Preview,
        preview_highlight = PreviewHighlight,
        lines = Lines,
        lines_more = LinesMore,
        preview_is_truncated = PreviewIsTruncated,
        comments_count = CommentsCount,
        is_starred = IsStarred,
        shares = Shares,
        channels = Channels,
        groups = Groups,
        ims = Ims,
        has_rich_preview = HasRichPreview
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Created =/= undefined),
    ?assert(Timestamp =/= undefined),
    ?assert(Name =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Mimetype =/= undefined),
    ?assert(Filetype =/= undefined),
    ?assert(PrettyType =/= undefined),
    ?assert(User =/= undefined),
    ?assert(Editable =/= undefined),
    ?assert(Size =/= undefined),
    ?assert(Mode =/= undefined),
    ?assert(IsExternal =/= undefined),
    ?assert(ExternalType =/= undefined),
    ?assert(IsPublic =/= undefined),
    ?assert(PublicUrlShared =/= undefined),
    ?assert(DisplayAsBot =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(UrlPrivate =/= undefined),
    ?assert(UrlPrivateDownload =/= undefined),
    ?assert(Permalink =/= undefined),
    ?assert(PermalinkPublic =/= undefined),
    ?assert(EditLink =/= undefined),
    ?assert(Preview =/= undefined),
    ?assert(PreviewHighlight =/= undefined),
    ?assert(Lines =/= undefined),
    ?assert(LinesMore =/= undefined),
    ?assert(PreviewIsTruncated =/= undefined),
    ?assert(CommentsCount =/= undefined),
    ?assert(IsStarred =/= undefined),
    ?assert(Shares =/= undefined),
    ?assert(Channels =/= undefined),
    ?assert(Groups =/= undefined),
    ?assert(Ims =/= undefined),
    ?assert(HasRichPreview =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"created">> => igor_json:pack(Created, int),
        <<"timestamp">> => igor_json:pack(Timestamp, int),
        <<"name">> => igor_json:pack(Name, string),
        <<"title">> => igor_json:pack(Title, string),
        <<"mimetype">> => igor_json:pack(Mimetype, string),
        <<"filetype">> => igor_json:pack(Filetype, string),
        <<"pretty_type">> => igor_json:pack(PrettyType, string),
        <<"user">> => igor_json:pack(User, string),
        <<"editable">> => igor_json:pack(Editable, boolean),
        <<"size">> => igor_json:pack(Size, int),
        <<"mode">> => igor_json:pack(Mode, {custom, fun slack_protocol:file_mode_to_json/1}),
        <<"is_external">> => igor_json:pack(IsExternal, boolean),
        <<"external_type">> => igor_json:pack(ExternalType, string),
        <<"is_public">> => igor_json:pack(IsPublic, boolean),
        <<"public_url_shared">> => igor_json:pack(PublicUrlShared, boolean),
        <<"display_as_bot">> => igor_json:pack(DisplayAsBot, boolean),
        <<"username">> => igor_json:pack(Username, string),
        <<"url_private">> => igor_json:pack(UrlPrivate, string),
        <<"url_private_download">> => igor_json:pack(UrlPrivateDownload, string),
        <<"permalink">> => igor_json:pack(Permalink, string),
        <<"permalink_public">> => igor_json:pack(PermalinkPublic, string),
        <<"edit_link">> => igor_json:pack(EditLink, string),
        <<"preview">> => igor_json:pack(Preview, string),
        <<"preview_highlight">> => igor_json:pack(PreviewHighlight, string),
        <<"lines">> => igor_json:pack(Lines, int),
        <<"lines_more">> => igor_json:pack(LinesMore, int),
        <<"preview_is_truncated">> => igor_json:pack(PreviewIsTruncated, boolean),
        <<"comments_count">> => igor_json:pack(CommentsCount, int),
        <<"is_starred">> => igor_json:pack(IsStarred, boolean),
        <<"shares">> => igor_json:pack(Shares, json),
        <<"channels">> => igor_json:pack(Channels, {list, string}),
        <<"groups">> => igor_json:pack(Groups, {list, string}),
        <<"ims">> => igor_json:pack(Ims, {list, string}),
        <<"has_rich_preview">> => igor_json:pack(HasRichPreview, boolean)
    }.

-spec file_from_json(igor_json:json_object()) -> file().

file_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, string),
    Created = igor_json:parse(Json, <<"created">>, int),
    Timestamp = igor_json:parse(Json, <<"timestamp">>, int),
    Name = igor_json:parse(Json, <<"name">>, string),
    Title = igor_json:parse(Json, <<"title">>, string),
    Mimetype = igor_json:parse(Json, <<"mimetype">>, string),
    Filetype = igor_json:parse(Json, <<"filetype">>, string),
    PrettyType = igor_json:parse(Json, <<"pretty_type">>, string),
    User = igor_json:parse(Json, <<"user">>, string),
    Editable = igor_json:parse(Json, <<"editable">>, boolean),
    Size = igor_json:parse(Json, <<"size">>, int),
    Mode = igor_json:parse(Json, <<"mode">>, {custom, fun slack_protocol:file_mode_from_json/1}),
    IsExternal = igor_json:parse(Json, <<"is_external">>, boolean),
    ExternalType = igor_json:parse(Json, <<"external_type">>, string),
    IsPublic = igor_json:parse(Json, <<"is_public">>, boolean),
    PublicUrlShared = igor_json:parse(Json, <<"public_url_shared">>, boolean),
    DisplayAsBot = igor_json:parse(Json, <<"display_as_bot">>, boolean),
    Username = igor_json:parse(Json, <<"username">>, string),
    UrlPrivate = igor_json:parse(Json, <<"url_private">>, string),
    UrlPrivateDownload = igor_json:parse(Json, <<"url_private_download">>, string),
    Permalink = igor_json:parse(Json, <<"permalink">>, string),
    PermalinkPublic = igor_json:parse(Json, <<"permalink_public">>, string),
    EditLink = igor_json:parse(Json, <<"edit_link">>, string),
    Preview = igor_json:parse(Json, <<"preview">>, string),
    PreviewHighlight = igor_json:parse(Json, <<"preview_highlight">>, string),
    Lines = igor_json:parse(Json, <<"lines">>, int),
    LinesMore = igor_json:parse(Json, <<"lines_more">>, int),
    PreviewIsTruncated = igor_json:parse(Json, <<"preview_is_truncated">>, boolean),
    CommentsCount = igor_json:parse(Json, <<"comments_count">>, int),
    IsStarred = igor_json:parse(Json, <<"is_starred">>, boolean),
    Shares = igor_json:parse(Json, <<"shares">>, json),
    Channels = igor_json:parse(Json, <<"channels">>, {list, string}),
    Groups = igor_json:parse(Json, <<"groups">>, {list, string}),
    Ims = igor_json:parse(Json, <<"ims">>, {list, string}),
    HasRichPreview = igor_json:parse(Json, <<"has_rich_preview">>, boolean),
    #file{
        id = Id,
        created = Created,
        timestamp = Timestamp,
        name = Name,
        title = Title,
        mimetype = Mimetype,
        filetype = Filetype,
        pretty_type = PrettyType,
        user = User,
        editable = Editable,
        size = Size,
        mode = Mode,
        is_external = IsExternal,
        external_type = ExternalType,
        is_public = IsPublic,
        public_url_shared = PublicUrlShared,
        display_as_bot = DisplayAsBot,
        username = Username,
        url_private = UrlPrivate,
        url_private_download = UrlPrivateDownload,
        permalink = Permalink,
        permalink_public = PermalinkPublic,
        edit_link = EditLink,
        preview = Preview,
        preview_highlight = PreviewHighlight,
        lines = Lines,
        lines_more = LinesMore,
        preview_is_truncated = PreviewIsTruncated,
        comments_count = CommentsCount,
        is_starred = IsStarred,
        shares = Shares,
        channels = Channels,
        groups = Groups,
        ims = Ims,
        has_rich_preview = HasRichPreview
    }.

-spec message_to_json(message()) -> igor_json:json_object().

message_to_json(Record) ->
    #message{
        type = Type,
        subtype = Subtype,
        text = Text,
        ts = Ts,
        username = Username,
        bot_id = BotId
    } = Record,
    ?assert(Type =/= undefined),
    ?assert(Subtype =/= undefined),
    ?assert(Text =/= undefined),
    ?assert(Ts =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(BotId =/= undefined),
    #{
        <<"type">> => igor_json:pack(Type, string),
        <<"subtype">> => igor_json:pack(Subtype, string),
        <<"text">> => igor_json:pack(Text, string),
        <<"ts">> => igor_json:pack(Ts, string),
        <<"username">> => igor_json:pack(Username, string),
        <<"bot_id">> => igor_json:pack(BotId, string)
    }.

-spec message_from_json(igor_json:json_object()) -> message().

message_from_json(Json) ->
    Type = igor_json:parse(Json, <<"type">>, string),
    Subtype = igor_json:parse(Json, <<"subtype">>, string),
    Text = igor_json:parse(Json, <<"text">>, string),
    Ts = igor_json:parse(Json, <<"ts">>, string),
    Username = igor_json:parse(Json, <<"username">>, string),
    BotId = igor_json:parse(Json, <<"bot_id">>, string),
    #message{
        type = Type,
        subtype = Subtype,
        text = Text,
        ts = Ts,
        username = Username,
        bot_id = BotId
    }.

-spec post_message_request_to_json(post_message_request()) -> igor_json:json_object().

post_message_request_to_json(Record) ->
    #post_message_request{channel = Channel, text = Text} = Record,
    ?assert(Channel =/= undefined),
    ?assert(Text =/= undefined),
    #{
        <<"channel">> => igor_json:pack(Channel, string),
        <<"text">> => igor_json:pack(Text, string)
    }.

-spec post_message_request_from_json(igor_json:json_object()) -> post_message_request().

post_message_request_from_json(Json) ->
    Channel = igor_json:parse(Json, <<"channel">>, string),
    Text = igor_json:parse(Json, <<"text">>, string),
    #post_message_request{channel = Channel, text = Text}.

-spec attachment_field_to_json(attachment_field()) -> igor_json:json_object().

attachment_field_to_json(Record) ->
    #attachment_field{title = Title, value = VarValue, short = Short} = Record,
    ?assert(Title =/= undefined),
    ?assert(VarValue =/= undefined),
    ?assert(Short =/= undefined),
    #{
        <<"title">> => igor_json:pack(Title, string),
        <<"value">> => igor_json:pack(VarValue, string),
        <<"short">> => igor_json:pack(Short, boolean)
    }.

-spec attachment_field_from_json(igor_json:json_object()) -> attachment_field().

attachment_field_from_json(Json) ->
    Title = igor_json:parse(Json, <<"title">>, string),
    VarValue = igor_json:parse(Json, <<"value">>, string),
    Short = igor_json:parse(Json, <<"short">>, boolean, false),
    #attachment_field{title = Title, value = VarValue, short = Short}.

-spec attachment_block_to_json(attachment_block()) -> igor_json:json_object().

attachment_block_to_json(Record) ->
    #attachment_block{
        fallback = Fallback,
        color = Color,
        pretext = Pretext,
        author_name = AuthorName,
        author_link = AuthorLink,
        author_icon = AuthorIcon,
        title = Title,
        title_link = TitleLink,
        text = Text,
        fields = Fields,
        image_url = ImageUrl,
        thumb_url = ThumbUrl,
        footer = Footer,
        footer_icon = FooterIcon,
        ts = Ts
    } = Record,
    #{
        <<"fallback">> => igor_json:pack(Fallback, string),
        <<"color">> => igor_json:pack(Color, string),
        <<"pretext">> => igor_json:pack(Pretext, string),
        <<"author_name">> => igor_json:pack(AuthorName, string),
        <<"author_link">> => igor_json:pack(AuthorLink, string),
        <<"author_icon">> => igor_json:pack(AuthorIcon, string),
        <<"title">> => igor_json:pack(Title, string),
        <<"title_link">> => igor_json:pack(TitleLink, string),
        <<"text">> => igor_json:pack(Text, string),
        <<"fields">> => igor_json:pack(Fields, {list, {custom, fun slack_protocol:attachment_field_to_json/1}}),
        <<"image_url">> => igor_json:pack(ImageUrl, string),
        <<"thumb_url">> => igor_json:pack(ThumbUrl, string),
        <<"footer">> => igor_json:pack(Footer, string),
        <<"footer_icon">> => igor_json:pack(FooterIcon, string),
        <<"ts">> => igor_json:pack(Ts, int)
    }.

-spec attachment_block_from_json(igor_json:json_object()) -> attachment_block().

attachment_block_from_json(Json) ->
    Fallback = igor_json:parse(Json, <<"fallback">>, string, undefined),
    Color = igor_json:parse(Json, <<"color">>, string, undefined),
    Pretext = igor_json:parse(Json, <<"pretext">>, string, undefined),
    AuthorName = igor_json:parse(Json, <<"author_name">>, string, undefined),
    AuthorLink = igor_json:parse(Json, <<"author_link">>, string, undefined),
    AuthorIcon = igor_json:parse(Json, <<"author_icon">>, string, undefined),
    Title = igor_json:parse(Json, <<"title">>, string, undefined),
    TitleLink = igor_json:parse(Json, <<"title_link">>, string, undefined),
    Text = igor_json:parse(Json, <<"text">>, string, undefined),
    Fields = igor_json:parse(Json, <<"fields">>, {list, {custom, fun slack_protocol:attachment_field_from_json/1}}, undefined),
    ImageUrl = igor_json:parse(Json, <<"image_url">>, string, undefined),
    ThumbUrl = igor_json:parse(Json, <<"thumb_url">>, string, undefined),
    Footer = igor_json:parse(Json, <<"footer">>, string, undefined),
    FooterIcon = igor_json:parse(Json, <<"footer_icon">>, string, undefined),
    Ts = igor_json:parse(Json, <<"ts">>, int, undefined),
    #attachment_block{
        fallback = Fallback,
        color = Color,
        pretext = Pretext,
        author_name = AuthorName,
        author_link = AuthorLink,
        author_icon = AuthorIcon,
        title = Title,
        title_link = TitleLink,
        text = Text,
        fields = Fields,
        image_url = ImageUrl,
        thumb_url = ThumbUrl,
        footer = Footer,
        footer_icon = FooterIcon,
        ts = Ts
    }.

-spec post_message_ex_request_to_json(post_message_ex_request()) -> igor_json:json_object().

post_message_ex_request_to_json(Record) ->
    #post_message_ex_request{
        channel = Channel,
        text = Text,
        mrkdwn = Mrkdwn,
        attachments = Attachments
    } = Record,
    ?assert(Channel =/= undefined),
    ?assert(Text =/= undefined),
    ?assert(Mrkdwn =/= undefined),
    ?assert(Attachments =/= undefined),
    #{
        <<"channel">> => igor_json:pack(Channel, string),
        <<"text">> => igor_json:pack(Text, string),
        <<"mrkdwn">> => igor_json:pack(Mrkdwn, boolean),
        <<"attachments">> => igor_json:pack(Attachments, {list, {custom, fun slack_protocol:attachment_block_to_json/1}})
    }.

-spec post_message_ex_request_from_json(igor_json:json_object()) -> post_message_ex_request().

post_message_ex_request_from_json(Json) ->
    Channel = igor_json:parse(Json, <<"channel">>, string),
    Text = igor_json:parse(Json, <<"text">>, string),
    Mrkdwn = igor_json:parse(Json, <<"mrkdwn">>, boolean, false),
    Attachments = igor_json:parse(Json, <<"attachments">>, {list, {custom, fun slack_protocol:attachment_block_from_json/1}}),
    #post_message_ex_request{
        channel = Channel,
        text = Text,
        mrkdwn = Mrkdwn,
        attachments = Attachments
    }.

-spec post_message_response_to_json(post_message_response()) -> igor_json:json_object().

post_message_response_to_json(Record) ->
    #post_message_response{
        ok = Ok,
        channel = Channel,
        ts = Ts,
        message = VarMessage,
        error = Error
    } = Record,
    ?assert(Ok =/= undefined),
    #{
        <<"ok">> => igor_json:pack(Ok, boolean),
        <<"channel">> => igor_json:pack(Channel, string),
        <<"ts">> => igor_json:pack(Ts, string),
        <<"message">> => igor_json:pack(VarMessage, {custom, fun slack_protocol:message_to_json/1}),
        <<"error">> => igor_json:pack(Error, string)
    }.

-spec post_message_response_from_json(igor_json:json_object()) -> post_message_response().

post_message_response_from_json(Json) ->
    Ok = igor_json:parse(Json, <<"ok">>, boolean),
    Channel = igor_json:parse(Json, <<"channel">>, string, undefined),
    Ts = igor_json:parse(Json, <<"ts">>, string, undefined),
    VarMessage = igor_json:parse(Json, <<"message">>, {custom, fun slack_protocol:message_from_json/1}, undefined),
    Error = igor_json:parse(Json, <<"error">>, string, undefined),
    #post_message_response{
        ok = Ok,
        channel = Channel,
        ts = Ts,
        message = VarMessage,
        error = Error
    }.

-spec post_snippet_request_to_json(post_snippet_request()) -> igor_json:json_object().

post_snippet_request_to_json(Record) ->
    #post_snippet_request{
        channels = Channels,
        title = Title,
        initial_comment = InitialComment,
        content = VarContent
    } = Record,
    ?assert(Channels =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(InitialComment =/= undefined),
    ?assert(VarContent =/= undefined),
    #{
        <<"channels">> => igor_json:pack(Channels, string),
        <<"title">> => igor_json:pack(Title, string),
        <<"initial_comment">> => igor_json:pack(InitialComment, string),
        <<"content">> => igor_json:pack(VarContent, string)
    }.

-spec post_snippet_request_from_json(igor_json:json_object()) -> post_snippet_request().

post_snippet_request_from_json(Json) ->
    Channels = igor_json:parse(Json, <<"channels">>, string),
    Title = igor_json:parse(Json, <<"title">>, string),
    InitialComment = igor_json:parse(Json, <<"initial_comment">>, string),
    VarContent = igor_json:parse(Json, <<"content">>, string),
    #post_snippet_request{
        channels = Channels,
        title = Title,
        initial_comment = InitialComment,
        content = VarContent
    }.

-spec post_snippet_request_to_form(post_snippet_request()) -> string().

post_snippet_request_to_form(Record) ->
    #post_snippet_request{
        channels = Channels,
        title = Title,
        initial_comment = InitialComment,
        content = VarContent
    } = Record,
    ?assert(Channels =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(InitialComment =/= undefined),
    ?assert(VarContent =/= undefined),
    igor_http:compose_query([{"channels", Channels, string}, {"title", Title, string}, {"initial_comment", InitialComment, string}, {"content", VarContent, string}]).

-spec post_snippet_request_from_form(string()) -> post_snippet_request().

post_snippet_request_from_form(Form) ->
    Channels = igor_http:parse_query(Form, channels, string),
    Title = igor_http:parse_query(Form, title, string),
    InitialComment = igor_http:parse_query(Form, initial_comment, string),
    VarContent = igor_http:parse_query(Form, content, string),
    #post_snippet_request{
        channels = Channels,
        title = Title,
        initial_comment = InitialComment,
        content = VarContent
    }.

-spec post_snippet_response_to_json(post_snippet_response()) -> igor_json:json_object().

post_snippet_response_to_json(Record) ->
    #post_snippet_response{ok = Ok, file = File} = Record,
    ?assert(Ok =/= undefined),
    #{
        <<"ok">> => igor_json:pack(Ok, boolean),
        <<"file">> => igor_json:pack(File, {custom, fun slack_protocol:file_to_json/1})
    }.

-spec post_snippet_response_from_json(igor_json:json_object()) -> post_snippet_response().

post_snippet_response_from_json(Json) ->
    Ok = igor_json:parse(Json, <<"ok">>, boolean),
    File = igor_json:parse(Json, <<"file">>, {custom, fun slack_protocol:file_from_json/1}, undefined),
    #post_snippet_response{ok = Ok, file = File}.

-spec get_users_response_to_json(get_users_response()) -> igor_json:json_object().

get_users_response_to_json(Record) ->
    #get_users_response{ok = Ok, members = Members} = Record,
    ?assert(Ok =/= undefined),
    ?assert(Members =/= undefined),
    #{
        <<"ok">> => igor_json:pack(Ok, boolean),
        <<"members">> => igor_json:pack(Members, {list, {custom, fun slack_protocol:member_to_json/1}})
    }.

-spec get_users_response_from_json(igor_json:json_object()) -> get_users_response().

get_users_response_from_json(Json) ->
    Ok = igor_json:parse(Json, <<"ok">>, boolean),
    Members = igor_json:parse(Json, <<"members">>, {list, {custom, fun slack_protocol:member_from_json/1}}),
    #get_users_response{ok = Ok, members = Members}.

-spec member_to_json(member()) -> igor_json:json_object().

member_to_json(Record) ->
    #member{id = Id, profile = Profile} = Record,
    ?assert(Id =/= undefined),
    ?assert(Profile =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"profile">> => igor_json:pack(Profile, {custom, fun slack_protocol:member_profile_to_json/1})
    }.

-spec member_from_json(igor_json:json_object()) -> member().

member_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, string),
    Profile = igor_json:parse(Json, <<"profile">>, {custom, fun slack_protocol:member_profile_from_json/1}),
    #member{id = Id, profile = Profile}.

-spec member_profile_to_json(member_profile()) -> igor_json:json_object().

member_profile_to_json(Record) ->
    #member_profile{real_name = RealName, display_name = DisplayName} = Record,
    ?assert(RealName =/= undefined),
    ?assert(DisplayName =/= undefined),
    #{
        <<"real_name">> => igor_json:pack(RealName, string),
        <<"display_name">> => igor_json:pack(DisplayName, string)
    }.

-spec member_profile_from_json(igor_json:json_object()) -> member_profile().

member_profile_from_json(Json) ->
    RealName = igor_json:parse(Json, <<"real_name">>, string),
    DisplayName = igor_json:parse(Json, <<"display_name">>, string),
    #member_profile{real_name = RealName, display_name = DisplayName}.

-spec channel_to_json(channel()) -> igor_json:json_object().

channel_to_json(Record) ->
    #channel{id = Id} = Record,
    ?assert(Id =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string)
    }.

-spec channel_from_json(igor_json:json_object()) -> channel().

channel_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, string),
    #channel{id = Id}.

