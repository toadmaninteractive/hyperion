%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(protocol_db).

-include_lib("stdlib/include/assert.hrl").
-include("protocol_db.hrl").

-export([
    access_role_to_string/1,
    access_role_from_string/1,
    access_role_to_json/1,
    access_role_from_json/1,
    test_run_status_to_string/1,
    test_run_status_from_string/1,
    test_run_status_to_json/1,
    test_run_status_from_json/1,
    test_status_to_string/1,
    test_status_from_string/1,
    test_status_to_json/1,
    test_status_from_json/1,
    attachment_owner_to_string/1,
    attachment_owner_from_string/1,
    attachment_owner_to_json/1,
    attachment_owner_from_json/1,
    spec_type_to_string/1,
    spec_type_from_string/1,
    spec_type_to_json/1,
    spec_type_from_json/1,
    personnel_account_to_json/1,
    personnel_account_from_json/1,
    personnel_account_profile_to_json/1,
    personnel_account_profile_from_json/1,
    personnel_account_role_to_json/1,
    personnel_account_role_from_json/1,
    personnel_group_to_json/1,
    personnel_group_from_json/1,
    personnel_group_role_to_json/1,
    personnel_group_role_from_json/1,
    project_to_json/1,
    project_from_json/1,
    setup_step_to_json/1,
    setup_step_from_json/1,
    test_case_specialization_to_json/1,
    test_case_specialization_from_json/1,
    test_case_to_json/1,
    test_case_from_json/1,
    test_run_to_json/1,
    test_run_from_json/1,
    specialized_setup_to_json/1,
    specialized_setup_from_json/1,
    test_run_item_params_to_json/1,
    test_run_item_params_from_json/1,
    test_run_item_to_json/1,
    test_run_item_from_json/1,
    file_attachment_to_json/1,
    file_attachment_from_json/1,
    file_attachment_link_to_json/1,
    file_attachment_link_from_json/1,
    parameter_value_to_json/1,
    parameter_value_from_json/1,
    parameter_to_json/1,
    parameter_from_json/1,
    jira_instance_to_json/1,
    jira_instance_from_json/1,
    jira_auth_to_json/1,
    jira_auth_from_json/1
]).

-export_type([
    access_role/0,
    test_run_status/0,
    test_status/0,
    attachment_owner/0,
    spec_type/0,
    personnel_account/0,
    personnel_account_profile/0,
    personnel_account_role/0,
    personnel_group/0,
    personnel_group_role/0,
    project/0,
    setup_step/0,
    test_case_specialization/0,
    test_case/0,
    test_run/0,
    specialized_setup/0,
    test_run_item_params/0,
    test_run_item/0,
    file_attachment/0,
    file_attachment_link/0,
    parameter_value/0,
    parameter/0,
    jira_instance/0,
    jira_auth/0
]).

-type access_role() :: 'consumer' | 'maintainer' | 'admin'.
-type test_run_status() :: 'draft' | 'in_progress' | 'closed'.
-type test_status() :: 'pending' | 'in_progress' | 'passed' | 'failed' | 'blocked'.
-type attachment_owner() :: 'setup_step' | 'test_case' | 'test_run' | 'test_run_item'.
-type spec_type() :: 'value' | 'source' | 'any' | 'random'.
-type personnel_account() :: #personnel_account{}.
-type personnel_account_profile() :: #personnel_account_profile{}.
-type personnel_account_role() :: #personnel_account_role{}.
-type personnel_group() :: #personnel_group{}.
-type personnel_group_role() :: #personnel_group_role{}.
-type project() :: #project{}.
-type setup_step() :: #setup_step{}.
-type test_case_specialization() :: #test_case_specialization{}.
-type test_case() :: #test_case{}.
-type test_run() :: #test_run{}.
-type specialized_setup() :: #specialized_setup{}.
-type test_run_item_params() :: #test_run_item_params{}.
-type test_run_item() :: #test_run_item{}.
-type file_attachment() :: #file_attachment{}.
-type file_attachment_link() :: #file_attachment_link{}.
-type parameter_value() :: #parameter_value{}.
-type parameter() :: #parameter{}.
-type jira_instance() :: #jira_instance{}.
-type jira_auth() :: #jira_auth{}.

-spec access_role_to_string(access_role()) -> binary().

access_role_to_string(consumer) -> <<"consumer">>;
access_role_to_string(maintainer) -> <<"maintainer">>;
access_role_to_string(admin) -> <<"admin">>.

-spec access_role_from_string(binary()) -> access_role().

access_role_from_string(<<"consumer">>) -> consumer;
access_role_from_string(<<"maintainer">>) -> maintainer;
access_role_from_string(<<"admin">>) -> admin.

-spec access_role_to_json(access_role()) -> igor_json:json_string().

access_role_to_json(consumer) -> <<"consumer">>;
access_role_to_json(maintainer) -> <<"maintainer">>;
access_role_to_json(admin) -> <<"admin">>.

-spec access_role_from_json(igor_json:json()) -> access_role().

access_role_from_json(<<"consumer">>) -> consumer;
access_role_from_json(<<"maintainer">>) -> maintainer;
access_role_from_json(<<"admin">>) -> admin.

-spec test_run_status_to_string(test_run_status()) -> binary().

test_run_status_to_string(draft) -> <<"draft">>;
test_run_status_to_string(in_progress) -> <<"in_progress">>;
test_run_status_to_string(closed) -> <<"closed">>.

-spec test_run_status_from_string(binary()) -> test_run_status().

test_run_status_from_string(<<"draft">>) -> draft;
test_run_status_from_string(<<"in_progress">>) -> in_progress;
test_run_status_from_string(<<"closed">>) -> closed.

-spec test_run_status_to_json(test_run_status()) -> igor_json:json_string().

test_run_status_to_json(draft) -> <<"draft">>;
test_run_status_to_json(in_progress) -> <<"in_progress">>;
test_run_status_to_json(closed) -> <<"closed">>.

-spec test_run_status_from_json(igor_json:json()) -> test_run_status().

test_run_status_from_json(<<"draft">>) -> draft;
test_run_status_from_json(<<"in_progress">>) -> in_progress;
test_run_status_from_json(<<"closed">>) -> closed.

-spec test_status_to_string(test_status()) -> binary().

test_status_to_string(pending) -> <<"pending">>;
test_status_to_string(in_progress) -> <<"in_progress">>;
test_status_to_string(passed) -> <<"passed">>;
test_status_to_string(failed) -> <<"failed">>;
test_status_to_string(blocked) -> <<"blocked">>.

-spec test_status_from_string(binary()) -> test_status().

test_status_from_string(<<"pending">>) -> pending;
test_status_from_string(<<"in_progress">>) -> in_progress;
test_status_from_string(<<"passed">>) -> passed;
test_status_from_string(<<"failed">>) -> failed;
test_status_from_string(<<"blocked">>) -> blocked.

-spec test_status_to_json(test_status()) -> igor_json:json_string().

test_status_to_json(pending) -> <<"pending">>;
test_status_to_json(in_progress) -> <<"in_progress">>;
test_status_to_json(passed) -> <<"passed">>;
test_status_to_json(failed) -> <<"failed">>;
test_status_to_json(blocked) -> <<"blocked">>.

-spec test_status_from_json(igor_json:json()) -> test_status().

test_status_from_json(<<"pending">>) -> pending;
test_status_from_json(<<"in_progress">>) -> in_progress;
test_status_from_json(<<"passed">>) -> passed;
test_status_from_json(<<"failed">>) -> failed;
test_status_from_json(<<"blocked">>) -> blocked.

-spec attachment_owner_to_string(attachment_owner()) -> binary().

attachment_owner_to_string(setup_step) -> <<"setup_step">>;
attachment_owner_to_string(test_case) -> <<"test_case">>;
attachment_owner_to_string(test_run) -> <<"test_run">>;
attachment_owner_to_string(test_run_item) -> <<"test_run_item">>.

-spec attachment_owner_from_string(binary()) -> attachment_owner().

attachment_owner_from_string(<<"setup_step">>) -> setup_step;
attachment_owner_from_string(<<"test_case">>) -> test_case;
attachment_owner_from_string(<<"test_run">>) -> test_run;
attachment_owner_from_string(<<"test_run_item">>) -> test_run_item.

-spec attachment_owner_to_json(attachment_owner()) -> igor_json:json_string().

attachment_owner_to_json(setup_step) -> <<"setup_step">>;
attachment_owner_to_json(test_case) -> <<"test_case">>;
attachment_owner_to_json(test_run) -> <<"test_run">>;
attachment_owner_to_json(test_run_item) -> <<"test_run_item">>.

-spec attachment_owner_from_json(igor_json:json()) -> attachment_owner().

attachment_owner_from_json(<<"setup_step">>) -> setup_step;
attachment_owner_from_json(<<"test_case">>) -> test_case;
attachment_owner_from_json(<<"test_run">>) -> test_run;
attachment_owner_from_json(<<"test_run_item">>) -> test_run_item.

-spec spec_type_to_string(spec_type()) -> binary().

spec_type_to_string(value) -> <<"value">>;
spec_type_to_string(source) -> <<"source">>;
spec_type_to_string(any) -> <<"any">>;
spec_type_to_string(random) -> <<"random">>.

-spec spec_type_from_string(binary()) -> spec_type().

spec_type_from_string(<<"value">>) -> value;
spec_type_from_string(<<"source">>) -> source;
spec_type_from_string(<<"any">>) -> any;
spec_type_from_string(<<"random">>) -> random.

-spec spec_type_to_json(spec_type()) -> igor_json:json_string().

spec_type_to_json(value) -> <<"value">>;
spec_type_to_json(source) -> <<"source">>;
spec_type_to_json(any) -> <<"any">>;
spec_type_to_json(random) -> <<"random">>.

-spec spec_type_from_json(igor_json:json()) -> spec_type().

spec_type_from_json(<<"value">>) -> value;
spec_type_from_json(<<"source">>) -> source;
spec_type_from_json(<<"any">>) -> any;
spec_type_from_json(<<"random">>) -> random.

-spec personnel_account_to_json(personnel_account()) -> igor_json:json_object().

personnel_account_to_json(Record) ->
    #personnel_account{
        id = Id,
        rev = Rev,
        username = Username,
        name = Name,
        email = Email,
        phone = Phone,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(IsBlocked =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(IsSuperadmin =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"username">> => igor_json:pack(Username, string),
        <<"name">> => igor_json:pack(Name, string),
        <<"email">> => igor_json:pack(Email, string),
        <<"phone">> => igor_json:pack(Phone, string),
        <<"is_blocked">> => igor_json:pack(IsBlocked, boolean),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"is_superadmin">> => igor_json:pack(IsSuperadmin, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec personnel_account_from_json(igor_json:json_object()) -> personnel_account().

personnel_account_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Username = igor_json:parse(Json, <<"username">>, string),
    Name = igor_json:parse(Json, <<"name">>, string, undefined),
    Email = igor_json:parse(Json, <<"email">>, string, undefined),
    Phone = igor_json:parse(Json, <<"phone">>, string, undefined),
    IsBlocked = igor_json:parse(Json, <<"is_blocked">>, boolean),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    IsSuperadmin = igor_json:parse(Json, <<"is_superadmin">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #personnel_account{
        id = Id,
        rev = Rev,
        username = Username,
        name = Name,
        email = Email,
        phone = Phone,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec personnel_account_profile_to_json(personnel_account_profile()) -> igor_json:json_object().

personnel_account_profile_to_json(Record) ->
    #personnel_account_profile{
        id = Id,
        rev = Rev,
        username = Username,
        name = Name,
        email = Email,
        phone = Phone,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        is_project_manager = IsProjectManager,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(IsBlocked =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(IsProjectManager =/= undefined),
    ?assert(IsSuperadmin =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"username">> => igor_json:pack(Username, string),
        <<"name">> => igor_json:pack(Name, string),
        <<"email">> => igor_json:pack(Email, string),
        <<"phone">> => igor_json:pack(Phone, string),
        <<"is_blocked">> => igor_json:pack(IsBlocked, boolean),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"is_project_manager">> => igor_json:pack(IsProjectManager, boolean),
        <<"is_superadmin">> => igor_json:pack(IsSuperadmin, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec personnel_account_profile_from_json(igor_json:json_object()) -> personnel_account_profile().

personnel_account_profile_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Username = igor_json:parse(Json, <<"username">>, string),
    Name = igor_json:parse(Json, <<"name">>, string, undefined),
    Email = igor_json:parse(Json, <<"email">>, string, undefined),
    Phone = igor_json:parse(Json, <<"phone">>, string, undefined),
    IsBlocked = igor_json:parse(Json, <<"is_blocked">>, boolean),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    IsProjectManager = igor_json:parse(Json, <<"is_project_manager">>, boolean),
    IsSuperadmin = igor_json:parse(Json, <<"is_superadmin">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #personnel_account_profile{
        id = Id,
        rev = Rev,
        username = Username,
        name = Name,
        email = Email,
        phone = Phone,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        is_project_manager = IsProjectManager,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec personnel_account_role_to_json(personnel_account_role()) -> igor_json:json_object().

personnel_account_role_to_json(Record) ->
    #personnel_account_role{
        personnel_id = PersonnelId,
        username = Username,
        project_id = ProjectId,
        project_title = ProjectTitle,
        group_roles = GroupRoles,
        user_role = UserRole
    } = Record,
    ?assert(PersonnelId =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(ProjectId =/= undefined),
    ?assert(ProjectTitle =/= undefined),
    #{
        <<"personnel_id">> => igor_json:pack(PersonnelId, long),
        <<"username">> => igor_json:pack(Username, string),
        <<"project_id">> => igor_json:pack(ProjectId, long),
        <<"project_title">> => igor_json:pack(ProjectTitle, string),
        <<"group_roles">> => igor_json:pack(GroupRoles, json),
        <<"user_role">> => igor_json:pack(UserRole, {custom, fun protocol_db:access_role_to_json/1})
    }.

-spec personnel_account_role_from_json(igor_json:json_object()) -> personnel_account_role().

personnel_account_role_from_json(Json) ->
    PersonnelId = igor_json:parse(Json, <<"personnel_id">>, long),
    Username = igor_json:parse(Json, <<"username">>, string),
    ProjectId = igor_json:parse(Json, <<"project_id">>, long),
    ProjectTitle = igor_json:parse(Json, <<"project_title">>, string),
    GroupRoles = igor_json:parse(Json, <<"group_roles">>, json, undefined),
    UserRole = igor_json:parse(Json, <<"user_role">>, {custom, fun protocol_db:access_role_from_json/1}, undefined),
    #personnel_account_role{
        personnel_id = PersonnelId,
        username = Username,
        project_id = ProjectId,
        project_title = ProjectTitle,
        group_roles = GroupRoles,
        user_role = UserRole
    }.

-spec personnel_group_to_json(personnel_group()) -> igor_json:json_object().

personnel_group_to_json(Record) ->
    #personnel_group{
        id = Id,
        rev = Rev,
        name = Name,
        description = Description,
        is_deleted = IsDeleted,
        members = Members,
        member_count = MemberCount,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Name =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(Members =/= undefined),
    ?assert(MemberCount =/= undefined),
    ?assert(IsSuperadmin =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"name">> => igor_json:pack(Name, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"members">> => igor_json:pack(Members, {list, string}),
        <<"member_count">> => igor_json:pack(MemberCount, int),
        <<"is_superadmin">> => igor_json:pack(IsSuperadmin, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec personnel_group_from_json(igor_json:json_object()) -> personnel_group().

personnel_group_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Name = igor_json:parse(Json, <<"name">>, string),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    Members = igor_json:parse(Json, <<"members">>, {list, string}),
    MemberCount = igor_json:parse(Json, <<"member_count">>, int),
    IsSuperadmin = igor_json:parse(Json, <<"is_superadmin">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #personnel_group{
        id = Id,
        rev = Rev,
        name = Name,
        description = Description,
        is_deleted = IsDeleted,
        members = Members,
        member_count = MemberCount,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec personnel_group_role_to_json(personnel_group_role()) -> igor_json:json_object().

personnel_group_role_to_json(Record) ->
    #personnel_group_role{
        group_id = GroupId,
        group_name = GroupName,
        project_id = ProjectId,
        project_title = ProjectTitle,
        group_role = GroupRole
    } = Record,
    ?assert(GroupId =/= undefined),
    ?assert(GroupName =/= undefined),
    ?assert(ProjectId =/= undefined),
    ?assert(ProjectTitle =/= undefined),
    #{
        <<"group_id">> => igor_json:pack(GroupId, long),
        <<"group_name">> => igor_json:pack(GroupName, string),
        <<"project_id">> => igor_json:pack(ProjectId, long),
        <<"project_title">> => igor_json:pack(ProjectTitle, string),
        <<"group_role">> => igor_json:pack(GroupRole, {custom, fun protocol_db:access_role_to_json/1})
    }.

-spec personnel_group_role_from_json(igor_json:json_object()) -> personnel_group_role().

personnel_group_role_from_json(Json) ->
    GroupId = igor_json:parse(Json, <<"group_id">>, long),
    GroupName = igor_json:parse(Json, <<"group_name">>, string),
    ProjectId = igor_json:parse(Json, <<"project_id">>, long),
    ProjectTitle = igor_json:parse(Json, <<"project_title">>, string),
    GroupRole = igor_json:parse(Json, <<"group_role">>, {custom, fun protocol_db:access_role_from_json/1}, undefined),
    #personnel_group_role{
        group_id = GroupId,
        group_name = GroupName,
        project_id = ProjectId,
        project_title = ProjectTitle,
        group_role = GroupRole
    }.

-spec project_to_json(project()) -> igor_json:json_object().

project_to_json(Record) ->
    #project{
        id = Id,
        rev = Rev,
        title = Title,
        key = VarKey,
        slack_receivers = SlackReceivers,
        owner_id = OwnerId,
        owner_name = OwnerName,
        jira_id = JiraId,
        jira_title = JiraTitle,
        jira_url = JiraUrl,
        jira_key = JiraKey,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(VarKey =/= undefined),
    ?assert(OwnerId =/= undefined),
    ?assert(OwnerName =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"title">> => igor_json:pack(Title, string),
        <<"key">> => igor_json:pack(VarKey, string),
        <<"slack_receivers">> => igor_json:pack(SlackReceivers, string),
        <<"owner_id">> => igor_json:pack(OwnerId, long),
        <<"owner_name">> => igor_json:pack(OwnerName, string),
        <<"jira_id">> => igor_json:pack(JiraId, long),
        <<"jira_title">> => igor_json:pack(JiraTitle, string),
        <<"jira_url">> => igor_json:pack(JiraUrl, string),
        <<"jira_key">> => igor_json:pack(JiraKey, string),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec project_from_json(igor_json:json_object()) -> project().

project_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Title = igor_json:parse(Json, <<"title">>, string),
    VarKey = igor_json:parse(Json, <<"key">>, string),
    SlackReceivers = igor_json:parse(Json, <<"slack_receivers">>, string, undefined),
    OwnerId = igor_json:parse(Json, <<"owner_id">>, long),
    OwnerName = igor_json:parse(Json, <<"owner_name">>, string),
    JiraId = igor_json:parse(Json, <<"jira_id">>, long, undefined),
    JiraTitle = igor_json:parse(Json, <<"jira_title">>, string, undefined),
    JiraUrl = igor_json:parse(Json, <<"jira_url">>, string, undefined),
    JiraKey = igor_json:parse(Json, <<"jira_key">>, string, undefined),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #project{
        id = Id,
        rev = Rev,
        title = Title,
        key = VarKey,
        slack_receivers = SlackReceivers,
        owner_id = OwnerId,
        owner_name = OwnerName,
        jira_id = JiraId,
        jira_title = JiraTitle,
        jira_url = JiraUrl,
        jira_key = JiraKey,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec setup_step_to_json(setup_step()) -> igor_json:json_object().

setup_step_to_json(Record) ->
    #setup_step{
        id = Id,
        rev = Rev,
        parent_id = ParentId,
        project_id = ProjectId,
        title = Title,
        description = Description,
        is_draft = IsDraft,
        order_num = OrderNum,
        parameter_id = ParameterId,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(ProjectId =/= undefined),
    ?assert(IsDraft =/= undefined),
    ?assert(OrderNum =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"parent_id">> => igor_json:pack(ParentId, long),
        <<"project_id">> => igor_json:pack(ProjectId, long),
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"is_draft">> => igor_json:pack(IsDraft, boolean),
        <<"order_num">> => igor_json:pack(OrderNum, int),
        <<"parameter_id">> => igor_json:pack(ParameterId, long),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec setup_step_from_json(igor_json:json_object()) -> setup_step().

setup_step_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    ParentId = igor_json:parse(Json, <<"parent_id">>, long, undefined),
    ProjectId = igor_json:parse(Json, <<"project_id">>, long),
    Title = igor_json:parse(Json, <<"title">>, string, undefined),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    IsDraft = igor_json:parse(Json, <<"is_draft">>, boolean),
    OrderNum = igor_json:parse(Json, <<"order_num">>, int),
    ParameterId = igor_json:parse(Json, <<"parameter_id">>, long, undefined),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #setup_step{
        id = Id,
        rev = Rev,
        parent_id = ParentId,
        project_id = ProjectId,
        title = Title,
        description = Description,
        is_draft = IsDraft,
        order_num = OrderNum,
        parameter_id = ParameterId,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec test_case_specialization_to_json(test_case_specialization()) -> igor_json:json_object().

test_case_specialization_to_json(Record) ->
    #test_case_specialization{
        setup_id = SetupId,
        spec_type = SpecType,
        value = VarValue,
        parameter_id = ParameterId
    } = Record,
    ?assert(SetupId =/= undefined),
    ?assert(SpecType =/= undefined),
    #{
        <<"setup_id">> => igor_json:pack(SetupId, long),
        <<"spec_type">> => igor_json:pack(SpecType, {custom, fun protocol_db:spec_type_to_json/1}),
        <<"value">> => igor_json:pack(VarValue, string),
        <<"parameter_id">> => igor_json:pack(ParameterId, long)
    }.

-spec test_case_specialization_from_json(igor_json:json_object()) -> test_case_specialization().

test_case_specialization_from_json(Json) ->
    SetupId = igor_json:parse(Json, <<"setup_id">>, long),
    SpecType = igor_json:parse(Json, <<"spec_type">>, {custom, fun protocol_db:spec_type_from_json/1}),
    VarValue = igor_json:parse(Json, <<"value">>, string, undefined),
    ParameterId = igor_json:parse(Json, <<"parameter_id">>, long, undefined),
    #test_case_specialization{
        setup_id = SetupId,
        spec_type = SpecType,
        value = VarValue,
        parameter_id = ParameterId
    }.

-spec test_case_to_json(test_case()) -> igor_json:json_object().

test_case_to_json(Record) ->
    #test_case{
        id = Id,
        rev = Rev,
        parent_id = ParentId,
        project_id = ProjectId,
        precondition_id = PreconditionId,
        setup_id = SetupId,
        is_group = IsGroup,
        title = Title,
        description = Description,
        test_steps = TestSteps,
        expected_result = ExpectedResult,
        is_draft = IsDraft,
        order_num = OrderNum,
        specs = Specs,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(ProjectId =/= undefined),
    ?assert(IsGroup =/= undefined),
    ?assert(TestSteps =/= undefined),
    ?assert(ExpectedResult =/= undefined),
    ?assert(IsDraft =/= undefined),
    ?assert(OrderNum =/= undefined),
    ?assert(Specs =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"parent_id">> => igor_json:pack(ParentId, long),
        <<"project_id">> => igor_json:pack(ProjectId, long),
        <<"precondition_id">> => igor_json:pack(PreconditionId, long),
        <<"setup_id">> => igor_json:pack(SetupId, long),
        <<"is_group">> => igor_json:pack(IsGroup, boolean),
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"test_steps">> => igor_json:pack(TestSteps, string),
        <<"expected_result">> => igor_json:pack(ExpectedResult, string),
        <<"is_draft">> => igor_json:pack(IsDraft, boolean),
        <<"order_num">> => igor_json:pack(OrderNum, int),
        <<"specs">> => igor_json:pack(Specs, {list, {custom, fun protocol_db:test_case_specialization_to_json/1}}),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec test_case_from_json(igor_json:json_object()) -> test_case().

test_case_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    ParentId = igor_json:parse(Json, <<"parent_id">>, long, undefined),
    ProjectId = igor_json:parse(Json, <<"project_id">>, long),
    PreconditionId = igor_json:parse(Json, <<"precondition_id">>, long, undefined),
    SetupId = igor_json:parse(Json, <<"setup_id">>, long, undefined),
    IsGroup = igor_json:parse(Json, <<"is_group">>, boolean),
    Title = igor_json:parse(Json, <<"title">>, string, undefined),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    TestSteps = igor_json:parse(Json, <<"test_steps">>, string),
    ExpectedResult = igor_json:parse(Json, <<"expected_result">>, string),
    IsDraft = igor_json:parse(Json, <<"is_draft">>, boolean),
    OrderNum = igor_json:parse(Json, <<"order_num">>, int),
    Specs = igor_json:parse(Json, <<"specs">>, {list, {custom, fun protocol_db:test_case_specialization_from_json/1}}, []),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #test_case{
        id = Id,
        rev = Rev,
        parent_id = ParentId,
        project_id = ProjectId,
        precondition_id = PreconditionId,
        setup_id = SetupId,
        is_group = IsGroup,
        title = Title,
        description = Description,
        test_steps = TestSteps,
        expected_result = ExpectedResult,
        is_draft = IsDraft,
        order_num = OrderNum,
        specs = Specs,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec test_run_to_json(test_run()) -> igor_json:json_object().

test_run_to_json(Record) ->
    #test_run{
        id = Id,
        rev = Rev,
        project_id = ProjectId,
        title = Title,
        status = Status,
        created_at = CreatedAt,
        updated_at = UpdatedAt,
        started_at = StartedAt,
        finished_at = FinishedAt,
        total_item_count = TotalItemCount,
        pending_item_count = PendingItemCount,
        in_progress_item_count = InProgressItemCount,
        passed_item_count = PassedItemCount,
        failed_item_count = FailedItemCount,
        blocked_item_count = BlockedItemCount
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(ProjectId =/= undefined),
    ?assert(Status =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    ?assert(TotalItemCount =/= undefined),
    ?assert(PendingItemCount =/= undefined),
    ?assert(InProgressItemCount =/= undefined),
    ?assert(PassedItemCount =/= undefined),
    ?assert(FailedItemCount =/= undefined),
    ?assert(BlockedItemCount =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"project_id">> => igor_json:pack(ProjectId, long),
        <<"title">> => igor_json:pack(Title, string),
        <<"status">> => igor_json:pack(Status, {custom, fun protocol_db:test_run_status_to_json/1}),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"started_at">> => igor_json:pack(StartedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"finished_at">> => igor_json:pack(FinishedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"total_item_count">> => igor_json:pack(TotalItemCount, int),
        <<"pending_item_count">> => igor_json:pack(PendingItemCount, int),
        <<"in_progress_item_count">> => igor_json:pack(InProgressItemCount, int),
        <<"passed_item_count">> => igor_json:pack(PassedItemCount, int),
        <<"failed_item_count">> => igor_json:pack(FailedItemCount, int),
        <<"blocked_item_count">> => igor_json:pack(BlockedItemCount, int)
    }.

-spec test_run_from_json(igor_json:json_object()) -> test_run().

test_run_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    ProjectId = igor_json:parse(Json, <<"project_id">>, long),
    Title = igor_json:parse(Json, <<"title">>, string, undefined),
    Status = igor_json:parse(Json, <<"status">>, {custom, fun protocol_db:test_run_status_from_json/1}),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    StartedAt = igor_json:parse(Json, <<"started_at">>, {custom, fun web_types:datetime_from_text/1}, undefined),
    FinishedAt = igor_json:parse(Json, <<"finished_at">>, {custom, fun web_types:datetime_from_text/1}, undefined),
    TotalItemCount = igor_json:parse(Json, <<"total_item_count">>, int),
    PendingItemCount = igor_json:parse(Json, <<"pending_item_count">>, int),
    InProgressItemCount = igor_json:parse(Json, <<"in_progress_item_count">>, int),
    PassedItemCount = igor_json:parse(Json, <<"passed_item_count">>, int),
    FailedItemCount = igor_json:parse(Json, <<"failed_item_count">>, int),
    BlockedItemCount = igor_json:parse(Json, <<"blocked_item_count">>, int),
    #test_run{
        id = Id,
        rev = Rev,
        project_id = ProjectId,
        title = Title,
        status = Status,
        created_at = CreatedAt,
        updated_at = UpdatedAt,
        started_at = StartedAt,
        finished_at = FinishedAt,
        total_item_count = TotalItemCount,
        pending_item_count = PendingItemCount,
        in_progress_item_count = InProgressItemCount,
        passed_item_count = PassedItemCount,
        failed_item_count = FailedItemCount,
        blocked_item_count = BlockedItemCount
    }.

-spec specialized_setup_to_json(specialized_setup()) -> igor_json:json_object().

specialized_setup_to_json(Record) ->
    #specialized_setup{setup_id = SetupId, param = Param, value = VarValue} = Record,
    ?assert(SetupId =/= undefined),
    ?assert(Param =/= undefined),
    ?assert(VarValue =/= undefined),
    #{
        <<"setup_id">> => igor_json:pack(SetupId, long),
        <<"param">> => igor_json:pack(Param, string),
        <<"value">> => igor_json:pack(VarValue, string)
    }.

-spec specialized_setup_from_json(igor_json:json_object()) -> specialized_setup().

specialized_setup_from_json(Json) ->
    SetupId = igor_json:parse(Json, <<"setup_id">>, long),
    Param = igor_json:parse(Json, <<"param">>, string),
    VarValue = igor_json:parse(Json, <<"value">>, string),
    #specialized_setup{setup_id = SetupId, param = Param, value = VarValue}.

-spec test_run_item_params_to_json(test_run_item_params()) -> igor_json:json_object().

test_run_item_params_to_json(Record) ->
    #test_run_item_params{setup_steps = SetupSteps, specs = Specs} = Record,
    ?assert(SetupSteps =/= undefined),
    ?assert(Specs =/= undefined),
    #{
        <<"setup_steps">> => igor_json:pack(SetupSteps, {list, long}),
        <<"specs">> => igor_json:pack(Specs, {list, {custom, fun protocol_db:specialized_setup_to_json/1}})
    }.

-spec test_run_item_params_from_json(igor_json:json_object()) -> test_run_item_params().

test_run_item_params_from_json(Json) ->
    SetupSteps = igor_json:parse(Json, <<"setup_steps">>, {list, long}, []),
    Specs = igor_json:parse(Json, <<"specs">>, {list, {custom, fun protocol_db:specialized_setup_from_json/1}}, []),
    #test_run_item_params{setup_steps = SetupSteps, specs = Specs}.

-spec test_run_item_to_json(test_run_item()) -> igor_json:json_object().

test_run_item_to_json(Record) ->
    #test_run_item{
        id = Id,
        rev = Rev,
        run_id = RunId,
        case_id = CaseId,
        reporter_id = ReporterId,
        reporter_name = ReporterName,
        assignee_id = AssigneeId,
        assignee_name = AssigneeName,
        status = Status,
        summary = Summary,
        failed_setup_id = FailedSetupId,
        order_num = OrderNum,
        params = Params,
        jira_issue_key = JiraIssueKey,
        jira_issue_url = JiraIssueUrl,
        created_at = CreatedAt,
        updated_at = UpdatedAt,
        started_at = StartedAt,
        finished_at = FinishedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(RunId =/= undefined),
    ?assert(CaseId =/= undefined),
    ?assert(ReporterId =/= undefined),
    ?assert(ReporterName =/= undefined),
    ?assert(Status =/= undefined),
    ?assert(OrderNum =/= undefined),
    ?assert(Params =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"run_id">> => igor_json:pack(RunId, long),
        <<"case_id">> => igor_json:pack(CaseId, long),
        <<"reporter_id">> => igor_json:pack(ReporterId, long),
        <<"reporter_name">> => igor_json:pack(ReporterName, string),
        <<"assignee_id">> => igor_json:pack(AssigneeId, long),
        <<"assignee_name">> => igor_json:pack(AssigneeName, string),
        <<"status">> => igor_json:pack(Status, {custom, fun protocol_db:test_status_to_json/1}),
        <<"summary">> => igor_json:pack(Summary, string),
        <<"failed_setup_id">> => igor_json:pack(FailedSetupId, long),
        <<"order_num">> => igor_json:pack(OrderNum, int),
        <<"params">> => igor_json:pack(Params, {custom, fun protocol_db:test_run_item_params_to_json/1}),
        <<"jira_issue_key">> => igor_json:pack(JiraIssueKey, string),
        <<"jira_issue_url">> => igor_json:pack(JiraIssueUrl, string),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"started_at">> => igor_json:pack(StartedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"finished_at">> => igor_json:pack(FinishedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec test_run_item_from_json(igor_json:json_object()) -> test_run_item().

test_run_item_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    RunId = igor_json:parse(Json, <<"run_id">>, long),
    CaseId = igor_json:parse(Json, <<"case_id">>, long),
    ReporterId = igor_json:parse(Json, <<"reporter_id">>, long),
    ReporterName = igor_json:parse(Json, <<"reporter_name">>, string),
    AssigneeId = igor_json:parse(Json, <<"assignee_id">>, long, undefined),
    AssigneeName = igor_json:parse(Json, <<"assignee_name">>, string, undefined),
    Status = igor_json:parse(Json, <<"status">>, {custom, fun protocol_db:test_status_from_json/1}),
    Summary = igor_json:parse(Json, <<"summary">>, string, undefined),
    FailedSetupId = igor_json:parse(Json, <<"failed_setup_id">>, long, undefined),
    OrderNum = igor_json:parse(Json, <<"order_num">>, int),
    Params = igor_json:parse(Json, <<"params">>, {custom, fun protocol_db:test_run_item_params_from_json/1}),
    JiraIssueKey = igor_json:parse(Json, <<"jira_issue_key">>, string, undefined),
    JiraIssueUrl = igor_json:parse(Json, <<"jira_issue_url">>, string, undefined),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    StartedAt = igor_json:parse(Json, <<"started_at">>, {custom, fun web_types:datetime_from_text/1}, undefined),
    FinishedAt = igor_json:parse(Json, <<"finished_at">>, {custom, fun web_types:datetime_from_text/1}, undefined),
    #test_run_item{
        id = Id,
        rev = Rev,
        run_id = RunId,
        case_id = CaseId,
        reporter_id = ReporterId,
        reporter_name = ReporterName,
        assignee_id = AssigneeId,
        assignee_name = AssigneeName,
        status = Status,
        summary = Summary,
        failed_setup_id = FailedSetupId,
        order_num = OrderNum,
        params = Params,
        jira_issue_key = JiraIssueKey,
        jira_issue_url = JiraIssueUrl,
        created_at = CreatedAt,
        updated_at = UpdatedAt,
        started_at = StartedAt,
        finished_at = FinishedAt
    }.

-spec file_attachment_to_json(file_attachment()) -> igor_json:json_object().

file_attachment_to_json(Record) ->
    #file_attachment{
        id = Id,
        file_size = FileSize,
        file_sha = FileSha,
        filename = Filename,
        thumb_filename = ThumbFilename,
        original_filename = OriginalFilename,
        content_type = ContentType,
        personnel_id = PersonnelId,
        personnel_name = PersonnelName,
        created_at = CreatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(FileSize =/= undefined),
    ?assert(FileSha =/= undefined),
    ?assert(Filename =/= undefined),
    ?assert(PersonnelId =/= undefined),
    ?assert(PersonnelName =/= undefined),
    ?assert(CreatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"file_size">> => igor_json:pack(FileSize, long),
        <<"file_sha">> => igor_json:pack(FileSha, string),
        <<"filename">> => igor_json:pack(Filename, string),
        <<"thumb_filename">> => igor_json:pack(ThumbFilename, string),
        <<"original_filename">> => igor_json:pack(OriginalFilename, string),
        <<"content_type">> => igor_json:pack(ContentType, string),
        <<"personnel_id">> => igor_json:pack(PersonnelId, long),
        <<"personnel_name">> => igor_json:pack(PersonnelName, string),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec file_attachment_from_json(igor_json:json_object()) -> file_attachment().

file_attachment_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    FileSize = igor_json:parse(Json, <<"file_size">>, long),
    FileSha = igor_json:parse(Json, <<"file_sha">>, string),
    Filename = igor_json:parse(Json, <<"filename">>, string),
    ThumbFilename = igor_json:parse(Json, <<"thumb_filename">>, string, undefined),
    OriginalFilename = igor_json:parse(Json, <<"original_filename">>, string, undefined),
    ContentType = igor_json:parse(Json, <<"content_type">>, string, undefined),
    PersonnelId = igor_json:parse(Json, <<"personnel_id">>, long),
    PersonnelName = igor_json:parse(Json, <<"personnel_name">>, string),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    #file_attachment{
        id = Id,
        file_size = FileSize,
        file_sha = FileSha,
        filename = Filename,
        thumb_filename = ThumbFilename,
        original_filename = OriginalFilename,
        content_type = ContentType,
        personnel_id = PersonnelId,
        personnel_name = PersonnelName,
        created_at = CreatedAt
    }.

-spec file_attachment_link_to_json(file_attachment_link()) -> igor_json:json_object().

file_attachment_link_to_json(Record) ->
    #file_attachment_link{
        attachment_id = AttachmentId,
        owner = Owner,
        linked_id = LinkedId,
        project_id = ProjectId,
        personnel_id = PersonnelId,
        personnel_name = PersonnelName,
        created_at = CreatedAt
    } = Record,
    ?assert(AttachmentId =/= undefined),
    ?assert(Owner =/= undefined),
    ?assert(LinkedId =/= undefined),
    ?assert(ProjectId =/= undefined),
    ?assert(PersonnelId =/= undefined),
    ?assert(PersonnelName =/= undefined),
    ?assert(CreatedAt =/= undefined),
    #{
        <<"attachment_id">> => igor_json:pack(AttachmentId, long),
        <<"owner">> => igor_json:pack(Owner, {custom, fun protocol_db:attachment_owner_to_json/1}),
        <<"linked_id">> => igor_json:pack(LinkedId, long),
        <<"project_id">> => igor_json:pack(ProjectId, long),
        <<"personnel_id">> => igor_json:pack(PersonnelId, long),
        <<"personnel_name">> => igor_json:pack(PersonnelName, string),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec file_attachment_link_from_json(igor_json:json_object()) -> file_attachment_link().

file_attachment_link_from_json(Json) ->
    AttachmentId = igor_json:parse(Json, <<"attachment_id">>, long),
    Owner = igor_json:parse(Json, <<"owner">>, {custom, fun protocol_db:attachment_owner_from_json/1}),
    LinkedId = igor_json:parse(Json, <<"linked_id">>, long),
    ProjectId = igor_json:parse(Json, <<"project_id">>, long),
    PersonnelId = igor_json:parse(Json, <<"personnel_id">>, long),
    PersonnelName = igor_json:parse(Json, <<"personnel_name">>, string),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    #file_attachment_link{
        attachment_id = AttachmentId,
        owner = Owner,
        linked_id = LinkedId,
        project_id = ProjectId,
        personnel_id = PersonnelId,
        personnel_name = PersonnelName,
        created_at = CreatedAt
    }.

-spec parameter_value_to_json(parameter_value()) -> igor_json:json_object().

parameter_value_to_json(Record) ->
    #parameter_value{value = VarValue, dependent_value = DependentValue} = Record,
    ?assert(VarValue =/= undefined),
    #{
        <<"value">> => igor_json:pack(VarValue, string),
        <<"dependent_value">> => igor_json:pack(DependentValue, string)
    }.

-spec parameter_value_from_json(igor_json:json_object()) -> parameter_value().

parameter_value_from_json(Json) ->
    VarValue = igor_json:parse(Json, <<"value">>, string),
    DependentValue = igor_json:parse(Json, <<"dependent_value">>, string, undefined),
    #parameter_value{value = VarValue, dependent_value = DependentValue}.

-spec parameter_to_json(parameter()) -> igor_json:json_object().

parameter_to_json(Record) ->
    #parameter{
        id = Id,
        rev = Rev,
        project_id = ProjectId,
        parent_id = ParentId,
        dependent_id = DependentId,
        title = Title,
        values = Values,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(ProjectId =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Values =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"project_id">> => igor_json:pack(ProjectId, long),
        <<"parent_id">> => igor_json:pack(ParentId, long),
        <<"dependent_id">> => igor_json:pack(DependentId, long),
        <<"title">> => igor_json:pack(Title, string),
        <<"values">> => igor_json:pack(Values, {list, {custom, fun protocol_db:parameter_value_to_json/1}}),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec parameter_from_json(igor_json:json_object()) -> parameter().

parameter_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    ProjectId = igor_json:parse(Json, <<"project_id">>, long),
    ParentId = igor_json:parse(Json, <<"parent_id">>, long, undefined),
    DependentId = igor_json:parse(Json, <<"dependent_id">>, long, undefined),
    Title = igor_json:parse(Json, <<"title">>, string),
    Values = igor_json:parse(Json, <<"values">>, {list, {custom, fun protocol_db:parameter_value_from_json/1}}, []),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #parameter{
        id = Id,
        rev = Rev,
        project_id = ProjectId,
        parent_id = ParentId,
        dependent_id = DependentId,
        title = Title,
        values = Values,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec jira_instance_to_json(jira_instance()) -> igor_json:json_object().

jira_instance_to_json(Record) ->
    #jira_instance{
        id = Id,
        title = Title,
        url = Url,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Url =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"title">> => igor_json:pack(Title, string),
        <<"url">> => igor_json:pack(Url, string),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec jira_instance_from_json(igor_json:json_object()) -> jira_instance().

jira_instance_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Title = igor_json:parse(Json, <<"title">>, string),
    Url = igor_json:parse(Json, <<"url">>, string),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #jira_instance{
        id = Id,
        title = Title,
        url = Url,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec jira_auth_to_json(jira_auth()) -> igor_json:json_object().

jira_auth_to_json(Record) ->
    #jira_auth{
        jira_id = JiraId,
        personnel_id = PersonnelId,
        username = Username,
        auth_token = AuthToken,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(JiraId =/= undefined),
    ?assert(PersonnelId =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(AuthToken =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"jira_id">> => igor_json:pack(JiraId, long),
        <<"personnel_id">> => igor_json:pack(PersonnelId, long),
        <<"username">> => igor_json:pack(Username, string),
        <<"auth_token">> => igor_json:pack(AuthToken, string),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec jira_auth_from_json(igor_json:json_object()) -> jira_auth().

jira_auth_from_json(Json) ->
    JiraId = igor_json:parse(Json, <<"jira_id">>, long),
    PersonnelId = igor_json:parse(Json, <<"personnel_id">>, long),
    Username = igor_json:parse(Json, <<"username">>, string),
    AuthToken = igor_json:parse(Json, <<"auth_token">>, string),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #jira_auth{
        jira_id = JiraId,
        personnel_id = PersonnelId,
        username = Username,
        auth_token = AuthToken,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

