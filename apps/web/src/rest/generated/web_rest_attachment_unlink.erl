%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(web_rest_attachment_unlink).

-include_lib("igor/include/igor_http.hrl").

-export([
    init/2,
    delete_attachment_link_403/1,
    delete_attachment_link_404/1,
    delete_attachment_link_500/1
]).

init(Req0, Opts) ->
    Method = cowboy_req:method(Req0),
    Req = handle_method(Method, Req0),
    {ok, Req, Opts}.

handle_method(<<"DELETE">>, Req) ->
    handle_delete(Req);
handle_method(_, Req) ->
    ResponseHeaders = #{<<"Allow">> => <<"DELETE">>},
    cowboy_req:reply(405, ResponseHeaders, Req).

delete_attachment_link_403(ResponseContent403) ->
    throw(#{status_code => 403, response => ResponseContent403}).

delete_attachment_link_404(ResponseContent404) ->
    throw(#{status_code => 404, response => ResponseContent404}).

delete_attachment_link_500(ResponseContent500) ->
    throw(#{status_code => 500, response => ResponseContent500}).

handle_delete(Req) ->
    try
        Id = igor_http:parse_value(cowboy_req:binding(id, Req), long),
        Owner = protocol_db:attachment_owner_from_string(cowboy_req:binding(owner, Req)),
        LinkedId = igor_http:parse_value(cowboy_req:binding(linked_id, Req), long),
        {ResponseContent, Req1} = web_rest_callback_attachment:delete_attachment_link(Id, Owner, LinkedId, Req),
        Body = jsx:encode(protocol_data:generic_response_to_json(ResponseContent)),
        ResponseHeaders = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
        cowboy_req:reply(200, ResponseHeaders, Body, Req1)
    catch
        #{status_code := 403, response := ResponseContent403} ->
            ResponseContent403Body = jsx:encode(protocol_data:forbidden_error_to_json(ResponseContent403)),
            ResponseHeaders403 = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
            cowboy_req:reply(403, ResponseHeaders403, ResponseContent403Body, Req);
        #{status_code := 404, response := ResponseContent404} ->
            ResponseContent404Body = jsx:encode(protocol_data:not_found_error_to_json(ResponseContent404)),
            ResponseHeaders404 = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
            cowboy_req:reply(404, ResponseHeaders404, ResponseContent404Body, Req);
        #{status_code := 500, response := ResponseContent500} ->
            ResponseContent500Body = jsx:encode(protocol_data:internal_server_error_to_json(ResponseContent500)),
            ResponseHeaders500 = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
            cowboy_req:reply(500, ResponseHeaders500, ResponseContent500Body, Req);
        #bad_request{} ->
            cowboy_req:reply(400, Req)
    end.

