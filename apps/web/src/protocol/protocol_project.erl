%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(protocol_project).

-include_lib("stdlib/include/assert.hrl").
-include("protocol_project.hrl").

-export([
    project_error_to_string/1,
    project_error_from_string/1,
    project_error_to_json/1,
    project_error_from_json/1,
    create_project_request_to_json/1,
    create_project_request_from_json/1,
    update_project_request_to_json/1,
    update_project_request_from_json/1
]).

-export_type([
    create_project_request/0,
    update_project_request/0,
    project_error/0
]).

-type create_project_request() :: #create_project_request{}.
-type update_project_request() :: #update_project_request{}.
-type project_error() :: 'invalid_title' | 'title_already_exists' | 'invalid_key' | 'key_already_exists' | 'invalid_slack_receivers' | 'owner_not_exists' | 'jira_not_exists'.

-spec project_error_to_string(project_error()) -> binary().

project_error_to_string(invalid_title) -> <<"invalid_title">>;
project_error_to_string(title_already_exists) -> <<"title_already_exists">>;
project_error_to_string(invalid_key) -> <<"invalid_key">>;
project_error_to_string(key_already_exists) -> <<"key_already_exists">>;
project_error_to_string(invalid_slack_receivers) -> <<"invalid_slack_receivers">>;
project_error_to_string(owner_not_exists) -> <<"owner_not_exists">>;
project_error_to_string(jira_not_exists) -> <<"jira_not_exists">>.

-spec project_error_from_string(binary()) -> project_error().

project_error_from_string(<<"invalid_title">>) -> invalid_title;
project_error_from_string(<<"title_already_exists">>) -> title_already_exists;
project_error_from_string(<<"invalid_key">>) -> invalid_key;
project_error_from_string(<<"key_already_exists">>) -> key_already_exists;
project_error_from_string(<<"invalid_slack_receivers">>) -> invalid_slack_receivers;
project_error_from_string(<<"owner_not_exists">>) -> owner_not_exists;
project_error_from_string(<<"jira_not_exists">>) -> jira_not_exists.

-spec project_error_to_json(project_error()) -> igor_json:json_string().

project_error_to_json(invalid_title) -> <<"invalid_title">>;
project_error_to_json(title_already_exists) -> <<"title_already_exists">>;
project_error_to_json(invalid_key) -> <<"invalid_key">>;
project_error_to_json(key_already_exists) -> <<"key_already_exists">>;
project_error_to_json(invalid_slack_receivers) -> <<"invalid_slack_receivers">>;
project_error_to_json(owner_not_exists) -> <<"owner_not_exists">>;
project_error_to_json(jira_not_exists) -> <<"jira_not_exists">>.

-spec project_error_from_json(igor_json:json()) -> project_error().

project_error_from_json(<<"invalid_title">>) -> invalid_title;
project_error_from_json(<<"title_already_exists">>) -> title_already_exists;
project_error_from_json(<<"invalid_key">>) -> invalid_key;
project_error_from_json(<<"key_already_exists">>) -> key_already_exists;
project_error_from_json(<<"invalid_slack_receivers">>) -> invalid_slack_receivers;
project_error_from_json(<<"owner_not_exists">>) -> owner_not_exists;
project_error_from_json(<<"jira_not_exists">>) -> jira_not_exists.

-spec create_project_request_to_json(create_project_request()) -> igor_json:json_object().

create_project_request_to_json(Record) ->
    #create_project_request{
        title = Title,
        key = VarKey,
        jira_id = JiraId,
        jira_key = JiraKey,
        slack_receivers = SlackReceivers
    } = Record,
    ?assert(Title =/= undefined),
    ?assert(VarKey =/= undefined),
    #{
        <<"title">> => igor_json:pack(Title, string),
        <<"key">> => igor_json:pack(VarKey, string),
        <<"jira_id">> => igor_json:pack(JiraId, long),
        <<"jira_key">> => igor_json:pack(JiraKey, string),
        <<"slack_receivers">> => igor_json:pack(SlackReceivers, string)
    }.

-spec create_project_request_from_json(igor_json:json_object()) -> create_project_request().

create_project_request_from_json(Json) ->
    Title = igor_json:parse(Json, <<"title">>, string),
    VarKey = igor_json:parse(Json, <<"key">>, string),
    JiraId = igor_json:parse(Json, <<"jira_id">>, long, undefined),
    JiraKey = igor_json:parse(Json, <<"jira_key">>, string, undefined),
    SlackReceivers = igor_json:parse(Json, <<"slack_receivers">>, string, undefined),
    #create_project_request{
        title = Title,
        key = VarKey,
        jira_id = JiraId,
        jira_key = JiraKey,
        slack_receivers = SlackReceivers
    }.

-spec update_project_request_to_json(update_project_request()) -> igor_json:json_object().

update_project_request_to_json(Record) ->
    #update_project_request{
        title = Title,
        key = VarKey,
        jira_id = JiraId,
        jira_key = JiraKey,
        slack_receivers = SlackReceivers
    } = Record,
    Json1 = igor_json:maybe_pack_field(#{}, <<"title">>, Title, string),
    Json2 = igor_json:maybe_pack_field(Json1, <<"key">>, VarKey, string),
    Json3 = igor_json:maybe_pack_field(Json2, <<"jira_id">>, JiraId, {nullable, long}),
    Json4 = igor_json:maybe_pack_field(Json3, <<"jira_key">>, JiraKey, {nullable, string}),
    Json5 = igor_json:maybe_pack_field(Json4, <<"slack_receivers">>, SlackReceivers, {nullable, string}),
    Json5.

-spec update_project_request_from_json(igor_json:json_object()) -> update_project_request().

update_project_request_from_json(Json) ->
    Title = igor_json:parse(Json, <<"title">>, string, undefined),
    VarKey = igor_json:parse(Json, <<"key">>, string, undefined),
    JiraId = igor_json:parse(Json, <<"jira_id">>, {nullable, long}, undefined),
    JiraKey = igor_json:parse(Json, <<"jira_key">>, {nullable, string}, undefined),
    SlackReceivers = igor_json:parse(Json, <<"slack_receivers">>, {nullable, string}, undefined),
    #update_project_request{
        title = Title,
        key = VarKey,
        jira_id = JiraId,
        jira_key = JiraKey,
        slack_receivers = SlackReceivers
    }.

