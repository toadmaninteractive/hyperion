%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(protocol_test_case).

-include_lib("stdlib/include/assert.hrl").
-include("protocol_test_case.hrl").

-export([
    test_case_error_to_string/1,
    test_case_error_from_string/1,
    test_case_error_to_json/1,
    test_case_error_from_json/1,
    test_case_specialize_error_to_string/1,
    test_case_specialize_error_from_string/1,
    test_case_specialize_error_to_json/1,
    test_case_specialize_error_from_json/1,
    create_test_case_request_to_json/1,
    create_test_case_request_from_json/1,
    update_test_case_request_to_json/1,
    update_test_case_request_from_json/1,
    specialize_test_case_request_to_json/1,
    specialize_test_case_request_from_json/1
]).

-export_type([
    create_test_case_request/0,
    update_test_case_request/0,
    test_case_error/0,
    specialize_test_case_request/0,
    test_case_specialize_error/0
]).

-type create_test_case_request() :: #create_test_case_request{}.
-type update_test_case_request() :: #update_test_case_request{}.
-type test_case_error() :: 'parent_not_exists' | 'project_not_exists' | 'precondition_not_exists' | 'setup_not_exists' | 'title_already_exists' | 'has_children'.
-type specialize_test_case_request() :: #specialize_test_case_request{}.
-type test_case_specialize_error() :: 'test_case_not_exists' | 'setup_step_not_assigned' | 'setup_step_not_exists' | 'invalid_setup_step' | 'parameterless_setup_step' | 'invalid_parameter_value' | 'invalid_parameter_source'.

-spec test_case_error_to_string(test_case_error()) -> binary().

test_case_error_to_string(parent_not_exists) -> <<"parent_not_exists">>;
test_case_error_to_string(project_not_exists) -> <<"project_not_exists">>;
test_case_error_to_string(precondition_not_exists) -> <<"precondition_not_exists">>;
test_case_error_to_string(setup_not_exists) -> <<"setup_not_exists">>;
test_case_error_to_string(title_already_exists) -> <<"title_already_exists">>;
test_case_error_to_string(has_children) -> <<"has_children">>.

-spec test_case_error_from_string(binary()) -> test_case_error().

test_case_error_from_string(<<"parent_not_exists">>) -> parent_not_exists;
test_case_error_from_string(<<"project_not_exists">>) -> project_not_exists;
test_case_error_from_string(<<"precondition_not_exists">>) -> precondition_not_exists;
test_case_error_from_string(<<"setup_not_exists">>) -> setup_not_exists;
test_case_error_from_string(<<"title_already_exists">>) -> title_already_exists;
test_case_error_from_string(<<"has_children">>) -> has_children.

-spec test_case_error_to_json(test_case_error()) -> igor_json:json_string().

test_case_error_to_json(parent_not_exists) -> <<"parent_not_exists">>;
test_case_error_to_json(project_not_exists) -> <<"project_not_exists">>;
test_case_error_to_json(precondition_not_exists) -> <<"precondition_not_exists">>;
test_case_error_to_json(setup_not_exists) -> <<"setup_not_exists">>;
test_case_error_to_json(title_already_exists) -> <<"title_already_exists">>;
test_case_error_to_json(has_children) -> <<"has_children">>.

-spec test_case_error_from_json(igor_json:json()) -> test_case_error().

test_case_error_from_json(<<"parent_not_exists">>) -> parent_not_exists;
test_case_error_from_json(<<"project_not_exists">>) -> project_not_exists;
test_case_error_from_json(<<"precondition_not_exists">>) -> precondition_not_exists;
test_case_error_from_json(<<"setup_not_exists">>) -> setup_not_exists;
test_case_error_from_json(<<"title_already_exists">>) -> title_already_exists;
test_case_error_from_json(<<"has_children">>) -> has_children.

-spec test_case_specialize_error_to_string(test_case_specialize_error()) -> binary().

test_case_specialize_error_to_string(test_case_not_exists) -> <<"test_case_not_exists">>;
test_case_specialize_error_to_string(setup_step_not_assigned) -> <<"setup_step_not_assigned">>;
test_case_specialize_error_to_string(setup_step_not_exists) -> <<"setup_step_not_exists">>;
test_case_specialize_error_to_string(invalid_setup_step) -> <<"invalid_setup_step">>;
test_case_specialize_error_to_string(parameterless_setup_step) -> <<"parameterless_setup_step">>;
test_case_specialize_error_to_string(invalid_parameter_value) -> <<"invalid_parameter_value">>;
test_case_specialize_error_to_string(invalid_parameter_source) -> <<"invalid_parameter_source">>.

-spec test_case_specialize_error_from_string(binary()) -> test_case_specialize_error().

test_case_specialize_error_from_string(<<"test_case_not_exists">>) -> test_case_not_exists;
test_case_specialize_error_from_string(<<"setup_step_not_assigned">>) -> setup_step_not_assigned;
test_case_specialize_error_from_string(<<"setup_step_not_exists">>) -> setup_step_not_exists;
test_case_specialize_error_from_string(<<"invalid_setup_step">>) -> invalid_setup_step;
test_case_specialize_error_from_string(<<"parameterless_setup_step">>) -> parameterless_setup_step;
test_case_specialize_error_from_string(<<"invalid_parameter_value">>) -> invalid_parameter_value;
test_case_specialize_error_from_string(<<"invalid_parameter_source">>) -> invalid_parameter_source.

-spec test_case_specialize_error_to_json(test_case_specialize_error()) -> igor_json:json_string().

test_case_specialize_error_to_json(test_case_not_exists) -> <<"test_case_not_exists">>;
test_case_specialize_error_to_json(setup_step_not_assigned) -> <<"setup_step_not_assigned">>;
test_case_specialize_error_to_json(setup_step_not_exists) -> <<"setup_step_not_exists">>;
test_case_specialize_error_to_json(invalid_setup_step) -> <<"invalid_setup_step">>;
test_case_specialize_error_to_json(parameterless_setup_step) -> <<"parameterless_setup_step">>;
test_case_specialize_error_to_json(invalid_parameter_value) -> <<"invalid_parameter_value">>;
test_case_specialize_error_to_json(invalid_parameter_source) -> <<"invalid_parameter_source">>.

-spec test_case_specialize_error_from_json(igor_json:json()) -> test_case_specialize_error().

test_case_specialize_error_from_json(<<"test_case_not_exists">>) -> test_case_not_exists;
test_case_specialize_error_from_json(<<"setup_step_not_assigned">>) -> setup_step_not_assigned;
test_case_specialize_error_from_json(<<"setup_step_not_exists">>) -> setup_step_not_exists;
test_case_specialize_error_from_json(<<"invalid_setup_step">>) -> invalid_setup_step;
test_case_specialize_error_from_json(<<"parameterless_setup_step">>) -> parameterless_setup_step;
test_case_specialize_error_from_json(<<"invalid_parameter_value">>) -> invalid_parameter_value;
test_case_specialize_error_from_json(<<"invalid_parameter_source">>) -> invalid_parameter_source.

-spec create_test_case_request_to_json(create_test_case_request()) -> igor_json:json_object().

create_test_case_request_to_json(Record) ->
    #create_test_case_request{
        parent_id = ParentId,
        precondition_id = PreconditionId,
        setup_id = SetupId,
        is_group = IsGroup,
        title = Title,
        description = Description,
        test_steps = TestSteps,
        expected_result = ExpectedResult,
        is_draft = IsDraft,
        order_num = OrderNum
    } = Record,
    ?assert(IsGroup =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(TestSteps =/= undefined),
    ?assert(ExpectedResult =/= undefined),
    ?assert(IsDraft =/= undefined),
    ?assert(OrderNum =/= undefined),
    #{
        <<"parent_id">> => igor_json:pack(ParentId, long),
        <<"precondition_id">> => igor_json:pack(PreconditionId, long),
        <<"setup_id">> => igor_json:pack(SetupId, long),
        <<"is_group">> => igor_json:pack(IsGroup, boolean),
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"test_steps">> => igor_json:pack(TestSteps, string),
        <<"expected_result">> => igor_json:pack(ExpectedResult, string),
        <<"is_draft">> => igor_json:pack(IsDraft, boolean),
        <<"order_num">> => igor_json:pack(OrderNum, int)
    }.

-spec create_test_case_request_from_json(igor_json:json_object()) -> create_test_case_request().

create_test_case_request_from_json(Json) ->
    ParentId = igor_json:parse(Json, <<"parent_id">>, long, undefined),
    PreconditionId = igor_json:parse(Json, <<"precondition_id">>, long, undefined),
    SetupId = igor_json:parse(Json, <<"setup_id">>, long, undefined),
    IsGroup = igor_json:parse(Json, <<"is_group">>, boolean),
    Title = igor_json:parse(Json, <<"title">>, string),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    TestSteps = igor_json:parse(Json, <<"test_steps">>, string),
    ExpectedResult = igor_json:parse(Json, <<"expected_result">>, string),
    IsDraft = igor_json:parse(Json, <<"is_draft">>, boolean),
    OrderNum = igor_json:parse(Json, <<"order_num">>, int),
    #create_test_case_request{
        parent_id = ParentId,
        precondition_id = PreconditionId,
        setup_id = SetupId,
        is_group = IsGroup,
        title = Title,
        description = Description,
        test_steps = TestSteps,
        expected_result = ExpectedResult,
        is_draft = IsDraft,
        order_num = OrderNum
    }.

-spec update_test_case_request_to_json(update_test_case_request()) -> igor_json:json_object().

update_test_case_request_to_json(Record) ->
    #update_test_case_request{
        parent_id = ParentId,
        precondition_id = PreconditionId,
        setup_id = SetupId,
        title = Title,
        description = Description,
        test_steps = TestSteps,
        expected_result = ExpectedResult,
        is_draft = IsDraft,
        order_num = OrderNum
    } = Record,
    Json1 = igor_json:maybe_pack_field(#{}, <<"parent_id">>, ParentId, {nullable, long}),
    Json2 = igor_json:maybe_pack_field(Json1, <<"precondition_id">>, PreconditionId, {nullable, long}),
    Json3 = igor_json:maybe_pack_field(Json2, <<"setup_id">>, SetupId, {nullable, long}),
    Json4 = igor_json:maybe_pack_field(Json3, <<"title">>, Title, string),
    Json5 = igor_json:maybe_pack_field(Json4, <<"description">>, Description, string),
    Json6 = igor_json:maybe_pack_field(Json5, <<"test_steps">>, TestSteps, string),
    Json7 = igor_json:maybe_pack_field(Json6, <<"expected_result">>, ExpectedResult, string),
    Json8 = igor_json:maybe_pack_field(Json7, <<"is_draft">>, IsDraft, boolean),
    Json9 = igor_json:maybe_pack_field(Json8, <<"order_num">>, OrderNum, int),
    Json9.

-spec update_test_case_request_from_json(igor_json:json_object()) -> update_test_case_request().

update_test_case_request_from_json(Json) ->
    ParentId = igor_json:parse(Json, <<"parent_id">>, {nullable, long}, undefined),
    PreconditionId = igor_json:parse(Json, <<"precondition_id">>, {nullable, long}, undefined),
    SetupId = igor_json:parse(Json, <<"setup_id">>, {nullable, long}, undefined),
    Title = igor_json:parse(Json, <<"title">>, string, undefined),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    TestSteps = igor_json:parse(Json, <<"test_steps">>, string, undefined),
    ExpectedResult = igor_json:parse(Json, <<"expected_result">>, string, undefined),
    IsDraft = igor_json:parse(Json, <<"is_draft">>, boolean, undefined),
    OrderNum = igor_json:parse(Json, <<"order_num">>, int, undefined),
    #update_test_case_request{
        parent_id = ParentId,
        precondition_id = PreconditionId,
        setup_id = SetupId,
        title = Title,
        description = Description,
        test_steps = TestSteps,
        expected_result = ExpectedResult,
        is_draft = IsDraft,
        order_num = OrderNum
    }.

-spec specialize_test_case_request_to_json(specialize_test_case_request()) -> igor_json:json_object().

specialize_test_case_request_to_json(Record) ->
    #specialize_test_case_request{spec_type = SpecType, value = VarValue, parameter_id = ParameterId} = Record,
    ?assert(SpecType =/= undefined),
    #{
        <<"spec_type">> => igor_json:pack(SpecType, {custom, fun protocol_db:spec_type_to_json/1}),
        <<"value">> => igor_json:pack(VarValue, string),
        <<"parameter_id">> => igor_json:pack(ParameterId, long)
    }.

-spec specialize_test_case_request_from_json(igor_json:json_object()) -> specialize_test_case_request().

specialize_test_case_request_from_json(Json) ->
    SpecType = igor_json:parse(Json, <<"spec_type">>, {custom, fun protocol_db:spec_type_from_json/1}),
    VarValue = igor_json:parse(Json, <<"value">>, string, undefined),
    ParameterId = igor_json:parse(Json, <<"parameter_id">>, long, undefined),
    #specialize_test_case_request{spec_type = SpecType, value = VarValue, parameter_id = ParameterId}.

