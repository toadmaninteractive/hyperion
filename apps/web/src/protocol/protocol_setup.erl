%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(protocol_setup).

-include_lib("stdlib/include/assert.hrl").
-include("protocol_setup.hrl").

-export([
    setup_error_to_string/1,
    setup_error_from_string/1,
    setup_error_to_json/1,
    setup_error_from_json/1,
    setup_link_error_to_string/1,
    setup_link_error_from_string/1,
    setup_link_error_to_json/1,
    setup_link_error_from_json/1,
    create_setup_step_request_to_json/1,
    create_setup_step_request_from_json/1,
    update_setup_step_request_to_json/1,
    update_setup_step_request_from_json/1
]).

-export_type([
    create_setup_step_request/0,
    update_setup_step_request/0,
    setup_error/0,
    setup_link_error/0
]).

-type create_setup_step_request() :: #create_setup_step_request{}.
-type update_setup_step_request() :: #update_setup_step_request{}.
-type setup_error() :: 'parent_not_exists' | 'project_not_exists' | 'title_already_exists' | 'has_children'.
-type setup_link_error() :: 'setup_step_not_exists' | 'parameter_not_exists' | 'project_mismatch'.

-spec setup_error_to_string(setup_error()) -> binary().

setup_error_to_string(parent_not_exists) -> <<"parent_not_exists">>;
setup_error_to_string(project_not_exists) -> <<"project_not_exists">>;
setup_error_to_string(title_already_exists) -> <<"title_already_exists">>;
setup_error_to_string(has_children) -> <<"has_children">>.

-spec setup_error_from_string(binary()) -> setup_error().

setup_error_from_string(<<"parent_not_exists">>) -> parent_not_exists;
setup_error_from_string(<<"project_not_exists">>) -> project_not_exists;
setup_error_from_string(<<"title_already_exists">>) -> title_already_exists;
setup_error_from_string(<<"has_children">>) -> has_children.

-spec setup_error_to_json(setup_error()) -> igor_json:json_string().

setup_error_to_json(parent_not_exists) -> <<"parent_not_exists">>;
setup_error_to_json(project_not_exists) -> <<"project_not_exists">>;
setup_error_to_json(title_already_exists) -> <<"title_already_exists">>;
setup_error_to_json(has_children) -> <<"has_children">>.

-spec setup_error_from_json(igor_json:json()) -> setup_error().

setup_error_from_json(<<"parent_not_exists">>) -> parent_not_exists;
setup_error_from_json(<<"project_not_exists">>) -> project_not_exists;
setup_error_from_json(<<"title_already_exists">>) -> title_already_exists;
setup_error_from_json(<<"has_children">>) -> has_children.

-spec setup_link_error_to_string(setup_link_error()) -> binary().

setup_link_error_to_string(setup_step_not_exists) -> <<"setup_step_not_exists">>;
setup_link_error_to_string(parameter_not_exists) -> <<"parameter_not_exists">>;
setup_link_error_to_string(project_mismatch) -> <<"project_mismatch">>.

-spec setup_link_error_from_string(binary()) -> setup_link_error().

setup_link_error_from_string(<<"setup_step_not_exists">>) -> setup_step_not_exists;
setup_link_error_from_string(<<"parameter_not_exists">>) -> parameter_not_exists;
setup_link_error_from_string(<<"project_mismatch">>) -> project_mismatch.

-spec setup_link_error_to_json(setup_link_error()) -> igor_json:json_string().

setup_link_error_to_json(setup_step_not_exists) -> <<"setup_step_not_exists">>;
setup_link_error_to_json(parameter_not_exists) -> <<"parameter_not_exists">>;
setup_link_error_to_json(project_mismatch) -> <<"project_mismatch">>.

-spec setup_link_error_from_json(igor_json:json()) -> setup_link_error().

setup_link_error_from_json(<<"setup_step_not_exists">>) -> setup_step_not_exists;
setup_link_error_from_json(<<"parameter_not_exists">>) -> parameter_not_exists;
setup_link_error_from_json(<<"project_mismatch">>) -> project_mismatch.

-spec create_setup_step_request_to_json(create_setup_step_request()) -> igor_json:json_object().

create_setup_step_request_to_json(Record) ->
    #create_setup_step_request{
        parent_id = ParentId,
        title = Title,
        description = Description,
        is_draft = IsDraft,
        order_num = OrderNum
    } = Record,
    ?assert(Title =/= undefined),
    ?assert(IsDraft =/= undefined),
    ?assert(OrderNum =/= undefined),
    #{
        <<"parent_id">> => igor_json:pack(ParentId, long),
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"is_draft">> => igor_json:pack(IsDraft, boolean),
        <<"order_num">> => igor_json:pack(OrderNum, int)
    }.

-spec create_setup_step_request_from_json(igor_json:json_object()) -> create_setup_step_request().

create_setup_step_request_from_json(Json) ->
    ParentId = igor_json:parse(Json, <<"parent_id">>, long, undefined),
    Title = igor_json:parse(Json, <<"title">>, string),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    IsDraft = igor_json:parse(Json, <<"is_draft">>, boolean),
    OrderNum = igor_json:parse(Json, <<"order_num">>, int),
    #create_setup_step_request{
        parent_id = ParentId,
        title = Title,
        description = Description,
        is_draft = IsDraft,
        order_num = OrderNum
    }.

-spec update_setup_step_request_to_json(update_setup_step_request()) -> igor_json:json_object().

update_setup_step_request_to_json(Record) ->
    #update_setup_step_request{
        parent_id = ParentId,
        title = Title,
        description = Description,
        is_draft = IsDraft,
        order_num = OrderNum
    } = Record,
    Json1 = igor_json:maybe_pack_field(#{}, <<"parent_id">>, ParentId, {nullable, long}),
    Json2 = igor_json:maybe_pack_field(Json1, <<"title">>, Title, string),
    Json3 = igor_json:maybe_pack_field(Json2, <<"description">>, Description, string),
    Json4 = igor_json:maybe_pack_field(Json3, <<"is_draft">>, IsDraft, boolean),
    Json5 = igor_json:maybe_pack_field(Json4, <<"order_num">>, OrderNum, int),
    Json5.

-spec update_setup_step_request_from_json(igor_json:json_object()) -> update_setup_step_request().

update_setup_step_request_from_json(Json) ->
    ParentId = igor_json:parse(Json, <<"parent_id">>, {nullable, long}, undefined),
    Title = igor_json:parse(Json, <<"title">>, string, undefined),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    IsDraft = igor_json:parse(Json, <<"is_draft">>, boolean, undefined),
    OrderNum = igor_json:parse(Json, <<"order_num">>, int, undefined),
    #update_setup_step_request{
        parent_id = ParentId,
        title = Title,
        description = Description,
        is_draft = IsDraft,
        order_num = OrderNum
    }.

