%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(protocol_data).

-include_lib("stdlib/include/assert.hrl").
-include("protocol_data.hrl").

-export([
    order_direction_to_string/1,
    order_direction_from_string/1,
    order_direction_to_json/1,
    order_direction_from_json/1,
    collection_to_json/2,
    collection_from_json/2,
    collection_slice_to_json/2,
    collection_slice_from_json/2,
    tree_node_to_json/2,
    tree_node_from_json/2,
    generic_response_to_json/1,
    generic_response_from_json/1,
    bad_request_error_to_json/2,
    bad_request_error_from_json/2,
    forbidden_error_to_json/1,
    forbidden_error_from_json/1,
    not_found_error_to_json/1,
    not_found_error_from_json/1,
    internal_server_error_to_json/1,
    internal_server_error_from_json/1
]).

-export_type([
    order_direction/0,
    collection/1,
    collection_slice/1,
    tree_node/1,
    generic_response/0,
    bad_request_error/1,
    forbidden_error/0,
    not_found_error/0,
    internal_server_error/0
]).

-type order_direction() :: 'asc' | 'desc'.
-type collection(_T) :: #collection{}.
-type collection_slice(_T) :: #collection_slice{}.
-type tree_node(_T) :: #tree_node{}.
-type generic_response() :: #generic_response{}.
-type bad_request_error(_T) :: #bad_request_error{}.
-type forbidden_error() :: #forbidden_error{}.
-type not_found_error() :: #not_found_error{}.
-type internal_server_error() :: #internal_server_error{}.

-spec order_direction_to_string(order_direction()) -> binary().

order_direction_to_string(asc) -> <<"asc">>;
order_direction_to_string(desc) -> <<"desc">>.

-spec order_direction_from_string(binary()) -> order_direction().

order_direction_from_string(<<"asc">>) -> asc;
order_direction_from_string(<<"desc">>) -> desc.

-spec order_direction_to_json(order_direction()) -> igor_json:json_string().

order_direction_to_json(asc) -> <<"asc">>;
order_direction_to_json(desc) -> <<"desc">>.

-spec order_direction_from_json(igor_json:json()) -> order_direction().

order_direction_from_json(<<"asc">>) -> asc;
order_direction_from_json(<<"desc">>) -> desc.

-spec collection_to_json(collection(T), igor_json:pack_type(T)) -> igor_json:json_object().

collection_to_json(Record, T) ->
    #collection{items = Items} = Record,
    ?assert(Items =/= undefined),
    #{
        <<"items">> => igor_json:pack(Items, {list, T})
    }.

-spec collection_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> collection(T).

collection_from_json(Json, T) ->
    Items = igor_json:parse(Json, <<"items">>, {list, T}),
    #collection{items = Items}.

-spec collection_slice_to_json(collection_slice(T), igor_json:pack_type(T)) -> igor_json:json_object().

collection_slice_to_json(Record, T) ->
    #collection_slice{total = Total, items = Items} = Record,
    ?assert(Total =/= undefined),
    ?assert(Items =/= undefined),
    #{
        <<"total">> => igor_json:pack(Total, int),
        <<"items">> => igor_json:pack(Items, {list, T})
    }.

-spec collection_slice_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> collection_slice(T).

collection_slice_from_json(Json, T) ->
    Total = igor_json:parse(Json, <<"total">>, int),
    Items = igor_json:parse(Json, <<"items">>, {list, T}),
    #collection_slice{total = Total, items = Items}.

-spec tree_node_to_json(tree_node(T), igor_json:pack_type(T)) -> igor_json:json_object().

tree_node_to_json(Record, T) ->
    #tree_node{item = Item, children = Children} = Record,
    ?assert(Children =/= undefined),
    #{
        <<"item">> => igor_json:pack(Item, T),
        <<"children">> => igor_json:pack(Children, {list, {custom, fun(V) -> protocol_data:tree_node_to_json(V, T) end}})
    }.

-spec tree_node_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> tree_node(T).

tree_node_from_json(Json, T) ->
    Item = igor_json:parse(Json, <<"item">>, T, undefined),
    Children = igor_json:parse(Json, <<"children">>, {list, {custom, fun(V) -> protocol_data:tree_node_from_json(V, T) end}}, []),
    #tree_node{item = Item, children = Children}.

-spec generic_response_to_json(generic_response()) -> igor_json:json_object().

generic_response_to_json(Record) ->
    #generic_response{result = VarResult} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean)
    }.

-spec generic_response_from_json(igor_json:json_object()) -> generic_response().

generic_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    #generic_response{result = VarResult}.

-spec bad_request_error_to_json(bad_request_error(T), igor_json:pack_type(T)) -> igor_json:json_object().

bad_request_error_to_json(Record, T) ->
    #bad_request_error{error = Error} = Record,
    ?assert(Error =/= undefined),
    #{
        <<"error">> => igor_json:pack(Error, T)
    }.

-spec bad_request_error_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> bad_request_error(T).

bad_request_error_from_json(Json, T) ->
    Error = igor_json:parse(Json, <<"error">>, T),
    #bad_request_error{error = Error}.

-spec forbidden_error_to_json(forbidden_error()) -> igor_json:json_object().

forbidden_error_to_json(#forbidden_error{}) -> #{}.

-spec forbidden_error_from_json(igor_json:json_object()) -> forbidden_error().

forbidden_error_from_json(_Json) -> #forbidden_error{}.

-spec not_found_error_to_json(not_found_error()) -> igor_json:json_object().

not_found_error_to_json(#not_found_error{}) -> #{}.

-spec not_found_error_from_json(igor_json:json_object()) -> not_found_error().

not_found_error_from_json(_Json) -> #not_found_error{}.

-spec internal_server_error_to_json(internal_server_error()) -> igor_json:json_object().

internal_server_error_to_json(Record) ->
    #internal_server_error{error = Error} = Record,
    ?assert(Error =/= undefined),
    #{
        <<"error">> => igor_json:pack(Error, string)
    }.

-spec internal_server_error_from_json(igor_json:json_object()) -> internal_server_error().

internal_server_error_from_json(Json) ->
    Error = igor_json:parse(Json, <<"error">>, string),
    #internal_server_error{error = Error}.

