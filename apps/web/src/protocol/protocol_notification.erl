%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(protocol_notification).

-include_lib("stdlib/include/assert.hrl").
-include("protocol_notification.hrl").

-export([
    notification_kind_to_string/1,
    notification_kind_from_string/1,
    notification_kind_to_json/1,
    notification_kind_from_json/1,
    notification_to_json/1,
    notification_from_json/1,
    hello_to_json/1,
    hello_from_json/1,
    project_created_to_json/1,
    project_created_from_json/1,
    project_updated_to_json/1,
    project_updated_from_json/1,
    project_deleted_to_json/1,
    project_deleted_from_json/1,
    parameter_created_to_json/1,
    parameter_created_from_json/1,
    parameter_updated_to_json/1,
    parameter_updated_from_json/1,
    parameter_deleted_to_json/1,
    parameter_deleted_from_json/1,
    setup_step_created_to_json/1,
    setup_step_created_from_json/1,
    setup_step_updated_to_json/1,
    setup_step_updated_from_json/1,
    setup_step_deleted_to_json/1,
    setup_step_deleted_from_json/1,
    test_case_created_to_json/1,
    test_case_created_from_json/1,
    test_case_updated_to_json/1,
    test_case_updated_from_json/1,
    test_case_deleted_to_json/1,
    test_case_deleted_from_json/1,
    test_run_created_to_json/1,
    test_run_created_from_json/1,
    test_run_updated_to_json/1,
    test_run_updated_from_json/1,
    test_run_started_to_json/1,
    test_run_started_from_json/1,
    test_run_closed_to_json/1,
    test_run_closed_from_json/1,
    test_run_reopened_to_json/1,
    test_run_reopened_from_json/1,
    test_run_deleted_to_json/1,
    test_run_deleted_from_json/1,
    test_created_to_json/1,
    test_created_from_json/1,
    test_updated_to_json/1,
    test_updated_from_json/1,
    test_started_to_json/1,
    test_started_from_json/1,
    test_passed_to_json/1,
    test_passed_from_json/1,
    test_failed_to_json/1,
    test_failed_from_json/1,
    test_blocked_to_json/1,
    test_blocked_from_json/1,
    test_reopened_to_json/1,
    test_reopened_from_json/1,
    test_deleted_to_json/1,
    test_deleted_from_json/1,
    attachment_linked_to_json/1,
    attachment_linked_from_json/1,
    attachment_unlinked_to_json/1,
    attachment_unlinked_from_json/1,
    jira_instance_created_to_json/1,
    jira_instance_created_from_json/1,
    jira_instance_updated_to_json/1,
    jira_instance_updated_from_json/1,
    jira_instance_deleted_to_json/1,
    jira_instance_deleted_from_json/1
]).

-export_type([
    notification_kind/0,
    notification/0,
    hello/0,
    project_created/0,
    project_updated/0,
    project_deleted/0,
    parameter_created/0,
    parameter_updated/0,
    parameter_deleted/0,
    setup_step_created/0,
    setup_step_updated/0,
    setup_step_deleted/0,
    test_case_created/0,
    test_case_updated/0,
    test_case_deleted/0,
    test_run_created/0,
    test_run_updated/0,
    test_run_started/0,
    test_run_closed/0,
    test_run_reopened/0,
    test_run_deleted/0,
    test_created/0,
    test_updated/0,
    test_started/0,
    test_passed/0,
    test_failed/0,
    test_blocked/0,
    test_reopened/0,
    test_deleted/0,
    attachment_linked/0,
    attachment_unlinked/0,
    jira_instance_created/0,
    jira_instance_updated/0,
    jira_instance_deleted/0
]).

-type notification_kind() :: 'hello' | 'project_created' | 'project_updated' | 'project_deleted' | 'parameter_created' | 'parameter_updated' | 'parameter_deleted' | 'setup_step_created' | 'setup_step_updated' | 'setup_step_deleted' | 'test_case_created' | 'test_case_updated' | 'test_case_deleted' | 'test_run_created' | 'test_run_updated' | 'test_run_started' | 'test_run_closed' | 'test_run_reopened' | 'test_run_deleted' | 'test_created' | 'test_updated' | 'test_started' | 'test_passed' | 'test_failed' | 'test_blocked' | 'test_reopened' | 'test_deleted' | 'attachment_linked' | 'attachment_unlinked' | 'jira_instance_created' | 'jira_instance_updated' | 'jira_instance_deleted'.
-type notification() :: protocol_notification:hello() | protocol_notification:project_created() | protocol_notification:project_updated() | protocol_notification:project_deleted() | protocol_notification:parameter_created() | protocol_notification:parameter_updated() | protocol_notification:parameter_deleted() | protocol_notification:setup_step_created() | protocol_notification:setup_step_updated() | protocol_notification:setup_step_deleted() | protocol_notification:test_case_created() | protocol_notification:test_case_updated() | protocol_notification:test_case_deleted() | protocol_notification:test_run_created() | protocol_notification:test_run_updated() | protocol_notification:test_run_started() | protocol_notification:test_run_closed() | protocol_notification:test_run_reopened() | protocol_notification:test_run_deleted() | protocol_notification:test_created() | protocol_notification:test_updated() | protocol_notification:test_started() | protocol_notification:test_passed() | protocol_notification:test_failed() | protocol_notification:test_blocked() | protocol_notification:test_reopened() | protocol_notification:test_deleted() | protocol_notification:attachment_linked() | protocol_notification:attachment_unlinked() | protocol_notification:jira_instance_created() | protocol_notification:jira_instance_updated() | protocol_notification:jira_instance_deleted().
-type hello() :: #hello{}.
-type project_created() :: #project_created{}.
-type project_updated() :: #project_updated{}.
-type project_deleted() :: #project_deleted{}.
-type parameter_created() :: #parameter_created{}.
-type parameter_updated() :: #parameter_updated{}.
-type parameter_deleted() :: #parameter_deleted{}.
-type setup_step_created() :: #setup_step_created{}.
-type setup_step_updated() :: #setup_step_updated{}.
-type setup_step_deleted() :: #setup_step_deleted{}.
-type test_case_created() :: #test_case_created{}.
-type test_case_updated() :: #test_case_updated{}.
-type test_case_deleted() :: #test_case_deleted{}.
-type test_run_created() :: #test_run_created{}.
-type test_run_updated() :: #test_run_updated{}.
-type test_run_started() :: #test_run_started{}.
-type test_run_closed() :: #test_run_closed{}.
-type test_run_reopened() :: #test_run_reopened{}.
-type test_run_deleted() :: #test_run_deleted{}.
-type test_created() :: #test_created{}.
-type test_updated() :: #test_updated{}.
-type test_started() :: #test_started{}.
-type test_passed() :: #test_passed{}.
-type test_failed() :: #test_failed{}.
-type test_blocked() :: #test_blocked{}.
-type test_reopened() :: #test_reopened{}.
-type test_deleted() :: #test_deleted{}.
-type attachment_linked() :: #attachment_linked{}.
-type attachment_unlinked() :: #attachment_unlinked{}.
-type jira_instance_created() :: #jira_instance_created{}.
-type jira_instance_updated() :: #jira_instance_updated{}.
-type jira_instance_deleted() :: #jira_instance_deleted{}.

-spec notification_kind_to_string(notification_kind()) -> binary().

notification_kind_to_string(hello) -> <<"hello">>;
notification_kind_to_string(project_created) -> <<"project_created">>;
notification_kind_to_string(project_updated) -> <<"project_updated">>;
notification_kind_to_string(project_deleted) -> <<"project_deleted">>;
notification_kind_to_string(parameter_created) -> <<"parameter_created">>;
notification_kind_to_string(parameter_updated) -> <<"parameter_updated">>;
notification_kind_to_string(parameter_deleted) -> <<"parameter_deleted">>;
notification_kind_to_string(setup_step_created) -> <<"setup_step_created">>;
notification_kind_to_string(setup_step_updated) -> <<"setup_step_updated">>;
notification_kind_to_string(setup_step_deleted) -> <<"setup_step_deleted">>;
notification_kind_to_string(test_case_created) -> <<"test_case_created">>;
notification_kind_to_string(test_case_updated) -> <<"test_case_updated">>;
notification_kind_to_string(test_case_deleted) -> <<"test_case_deleted">>;
notification_kind_to_string(test_run_created) -> <<"test_run_created">>;
notification_kind_to_string(test_run_updated) -> <<"test_run_updated">>;
notification_kind_to_string(test_run_started) -> <<"test_run_started">>;
notification_kind_to_string(test_run_closed) -> <<"test_run_closed">>;
notification_kind_to_string(test_run_reopened) -> <<"test_run_reopened">>;
notification_kind_to_string(test_run_deleted) -> <<"test_run_deleted">>;
notification_kind_to_string(test_created) -> <<"test_created">>;
notification_kind_to_string(test_updated) -> <<"test_updated">>;
notification_kind_to_string(test_started) -> <<"test_started">>;
notification_kind_to_string(test_passed) -> <<"test_passed">>;
notification_kind_to_string(test_failed) -> <<"test_failed">>;
notification_kind_to_string(test_blocked) -> <<"test_blocked">>;
notification_kind_to_string(test_reopened) -> <<"test_reopened">>;
notification_kind_to_string(test_deleted) -> <<"test_deleted">>;
notification_kind_to_string(attachment_linked) -> <<"attachment_linked">>;
notification_kind_to_string(attachment_unlinked) -> <<"attachment_unlinked">>;
notification_kind_to_string(jira_instance_created) -> <<"jira_instance_created">>;
notification_kind_to_string(jira_instance_updated) -> <<"jira_instance_updated">>;
notification_kind_to_string(jira_instance_deleted) -> <<"jira_instance_deleted">>.

-spec notification_kind_from_string(binary()) -> notification_kind().

notification_kind_from_string(<<"hello">>) -> hello;
notification_kind_from_string(<<"project_created">>) -> project_created;
notification_kind_from_string(<<"project_updated">>) -> project_updated;
notification_kind_from_string(<<"project_deleted">>) -> project_deleted;
notification_kind_from_string(<<"parameter_created">>) -> parameter_created;
notification_kind_from_string(<<"parameter_updated">>) -> parameter_updated;
notification_kind_from_string(<<"parameter_deleted">>) -> parameter_deleted;
notification_kind_from_string(<<"setup_step_created">>) -> setup_step_created;
notification_kind_from_string(<<"setup_step_updated">>) -> setup_step_updated;
notification_kind_from_string(<<"setup_step_deleted">>) -> setup_step_deleted;
notification_kind_from_string(<<"test_case_created">>) -> test_case_created;
notification_kind_from_string(<<"test_case_updated">>) -> test_case_updated;
notification_kind_from_string(<<"test_case_deleted">>) -> test_case_deleted;
notification_kind_from_string(<<"test_run_created">>) -> test_run_created;
notification_kind_from_string(<<"test_run_updated">>) -> test_run_updated;
notification_kind_from_string(<<"test_run_started">>) -> test_run_started;
notification_kind_from_string(<<"test_run_closed">>) -> test_run_closed;
notification_kind_from_string(<<"test_run_reopened">>) -> test_run_reopened;
notification_kind_from_string(<<"test_run_deleted">>) -> test_run_deleted;
notification_kind_from_string(<<"test_created">>) -> test_created;
notification_kind_from_string(<<"test_updated">>) -> test_updated;
notification_kind_from_string(<<"test_started">>) -> test_started;
notification_kind_from_string(<<"test_passed">>) -> test_passed;
notification_kind_from_string(<<"test_failed">>) -> test_failed;
notification_kind_from_string(<<"test_blocked">>) -> test_blocked;
notification_kind_from_string(<<"test_reopened">>) -> test_reopened;
notification_kind_from_string(<<"test_deleted">>) -> test_deleted;
notification_kind_from_string(<<"attachment_linked">>) -> attachment_linked;
notification_kind_from_string(<<"attachment_unlinked">>) -> attachment_unlinked;
notification_kind_from_string(<<"jira_instance_created">>) -> jira_instance_created;
notification_kind_from_string(<<"jira_instance_updated">>) -> jira_instance_updated;
notification_kind_from_string(<<"jira_instance_deleted">>) -> jira_instance_deleted.

-spec notification_kind_to_json(notification_kind()) -> igor_json:json_string().

notification_kind_to_json(hello) -> <<"hello">>;
notification_kind_to_json(project_created) -> <<"project_created">>;
notification_kind_to_json(project_updated) -> <<"project_updated">>;
notification_kind_to_json(project_deleted) -> <<"project_deleted">>;
notification_kind_to_json(parameter_created) -> <<"parameter_created">>;
notification_kind_to_json(parameter_updated) -> <<"parameter_updated">>;
notification_kind_to_json(parameter_deleted) -> <<"parameter_deleted">>;
notification_kind_to_json(setup_step_created) -> <<"setup_step_created">>;
notification_kind_to_json(setup_step_updated) -> <<"setup_step_updated">>;
notification_kind_to_json(setup_step_deleted) -> <<"setup_step_deleted">>;
notification_kind_to_json(test_case_created) -> <<"test_case_created">>;
notification_kind_to_json(test_case_updated) -> <<"test_case_updated">>;
notification_kind_to_json(test_case_deleted) -> <<"test_case_deleted">>;
notification_kind_to_json(test_run_created) -> <<"test_run_created">>;
notification_kind_to_json(test_run_updated) -> <<"test_run_updated">>;
notification_kind_to_json(test_run_started) -> <<"test_run_started">>;
notification_kind_to_json(test_run_closed) -> <<"test_run_closed">>;
notification_kind_to_json(test_run_reopened) -> <<"test_run_reopened">>;
notification_kind_to_json(test_run_deleted) -> <<"test_run_deleted">>;
notification_kind_to_json(test_created) -> <<"test_created">>;
notification_kind_to_json(test_updated) -> <<"test_updated">>;
notification_kind_to_json(test_started) -> <<"test_started">>;
notification_kind_to_json(test_passed) -> <<"test_passed">>;
notification_kind_to_json(test_failed) -> <<"test_failed">>;
notification_kind_to_json(test_blocked) -> <<"test_blocked">>;
notification_kind_to_json(test_reopened) -> <<"test_reopened">>;
notification_kind_to_json(test_deleted) -> <<"test_deleted">>;
notification_kind_to_json(attachment_linked) -> <<"attachment_linked">>;
notification_kind_to_json(attachment_unlinked) -> <<"attachment_unlinked">>;
notification_kind_to_json(jira_instance_created) -> <<"jira_instance_created">>;
notification_kind_to_json(jira_instance_updated) -> <<"jira_instance_updated">>;
notification_kind_to_json(jira_instance_deleted) -> <<"jira_instance_deleted">>.

-spec notification_kind_from_json(igor_json:json()) -> notification_kind().

notification_kind_from_json(<<"hello">>) -> hello;
notification_kind_from_json(<<"project_created">>) -> project_created;
notification_kind_from_json(<<"project_updated">>) -> project_updated;
notification_kind_from_json(<<"project_deleted">>) -> project_deleted;
notification_kind_from_json(<<"parameter_created">>) -> parameter_created;
notification_kind_from_json(<<"parameter_updated">>) -> parameter_updated;
notification_kind_from_json(<<"parameter_deleted">>) -> parameter_deleted;
notification_kind_from_json(<<"setup_step_created">>) -> setup_step_created;
notification_kind_from_json(<<"setup_step_updated">>) -> setup_step_updated;
notification_kind_from_json(<<"setup_step_deleted">>) -> setup_step_deleted;
notification_kind_from_json(<<"test_case_created">>) -> test_case_created;
notification_kind_from_json(<<"test_case_updated">>) -> test_case_updated;
notification_kind_from_json(<<"test_case_deleted">>) -> test_case_deleted;
notification_kind_from_json(<<"test_run_created">>) -> test_run_created;
notification_kind_from_json(<<"test_run_updated">>) -> test_run_updated;
notification_kind_from_json(<<"test_run_started">>) -> test_run_started;
notification_kind_from_json(<<"test_run_closed">>) -> test_run_closed;
notification_kind_from_json(<<"test_run_reopened">>) -> test_run_reopened;
notification_kind_from_json(<<"test_run_deleted">>) -> test_run_deleted;
notification_kind_from_json(<<"test_created">>) -> test_created;
notification_kind_from_json(<<"test_updated">>) -> test_updated;
notification_kind_from_json(<<"test_started">>) -> test_started;
notification_kind_from_json(<<"test_passed">>) -> test_passed;
notification_kind_from_json(<<"test_failed">>) -> test_failed;
notification_kind_from_json(<<"test_blocked">>) -> test_blocked;
notification_kind_from_json(<<"test_reopened">>) -> test_reopened;
notification_kind_from_json(<<"test_deleted">>) -> test_deleted;
notification_kind_from_json(<<"attachment_linked">>) -> attachment_linked;
notification_kind_from_json(<<"attachment_unlinked">>) -> attachment_unlinked;
notification_kind_from_json(<<"jira_instance_created">>) -> jira_instance_created;
notification_kind_from_json(<<"jira_instance_updated">>) -> jira_instance_updated;
notification_kind_from_json(<<"jira_instance_deleted">>) -> jira_instance_deleted.

-spec notification_to_json(notification()) -> igor_json:json_object().

notification_to_json(Record) when is_record(Record, hello) ->
    hello_to_json(Record);
notification_to_json(Record) when is_record(Record, project_created) ->
    project_created_to_json(Record);
notification_to_json(Record) when is_record(Record, project_updated) ->
    project_updated_to_json(Record);
notification_to_json(Record) when is_record(Record, project_deleted) ->
    project_deleted_to_json(Record);
notification_to_json(Record) when is_record(Record, parameter_created) ->
    parameter_created_to_json(Record);
notification_to_json(Record) when is_record(Record, parameter_updated) ->
    parameter_updated_to_json(Record);
notification_to_json(Record) when is_record(Record, parameter_deleted) ->
    parameter_deleted_to_json(Record);
notification_to_json(Record) when is_record(Record, setup_step_created) ->
    setup_step_created_to_json(Record);
notification_to_json(Record) when is_record(Record, setup_step_updated) ->
    setup_step_updated_to_json(Record);
notification_to_json(Record) when is_record(Record, setup_step_deleted) ->
    setup_step_deleted_to_json(Record);
notification_to_json(Record) when is_record(Record, test_case_created) ->
    test_case_created_to_json(Record);
notification_to_json(Record) when is_record(Record, test_case_updated) ->
    test_case_updated_to_json(Record);
notification_to_json(Record) when is_record(Record, test_case_deleted) ->
    test_case_deleted_to_json(Record);
notification_to_json(Record) when is_record(Record, test_run_created) ->
    test_run_created_to_json(Record);
notification_to_json(Record) when is_record(Record, test_run_updated) ->
    test_run_updated_to_json(Record);
notification_to_json(Record) when is_record(Record, test_run_started) ->
    test_run_started_to_json(Record);
notification_to_json(Record) when is_record(Record, test_run_closed) ->
    test_run_closed_to_json(Record);
notification_to_json(Record) when is_record(Record, test_run_reopened) ->
    test_run_reopened_to_json(Record);
notification_to_json(Record) when is_record(Record, test_run_deleted) ->
    test_run_deleted_to_json(Record);
notification_to_json(Record) when is_record(Record, test_created) ->
    test_created_to_json(Record);
notification_to_json(Record) when is_record(Record, test_updated) ->
    test_updated_to_json(Record);
notification_to_json(Record) when is_record(Record, test_started) ->
    test_started_to_json(Record);
notification_to_json(Record) when is_record(Record, test_passed) ->
    test_passed_to_json(Record);
notification_to_json(Record) when is_record(Record, test_failed) ->
    test_failed_to_json(Record);
notification_to_json(Record) when is_record(Record, test_blocked) ->
    test_blocked_to_json(Record);
notification_to_json(Record) when is_record(Record, test_reopened) ->
    test_reopened_to_json(Record);
notification_to_json(Record) when is_record(Record, test_deleted) ->
    test_deleted_to_json(Record);
notification_to_json(Record) when is_record(Record, attachment_linked) ->
    attachment_linked_to_json(Record);
notification_to_json(Record) when is_record(Record, attachment_unlinked) ->
    attachment_unlinked_to_json(Record);
notification_to_json(Record) when is_record(Record, jira_instance_created) ->
    jira_instance_created_to_json(Record);
notification_to_json(Record) when is_record(Record, jira_instance_updated) ->
    jira_instance_updated_to_json(Record);
notification_to_json(Record) when is_record(Record, jira_instance_deleted) ->
    jira_instance_deleted_to_json(Record).

-spec notification_from_json(igor_json:json_object()) -> notification().

notification_from_json(Json) ->
    Tag = igor_json:parse(Json, <<"kind">>, {custom, fun protocol_notification:notification_kind_from_json/1}),
    case Tag of
        hello ->
            hello_from_json(Json);
        project_created ->
            project_created_from_json(Json);
        project_updated ->
            project_updated_from_json(Json);
        project_deleted ->
            project_deleted_from_json(Json);
        parameter_created ->
            parameter_created_from_json(Json);
        parameter_updated ->
            parameter_updated_from_json(Json);
        parameter_deleted ->
            parameter_deleted_from_json(Json);
        setup_step_created ->
            setup_step_created_from_json(Json);
        setup_step_updated ->
            setup_step_updated_from_json(Json);
        setup_step_deleted ->
            setup_step_deleted_from_json(Json);
        test_case_created ->
            test_case_created_from_json(Json);
        test_case_updated ->
            test_case_updated_from_json(Json);
        test_case_deleted ->
            test_case_deleted_from_json(Json);
        test_run_created ->
            test_run_created_from_json(Json);
        test_run_updated ->
            test_run_updated_from_json(Json);
        test_run_started ->
            test_run_started_from_json(Json);
        test_run_closed ->
            test_run_closed_from_json(Json);
        test_run_reopened ->
            test_run_reopened_from_json(Json);
        test_run_deleted ->
            test_run_deleted_from_json(Json);
        test_created ->
            test_created_from_json(Json);
        test_updated ->
            test_updated_from_json(Json);
        test_started ->
            test_started_from_json(Json);
        test_passed ->
            test_passed_from_json(Json);
        test_failed ->
            test_failed_from_json(Json);
        test_blocked ->
            test_blocked_from_json(Json);
        test_reopened ->
            test_reopened_from_json(Json);
        test_deleted ->
            test_deleted_from_json(Json);
        attachment_linked ->
            attachment_linked_from_json(Json);
        attachment_unlinked ->
            attachment_unlinked_from_json(Json);
        jira_instance_created ->
            jira_instance_created_from_json(Json);
        jira_instance_updated ->
            jira_instance_updated_from_json(Json);
        jira_instance_deleted ->
            jira_instance_deleted_from_json(Json)
    end.

-spec hello_to_json(hello()) -> igor_json:json_object().

hello_to_json(#hello{}) ->
    #{<<"kind">> => igor_json:pack(hello, {custom, fun protocol_notification:notification_kind_to_json/1})}.

-spec hello_from_json(igor_json:json_object()) -> hello().

hello_from_json(_Json) -> #hello{}.

-spec project_created_to_json(project_created()) -> igor_json:json_object().

project_created_to_json(Record) ->
    #project_created{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(project_created, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:project_to_json/1})
    }.

-spec project_created_from_json(igor_json:json_object()) -> project_created().

project_created_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:project_from_json/1}),
    #project_created{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec project_updated_to_json(project_updated()) -> igor_json:json_object().

project_updated_to_json(Record) ->
    #project_updated{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(project_updated, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:project_to_json/1})
    }.

-spec project_updated_from_json(igor_json:json_object()) -> project_updated().

project_updated_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:project_from_json/1}),
    #project_updated{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec project_deleted_to_json(project_deleted()) -> igor_json:json_object().

project_deleted_to_json(Record) ->
    #project_deleted{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(project_deleted, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:project_to_json/1})
    }.

-spec project_deleted_from_json(igor_json:json_object()) -> project_deleted().

project_deleted_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:project_from_json/1}),
    #project_deleted{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec parameter_created_to_json(parameter_created()) -> igor_json:json_object().

parameter_created_to_json(Record) ->
    #parameter_created{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(parameter_created, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:parameter_to_json/1})
    }.

-spec parameter_created_from_json(igor_json:json_object()) -> parameter_created().

parameter_created_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:parameter_from_json/1}),
    #parameter_created{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec parameter_updated_to_json(parameter_updated()) -> igor_json:json_object().

parameter_updated_to_json(Record) ->
    #parameter_updated{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(parameter_updated, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:parameter_to_json/1})
    }.

-spec parameter_updated_from_json(igor_json:json_object()) -> parameter_updated().

parameter_updated_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:parameter_from_json/1}),
    #parameter_updated{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec parameter_deleted_to_json(parameter_deleted()) -> igor_json:json_object().

parameter_deleted_to_json(Record) ->
    #parameter_deleted{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(parameter_deleted, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:parameter_to_json/1})
    }.

-spec parameter_deleted_from_json(igor_json:json_object()) -> parameter_deleted().

parameter_deleted_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:parameter_from_json/1}),
    #parameter_deleted{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec setup_step_created_to_json(setup_step_created()) -> igor_json:json_object().

setup_step_created_to_json(Record) ->
    #setup_step_created{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(setup_step_created, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:setup_step_to_json/1})
    }.

-spec setup_step_created_from_json(igor_json:json_object()) -> setup_step_created().

setup_step_created_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:setup_step_from_json/1}),
    #setup_step_created{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec setup_step_updated_to_json(setup_step_updated()) -> igor_json:json_object().

setup_step_updated_to_json(Record) ->
    #setup_step_updated{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(setup_step_updated, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:setup_step_to_json/1})
    }.

-spec setup_step_updated_from_json(igor_json:json_object()) -> setup_step_updated().

setup_step_updated_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:setup_step_from_json/1}),
    #setup_step_updated{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec setup_step_deleted_to_json(setup_step_deleted()) -> igor_json:json_object().

setup_step_deleted_to_json(Record) ->
    #setup_step_deleted{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(setup_step_deleted, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:setup_step_to_json/1})
    }.

-spec setup_step_deleted_from_json(igor_json:json_object()) -> setup_step_deleted().

setup_step_deleted_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:setup_step_from_json/1}),
    #setup_step_deleted{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_case_created_to_json(test_case_created()) -> igor_json:json_object().

test_case_created_to_json(Record) ->
    #test_case_created{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_case_created, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_case_to_json/1})
    }.

-spec test_case_created_from_json(igor_json:json_object()) -> test_case_created().

test_case_created_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_case_from_json/1}),
    #test_case_created{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_case_updated_to_json(test_case_updated()) -> igor_json:json_object().

test_case_updated_to_json(Record) ->
    #test_case_updated{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_case_updated, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_case_to_json/1})
    }.

-spec test_case_updated_from_json(igor_json:json_object()) -> test_case_updated().

test_case_updated_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_case_from_json/1}),
    #test_case_updated{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_case_deleted_to_json(test_case_deleted()) -> igor_json:json_object().

test_case_deleted_to_json(Record) ->
    #test_case_deleted{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_case_deleted, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_case_to_json/1})
    }.

-spec test_case_deleted_from_json(igor_json:json_object()) -> test_case_deleted().

test_case_deleted_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_case_from_json/1}),
    #test_case_deleted{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_run_created_to_json(test_run_created()) -> igor_json:json_object().

test_run_created_to_json(Record) ->
    #test_run_created{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_run_created, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_to_json/1})
    }.

-spec test_run_created_from_json(igor_json:json_object()) -> test_run_created().

test_run_created_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_from_json/1}),
    #test_run_created{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_run_updated_to_json(test_run_updated()) -> igor_json:json_object().

test_run_updated_to_json(Record) ->
    #test_run_updated{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_run_updated, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_to_json/1})
    }.

-spec test_run_updated_from_json(igor_json:json_object()) -> test_run_updated().

test_run_updated_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_from_json/1}),
    #test_run_updated{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_run_started_to_json(test_run_started()) -> igor_json:json_object().

test_run_started_to_json(Record) ->
    #test_run_started{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_run_started, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_to_json/1})
    }.

-spec test_run_started_from_json(igor_json:json_object()) -> test_run_started().

test_run_started_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_from_json/1}),
    #test_run_started{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_run_closed_to_json(test_run_closed()) -> igor_json:json_object().

test_run_closed_to_json(Record) ->
    #test_run_closed{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_run_closed, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_to_json/1})
    }.

-spec test_run_closed_from_json(igor_json:json_object()) -> test_run_closed().

test_run_closed_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_from_json/1}),
    #test_run_closed{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_run_reopened_to_json(test_run_reopened()) -> igor_json:json_object().

test_run_reopened_to_json(Record) ->
    #test_run_reopened{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_run_reopened, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_to_json/1})
    }.

-spec test_run_reopened_from_json(igor_json:json_object()) -> test_run_reopened().

test_run_reopened_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_from_json/1}),
    #test_run_reopened{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_run_deleted_to_json(test_run_deleted()) -> igor_json:json_object().

test_run_deleted_to_json(Record) ->
    #test_run_deleted{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_run_deleted, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_to_json/1})
    }.

-spec test_run_deleted_from_json(igor_json:json_object()) -> test_run_deleted().

test_run_deleted_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_from_json/1}),
    #test_run_deleted{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_created_to_json(test_created()) -> igor_json:json_object().

test_created_to_json(Record) ->
    #test_created{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_created, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_item_to_json/1})
    }.

-spec test_created_from_json(igor_json:json_object()) -> test_created().

test_created_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_item_from_json/1}),
    #test_created{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_updated_to_json(test_updated()) -> igor_json:json_object().

test_updated_to_json(Record) ->
    #test_updated{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_updated, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_item_to_json/1})
    }.

-spec test_updated_from_json(igor_json:json_object()) -> test_updated().

test_updated_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_item_from_json/1}),
    #test_updated{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_started_to_json(test_started()) -> igor_json:json_object().

test_started_to_json(Record) ->
    #test_started{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_started, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_item_to_json/1})
    }.

-spec test_started_from_json(igor_json:json_object()) -> test_started().

test_started_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_item_from_json/1}),
    #test_started{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_passed_to_json(test_passed()) -> igor_json:json_object().

test_passed_to_json(Record) ->
    #test_passed{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_passed, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_item_to_json/1})
    }.

-spec test_passed_from_json(igor_json:json_object()) -> test_passed().

test_passed_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_item_from_json/1}),
    #test_passed{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_failed_to_json(test_failed()) -> igor_json:json_object().

test_failed_to_json(Record) ->
    #test_failed{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_failed, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_item_to_json/1})
    }.

-spec test_failed_from_json(igor_json:json_object()) -> test_failed().

test_failed_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_item_from_json/1}),
    #test_failed{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_blocked_to_json(test_blocked()) -> igor_json:json_object().

test_blocked_to_json(Record) ->
    #test_blocked{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_blocked, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_item_to_json/1})
    }.

-spec test_blocked_from_json(igor_json:json_object()) -> test_blocked().

test_blocked_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_item_from_json/1}),
    #test_blocked{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_reopened_to_json(test_reopened()) -> igor_json:json_object().

test_reopened_to_json(Record) ->
    #test_reopened{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_reopened, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_item_to_json/1})
    }.

-spec test_reopened_from_json(igor_json:json_object()) -> test_reopened().

test_reopened_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_item_from_json/1}),
    #test_reopened{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec test_deleted_to_json(test_deleted()) -> igor_json:json_object().

test_deleted_to_json(Record) ->
    #test_deleted{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(test_deleted, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:test_run_item_to_json/1})
    }.

-spec test_deleted_from_json(igor_json:json_object()) -> test_deleted().

test_deleted_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:test_run_item_from_json/1}),
    #test_deleted{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec attachment_linked_to_json(attachment_linked()) -> igor_json:json_object().

attachment_linked_to_json(Record) ->
    #attachment_linked{
        actor_id = ActorId,
        actor_name = ActorName,
        attachment = Attachment,
        link = Link
    } = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Attachment =/= undefined),
    ?assert(Link =/= undefined),
    #{
        <<"kind">> => igor_json:pack(attachment_linked, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"attachment">> => igor_json:pack(Attachment, {custom, fun protocol_db:file_attachment_to_json/1}),
        <<"link">> => igor_json:pack(Link, {custom, fun protocol_db:file_attachment_link_to_json/1})
    }.

-spec attachment_linked_from_json(igor_json:json_object()) -> attachment_linked().

attachment_linked_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Attachment = igor_json:parse(Json, <<"attachment">>, {custom, fun protocol_db:file_attachment_from_json/1}),
    Link = igor_json:parse(Json, <<"link">>, {custom, fun protocol_db:file_attachment_link_from_json/1}),
    #attachment_linked{
        actor_id = ActorId,
        actor_name = ActorName,
        attachment = Attachment,
        link = Link
    }.

-spec attachment_unlinked_to_json(attachment_unlinked()) -> igor_json:json_object().

attachment_unlinked_to_json(Record) ->
    #attachment_unlinked{
        actor_id = ActorId,
        actor_name = ActorName,
        attachment = Attachment,
        link = Link
    } = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Attachment =/= undefined),
    ?assert(Link =/= undefined),
    #{
        <<"kind">> => igor_json:pack(attachment_unlinked, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"attachment">> => igor_json:pack(Attachment, {custom, fun protocol_db:file_attachment_to_json/1}),
        <<"link">> => igor_json:pack(Link, {custom, fun protocol_db:file_attachment_link_to_json/1})
    }.

-spec attachment_unlinked_from_json(igor_json:json_object()) -> attachment_unlinked().

attachment_unlinked_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Attachment = igor_json:parse(Json, <<"attachment">>, {custom, fun protocol_db:file_attachment_from_json/1}),
    Link = igor_json:parse(Json, <<"link">>, {custom, fun protocol_db:file_attachment_link_from_json/1}),
    #attachment_unlinked{
        actor_id = ActorId,
        actor_name = ActorName,
        attachment = Attachment,
        link = Link
    }.

-spec jira_instance_created_to_json(jira_instance_created()) -> igor_json:json_object().

jira_instance_created_to_json(Record) ->
    #jira_instance_created{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(jira_instance_created, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:jira_instance_to_json/1})
    }.

-spec jira_instance_created_from_json(igor_json:json_object()) -> jira_instance_created().

jira_instance_created_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:jira_instance_from_json/1}),
    #jira_instance_created{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec jira_instance_updated_to_json(jira_instance_updated()) -> igor_json:json_object().

jira_instance_updated_to_json(Record) ->
    #jira_instance_updated{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(jira_instance_updated, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:jira_instance_to_json/1})
    }.

-spec jira_instance_updated_from_json(igor_json:json_object()) -> jira_instance_updated().

jira_instance_updated_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:jira_instance_from_json/1}),
    #jira_instance_updated{actor_id = ActorId, actor_name = ActorName, data = Data}.

-spec jira_instance_deleted_to_json(jira_instance_deleted()) -> igor_json:json_object().

jira_instance_deleted_to_json(Record) ->
    #jira_instance_deleted{actor_id = ActorId, actor_name = ActorName, data = Data} = Record,
    ?assert(ActorId =/= undefined),
    ?assert(ActorName =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"kind">> => igor_json:pack(jira_instance_deleted, {custom, fun protocol_notification:notification_kind_to_json/1}),
        <<"actor_id">> => igor_json:pack(ActorId, long),
        <<"actor_name">> => igor_json:pack(ActorName, string),
        <<"data">> => igor_json:pack(Data, {custom, fun protocol_db:jira_instance_to_json/1})
    }.

-spec jira_instance_deleted_from_json(igor_json:json_object()) -> jira_instance_deleted().

jira_instance_deleted_from_json(Json) ->
    ActorId = igor_json:parse(Json, <<"actor_id">>, long),
    ActorName = igor_json:parse(Json, <<"actor_name">>, string),
    Data = igor_json:parse(Json, <<"data">>, {custom, fun protocol_db:jira_instance_from_json/1}),
    #jira_instance_deleted{actor_id = ActorId, actor_name = ActorName, data = Data}.

