%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(protocol_test_run).

-include_lib("stdlib/include/assert.hrl").
-include("protocol_test_run.hrl").

-export([
    test_run_order_by_to_string/1,
    test_run_order_by_from_string/1,
    test_run_order_by_to_json/1,
    test_run_order_by_from_json/1,
    create_test_run_error_to_string/1,
    create_test_run_error_from_string/1,
    create_test_run_error_to_json/1,
    create_test_run_error_from_json/1,
    start_test_run_error_to_string/1,
    start_test_run_error_from_string/1,
    start_test_run_error_to_json/1,
    start_test_run_error_from_json/1,
    close_test_run_error_to_string/1,
    close_test_run_error_from_string/1,
    close_test_run_error_to_json/1,
    close_test_run_error_from_json/1,
    reopen_test_run_error_to_string/1,
    reopen_test_run_error_from_string/1,
    reopen_test_run_error_to_json/1,
    reopen_test_run_error_from_json/1,
    clone_test_run_error_to_string/1,
    clone_test_run_error_from_string/1,
    clone_test_run_error_to_json/1,
    clone_test_run_error_from_json/1,
    update_test_run_error_to_string/1,
    update_test_run_error_from_string/1,
    update_test_run_error_to_json/1,
    update_test_run_error_from_json/1,
    create_test_run_item_error_to_string/1,
    create_test_run_item_error_from_string/1,
    create_test_run_item_error_to_json/1,
    create_test_run_item_error_from_json/1,
    update_test_run_item_error_to_string/1,
    update_test_run_item_error_from_string/1,
    update_test_run_item_error_to_json/1,
    update_test_run_item_error_from_json/1,
    start_test_run_item_error_to_string/1,
    start_test_run_item_error_from_string/1,
    start_test_run_item_error_to_json/1,
    start_test_run_item_error_from_json/1,
    finish_test_run_item_error_to_string/1,
    finish_test_run_item_error_from_string/1,
    finish_test_run_item_error_to_json/1,
    finish_test_run_item_error_from_json/1,
    block_test_run_item_error_to_string/1,
    block_test_run_item_error_from_string/1,
    block_test_run_item_error_to_json/1,
    block_test_run_item_error_from_json/1,
    reopen_test_run_item_error_to_string/1,
    reopen_test_run_item_error_from_string/1,
    reopen_test_run_item_error_to_json/1,
    reopen_test_run_item_error_from_json/1,
    create_test_run_request_to_json/1,
    create_test_run_request_from_json/1,
    update_test_run_request_to_json/1,
    update_test_run_request_from_json/1,
    create_test_run_item_request_to_json/1,
    create_test_run_item_request_from_json/1,
    update_test_run_item_request_to_json/1,
    update_test_run_item_request_from_json/1,
    finish_test_run_item_request_to_json/1,
    finish_test_run_item_request_from_json/1,
    block_test_run_item_request_to_json/1,
    block_test_run_item_request_from_json/1
]).

-export_type([
    test_run_order_by/0,
    create_test_run_request/0,
    create_test_run_error/0,
    start_test_run_error/0,
    close_test_run_error/0,
    reopen_test_run_error/0,
    clone_test_run_error/0,
    update_test_run_request/0,
    update_test_run_error/0,
    create_test_run_item_request/0,
    create_test_run_item_error/0,
    update_test_run_item_request/0,
    update_test_run_item_error/0,
    start_test_run_item_error/0,
    finish_test_run_item_request/0,
    finish_test_run_item_error/0,
    block_test_run_item_request/0,
    block_test_run_item_error/0,
    reopen_test_run_item_error/0
]).

-type test_run_order_by() :: 'id' | 'status' | 'created_at' | 'updated_at' | 'started_at' | 'finished_at'.
-type create_test_run_request() :: #create_test_run_request{}.
-type create_test_run_error() :: 'project_not_exists' | 'title_already_exists'.
-type start_test_run_error() :: 'already_started' | 'already_closed'.
-type close_test_run_error() :: 'already_closed'.
-type reopen_test_run_error() :: 'not_closed'.
-type clone_test_run_error() :: 'project_not_exists' | 'title_already_exists'.
-type update_test_run_request() :: #update_test_run_request{}.
-type update_test_run_error() :: 'title_already_exists'.
-type create_test_run_item_request() :: #create_test_run_item_request{}.
-type create_test_run_item_error() :: 'test_run_not_exists' | 'test_case_not_exists' | 'reporter_not_exists'.
-type update_test_run_item_request() :: #update_test_run_item_request{}.
-type update_test_run_item_error() :: 'nothing_to_update'.
-type start_test_run_item_error() :: 'already_started' | 'already_finished' | 'assignee_not_exists'.
-type finish_test_run_item_request() :: #finish_test_run_item_request{}.
-type finish_test_run_item_error() :: 'already_finished' | 'assignee_not_exists'.
-type block_test_run_item_request() :: #block_test_run_item_request{}.
-type block_test_run_item_error() :: 'already_finished' | 'assignee_not_exists' | 'setup_not_exists'.
-type reopen_test_run_item_error() :: 'already_opened' | 'assignee_not_exists'.

-spec test_run_order_by_to_string(test_run_order_by()) -> binary().

test_run_order_by_to_string(id) -> <<"id">>;
test_run_order_by_to_string(status) -> <<"status">>;
test_run_order_by_to_string(created_at) -> <<"created_at">>;
test_run_order_by_to_string(updated_at) -> <<"updated_at">>;
test_run_order_by_to_string(started_at) -> <<"started_at">>;
test_run_order_by_to_string(finished_at) -> <<"finished_at">>.

-spec test_run_order_by_from_string(binary()) -> test_run_order_by().

test_run_order_by_from_string(<<"id">>) -> id;
test_run_order_by_from_string(<<"status">>) -> status;
test_run_order_by_from_string(<<"created_at">>) -> created_at;
test_run_order_by_from_string(<<"updated_at">>) -> updated_at;
test_run_order_by_from_string(<<"started_at">>) -> started_at;
test_run_order_by_from_string(<<"finished_at">>) -> finished_at.

-spec test_run_order_by_to_json(test_run_order_by()) -> igor_json:json_string().

test_run_order_by_to_json(id) -> <<"id">>;
test_run_order_by_to_json(status) -> <<"status">>;
test_run_order_by_to_json(created_at) -> <<"created_at">>;
test_run_order_by_to_json(updated_at) -> <<"updated_at">>;
test_run_order_by_to_json(started_at) -> <<"started_at">>;
test_run_order_by_to_json(finished_at) -> <<"finished_at">>.

-spec test_run_order_by_from_json(igor_json:json()) -> test_run_order_by().

test_run_order_by_from_json(<<"id">>) -> id;
test_run_order_by_from_json(<<"status">>) -> status;
test_run_order_by_from_json(<<"created_at">>) -> created_at;
test_run_order_by_from_json(<<"updated_at">>) -> updated_at;
test_run_order_by_from_json(<<"started_at">>) -> started_at;
test_run_order_by_from_json(<<"finished_at">>) -> finished_at.

-spec create_test_run_error_to_string(create_test_run_error()) -> binary().

create_test_run_error_to_string(project_not_exists) -> <<"project_not_exists">>;
create_test_run_error_to_string(title_already_exists) -> <<"title_already_exists">>.

-spec create_test_run_error_from_string(binary()) -> create_test_run_error().

create_test_run_error_from_string(<<"project_not_exists">>) -> project_not_exists;
create_test_run_error_from_string(<<"title_already_exists">>) -> title_already_exists.

-spec create_test_run_error_to_json(create_test_run_error()) -> igor_json:json_string().

create_test_run_error_to_json(project_not_exists) -> <<"project_not_exists">>;
create_test_run_error_to_json(title_already_exists) -> <<"title_already_exists">>.

-spec create_test_run_error_from_json(igor_json:json()) -> create_test_run_error().

create_test_run_error_from_json(<<"project_not_exists">>) -> project_not_exists;
create_test_run_error_from_json(<<"title_already_exists">>) -> title_already_exists.

-spec start_test_run_error_to_string(start_test_run_error()) -> binary().

start_test_run_error_to_string(already_started) -> <<"already_started">>;
start_test_run_error_to_string(already_closed) -> <<"already_closed">>.

-spec start_test_run_error_from_string(binary()) -> start_test_run_error().

start_test_run_error_from_string(<<"already_started">>) -> already_started;
start_test_run_error_from_string(<<"already_closed">>) -> already_closed.

-spec start_test_run_error_to_json(start_test_run_error()) -> igor_json:json_string().

start_test_run_error_to_json(already_started) -> <<"already_started">>;
start_test_run_error_to_json(already_closed) -> <<"already_closed">>.

-spec start_test_run_error_from_json(igor_json:json()) -> start_test_run_error().

start_test_run_error_from_json(<<"already_started">>) -> already_started;
start_test_run_error_from_json(<<"already_closed">>) -> already_closed.

-spec close_test_run_error_to_string(close_test_run_error()) -> binary().

close_test_run_error_to_string(already_closed) -> <<"already_closed">>.

-spec close_test_run_error_from_string(binary()) -> close_test_run_error().

close_test_run_error_from_string(<<"already_closed">>) -> already_closed.

-spec close_test_run_error_to_json(close_test_run_error()) -> igor_json:json_string().

close_test_run_error_to_json(already_closed) -> <<"already_closed">>.

-spec close_test_run_error_from_json(igor_json:json()) -> close_test_run_error().

close_test_run_error_from_json(<<"already_closed">>) -> already_closed.

-spec reopen_test_run_error_to_string(reopen_test_run_error()) -> binary().

reopen_test_run_error_to_string(not_closed) -> <<"not_closed">>.

-spec reopen_test_run_error_from_string(binary()) -> reopen_test_run_error().

reopen_test_run_error_from_string(<<"not_closed">>) -> not_closed.

-spec reopen_test_run_error_to_json(reopen_test_run_error()) -> igor_json:json_string().

reopen_test_run_error_to_json(not_closed) -> <<"not_closed">>.

-spec reopen_test_run_error_from_json(igor_json:json()) -> reopen_test_run_error().

reopen_test_run_error_from_json(<<"not_closed">>) -> not_closed.

-spec clone_test_run_error_to_string(clone_test_run_error()) -> binary().

clone_test_run_error_to_string(project_not_exists) -> <<"project_not_exists">>;
clone_test_run_error_to_string(title_already_exists) -> <<"title_already_exists">>.

-spec clone_test_run_error_from_string(binary()) -> clone_test_run_error().

clone_test_run_error_from_string(<<"project_not_exists">>) -> project_not_exists;
clone_test_run_error_from_string(<<"title_already_exists">>) -> title_already_exists.

-spec clone_test_run_error_to_json(clone_test_run_error()) -> igor_json:json_string().

clone_test_run_error_to_json(project_not_exists) -> <<"project_not_exists">>;
clone_test_run_error_to_json(title_already_exists) -> <<"title_already_exists">>.

-spec clone_test_run_error_from_json(igor_json:json()) -> clone_test_run_error().

clone_test_run_error_from_json(<<"project_not_exists">>) -> project_not_exists;
clone_test_run_error_from_json(<<"title_already_exists">>) -> title_already_exists.

-spec update_test_run_error_to_string(update_test_run_error()) -> binary().

update_test_run_error_to_string(title_already_exists) -> <<"title_already_exists">>.

-spec update_test_run_error_from_string(binary()) -> update_test_run_error().

update_test_run_error_from_string(<<"title_already_exists">>) -> title_already_exists.

-spec update_test_run_error_to_json(update_test_run_error()) -> igor_json:json_string().

update_test_run_error_to_json(title_already_exists) -> <<"title_already_exists">>.

-spec update_test_run_error_from_json(igor_json:json()) -> update_test_run_error().

update_test_run_error_from_json(<<"title_already_exists">>) -> title_already_exists.

-spec create_test_run_item_error_to_string(create_test_run_item_error()) -> binary().

create_test_run_item_error_to_string(test_run_not_exists) -> <<"test_run_not_exists">>;
create_test_run_item_error_to_string(test_case_not_exists) -> <<"test_case_not_exists">>;
create_test_run_item_error_to_string(reporter_not_exists) -> <<"reporter_not_exists">>.

-spec create_test_run_item_error_from_string(binary()) -> create_test_run_item_error().

create_test_run_item_error_from_string(<<"test_run_not_exists">>) -> test_run_not_exists;
create_test_run_item_error_from_string(<<"test_case_not_exists">>) -> test_case_not_exists;
create_test_run_item_error_from_string(<<"reporter_not_exists">>) -> reporter_not_exists.

-spec create_test_run_item_error_to_json(create_test_run_item_error()) -> igor_json:json_string().

create_test_run_item_error_to_json(test_run_not_exists) -> <<"test_run_not_exists">>;
create_test_run_item_error_to_json(test_case_not_exists) -> <<"test_case_not_exists">>;
create_test_run_item_error_to_json(reporter_not_exists) -> <<"reporter_not_exists">>.

-spec create_test_run_item_error_from_json(igor_json:json()) -> create_test_run_item_error().

create_test_run_item_error_from_json(<<"test_run_not_exists">>) -> test_run_not_exists;
create_test_run_item_error_from_json(<<"test_case_not_exists">>) -> test_case_not_exists;
create_test_run_item_error_from_json(<<"reporter_not_exists">>) -> reporter_not_exists.

-spec update_test_run_item_error_to_string(update_test_run_item_error()) -> binary().

update_test_run_item_error_to_string(nothing_to_update) -> <<"nothing_to_update">>.

-spec update_test_run_item_error_from_string(binary()) -> update_test_run_item_error().

update_test_run_item_error_from_string(<<"nothing_to_update">>) -> nothing_to_update.

-spec update_test_run_item_error_to_json(update_test_run_item_error()) -> igor_json:json_string().

update_test_run_item_error_to_json(nothing_to_update) -> <<"nothing_to_update">>.

-spec update_test_run_item_error_from_json(igor_json:json()) -> update_test_run_item_error().

update_test_run_item_error_from_json(<<"nothing_to_update">>) -> nothing_to_update.

-spec start_test_run_item_error_to_string(start_test_run_item_error()) -> binary().

start_test_run_item_error_to_string(already_started) -> <<"already_started">>;
start_test_run_item_error_to_string(already_finished) -> <<"already_finished">>;
start_test_run_item_error_to_string(assignee_not_exists) -> <<"assignee_not_exists">>.

-spec start_test_run_item_error_from_string(binary()) -> start_test_run_item_error().

start_test_run_item_error_from_string(<<"already_started">>) -> already_started;
start_test_run_item_error_from_string(<<"already_finished">>) -> already_finished;
start_test_run_item_error_from_string(<<"assignee_not_exists">>) -> assignee_not_exists.

-spec start_test_run_item_error_to_json(start_test_run_item_error()) -> igor_json:json_string().

start_test_run_item_error_to_json(already_started) -> <<"already_started">>;
start_test_run_item_error_to_json(already_finished) -> <<"already_finished">>;
start_test_run_item_error_to_json(assignee_not_exists) -> <<"assignee_not_exists">>.

-spec start_test_run_item_error_from_json(igor_json:json()) -> start_test_run_item_error().

start_test_run_item_error_from_json(<<"already_started">>) -> already_started;
start_test_run_item_error_from_json(<<"already_finished">>) -> already_finished;
start_test_run_item_error_from_json(<<"assignee_not_exists">>) -> assignee_not_exists.

-spec finish_test_run_item_error_to_string(finish_test_run_item_error()) -> binary().

finish_test_run_item_error_to_string(already_finished) -> <<"already_finished">>;
finish_test_run_item_error_to_string(assignee_not_exists) -> <<"assignee_not_exists">>.

-spec finish_test_run_item_error_from_string(binary()) -> finish_test_run_item_error().

finish_test_run_item_error_from_string(<<"already_finished">>) -> already_finished;
finish_test_run_item_error_from_string(<<"assignee_not_exists">>) -> assignee_not_exists.

-spec finish_test_run_item_error_to_json(finish_test_run_item_error()) -> igor_json:json_string().

finish_test_run_item_error_to_json(already_finished) -> <<"already_finished">>;
finish_test_run_item_error_to_json(assignee_not_exists) -> <<"assignee_not_exists">>.

-spec finish_test_run_item_error_from_json(igor_json:json()) -> finish_test_run_item_error().

finish_test_run_item_error_from_json(<<"already_finished">>) -> already_finished;
finish_test_run_item_error_from_json(<<"assignee_not_exists">>) -> assignee_not_exists.

-spec block_test_run_item_error_to_string(block_test_run_item_error()) -> binary().

block_test_run_item_error_to_string(already_finished) -> <<"already_finished">>;
block_test_run_item_error_to_string(assignee_not_exists) -> <<"assignee_not_exists">>;
block_test_run_item_error_to_string(setup_not_exists) -> <<"setup_not_exists">>.

-spec block_test_run_item_error_from_string(binary()) -> block_test_run_item_error().

block_test_run_item_error_from_string(<<"already_finished">>) -> already_finished;
block_test_run_item_error_from_string(<<"assignee_not_exists">>) -> assignee_not_exists;
block_test_run_item_error_from_string(<<"setup_not_exists">>) -> setup_not_exists.

-spec block_test_run_item_error_to_json(block_test_run_item_error()) -> igor_json:json_string().

block_test_run_item_error_to_json(already_finished) -> <<"already_finished">>;
block_test_run_item_error_to_json(assignee_not_exists) -> <<"assignee_not_exists">>;
block_test_run_item_error_to_json(setup_not_exists) -> <<"setup_not_exists">>.

-spec block_test_run_item_error_from_json(igor_json:json()) -> block_test_run_item_error().

block_test_run_item_error_from_json(<<"already_finished">>) -> already_finished;
block_test_run_item_error_from_json(<<"assignee_not_exists">>) -> assignee_not_exists;
block_test_run_item_error_from_json(<<"setup_not_exists">>) -> setup_not_exists.

-spec reopen_test_run_item_error_to_string(reopen_test_run_item_error()) -> binary().

reopen_test_run_item_error_to_string(already_opened) -> <<"already_opened">>;
reopen_test_run_item_error_to_string(assignee_not_exists) -> <<"assignee_not_exists">>.

-spec reopen_test_run_item_error_from_string(binary()) -> reopen_test_run_item_error().

reopen_test_run_item_error_from_string(<<"already_opened">>) -> already_opened;
reopen_test_run_item_error_from_string(<<"assignee_not_exists">>) -> assignee_not_exists.

-spec reopen_test_run_item_error_to_json(reopen_test_run_item_error()) -> igor_json:json_string().

reopen_test_run_item_error_to_json(already_opened) -> <<"already_opened">>;
reopen_test_run_item_error_to_json(assignee_not_exists) -> <<"assignee_not_exists">>.

-spec reopen_test_run_item_error_from_json(igor_json:json()) -> reopen_test_run_item_error().

reopen_test_run_item_error_from_json(<<"already_opened">>) -> already_opened;
reopen_test_run_item_error_from_json(<<"assignee_not_exists">>) -> assignee_not_exists.

-spec create_test_run_request_to_json(create_test_run_request()) -> igor_json:json_object().

create_test_run_request_to_json(Record) ->
    #create_test_run_request{title = Title} = Record,
    #{
        <<"title">> => igor_json:pack(Title, string)
    }.

-spec create_test_run_request_from_json(igor_json:json_object()) -> create_test_run_request().

create_test_run_request_from_json(Json) ->
    Title = igor_json:parse(Json, <<"title">>, string, undefined),
    #create_test_run_request{title = Title}.

-spec update_test_run_request_to_json(update_test_run_request()) -> igor_json:json_object().

update_test_run_request_to_json(Record) ->
    #update_test_run_request{title = Title} = Record,
    Json1 = igor_json:maybe_pack_field(#{}, <<"title">>, Title, {nullable, string}),
    Json1.

-spec update_test_run_request_from_json(igor_json:json_object()) -> update_test_run_request().

update_test_run_request_from_json(Json) ->
    Title = igor_json:parse(Json, <<"title">>, {nullable, string}, undefined),
    #update_test_run_request{title = Title}.

-spec create_test_run_item_request_to_json(create_test_run_item_request()) -> igor_json:json_object().

create_test_run_item_request_to_json(Record) ->
    #create_test_run_item_request{case_id = CaseId, order_num = OrderNum} = Record,
    ?assert(CaseId =/= undefined),
    ?assert(OrderNum =/= undefined),
    #{
        <<"case_id">> => igor_json:pack(CaseId, long),
        <<"order_num">> => igor_json:pack(OrderNum, int)
    }.

-spec create_test_run_item_request_from_json(igor_json:json_object()) -> create_test_run_item_request().

create_test_run_item_request_from_json(Json) ->
    CaseId = igor_json:parse(Json, <<"case_id">>, long),
    OrderNum = igor_json:parse(Json, <<"order_num">>, int),
    #create_test_run_item_request{case_id = CaseId, order_num = OrderNum}.

-spec update_test_run_item_request_to_json(update_test_run_item_request()) -> igor_json:json_object().

update_test_run_item_request_to_json(Record) ->
    #update_test_run_item_request{summary = Summary, order_num = OrderNum, jira_issue_key = JiraIssueKey} = Record,
    Json1 = igor_json:maybe_pack_field(#{}, <<"summary">>, Summary, {nullable, string}),
    Json2 = igor_json:maybe_pack_field(Json1, <<"order_num">>, OrderNum, int),
    Json3 = igor_json:maybe_pack_field(Json2, <<"jira_issue_key">>, JiraIssueKey, {nullable, string}),
    Json3.

-spec update_test_run_item_request_from_json(igor_json:json_object()) -> update_test_run_item_request().

update_test_run_item_request_from_json(Json) ->
    Summary = igor_json:parse(Json, <<"summary">>, {nullable, string}, undefined),
    OrderNum = igor_json:parse(Json, <<"order_num">>, int, undefined),
    JiraIssueKey = igor_json:parse(Json, <<"jira_issue_key">>, {nullable, string}, undefined),
    #update_test_run_item_request{summary = Summary, order_num = OrderNum, jira_issue_key = JiraIssueKey}.

-spec finish_test_run_item_request_to_json(finish_test_run_item_request()) -> igor_json:json_object().

finish_test_run_item_request_to_json(Record) ->
    #finish_test_run_item_request{summary = Summary} = Record,
    #{
        <<"summary">> => igor_json:pack(Summary, string)
    }.

-spec finish_test_run_item_request_from_json(igor_json:json_object()) -> finish_test_run_item_request().

finish_test_run_item_request_from_json(Json) ->
    Summary = igor_json:parse(Json, <<"summary">>, string, undefined),
    #finish_test_run_item_request{summary = Summary}.

-spec block_test_run_item_request_to_json(block_test_run_item_request()) -> igor_json:json_object().

block_test_run_item_request_to_json(Record) ->
    #block_test_run_item_request{failed_setup_id = FailedSetupId, setup_parameter_value = SetupParameterValue, summary = Summary} = Record,
    ?assert(FailedSetupId =/= undefined),
    #{
        <<"failed_setup_id">> => igor_json:pack(FailedSetupId, long),
        <<"setup_parameter_value">> => igor_json:pack(SetupParameterValue, string),
        <<"summary">> => igor_json:pack(Summary, string)
    }.

-spec block_test_run_item_request_from_json(igor_json:json_object()) -> block_test_run_item_request().

block_test_run_item_request_from_json(Json) ->
    FailedSetupId = igor_json:parse(Json, <<"failed_setup_id">>, long),
    SetupParameterValue = igor_json:parse(Json, <<"setup_parameter_value">>, string, undefined),
    Summary = igor_json:parse(Json, <<"summary">>, string, undefined),
    #block_test_run_item_request{failed_setup_id = FailedSetupId, setup_parameter_value = SetupParameterValue, summary = Summary}.

