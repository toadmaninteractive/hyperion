%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.1
%% DO NOT EDIT THIS FILE - it is machine generated

-module(protocol_auth).

-include_lib("stdlib/include/assert.hrl").
-include("protocol_auth.hrl").

-export([
    personnel_login_error_to_string/1,
    personnel_login_error_from_string/1,
    personnel_login_error_to_json/1,
    personnel_login_error_from_json/1,
    personnel_status_response_to_json/1,
    personnel_status_response_from_json/1,
    personnel_login_request_to_json/1,
    personnel_login_request_from_json/1,
    personnel_login_response_to_json/1,
    personnel_login_response_from_json/1
]).

-export_type([
    personnel_status_response/0,
    personnel_login_request/0,
    personnel_login_error/0,
    personnel_login_response/0
]).

-type personnel_status_response() :: #personnel_status_response{}.
-type personnel_login_request() :: #personnel_login_request{}.
-type personnel_login_error() :: 'failure' | 'already_logged_in' | 'account_not_exists' | 'account_is_blocked' | 'account_is_deleted' | 'invalid_password'.
-type personnel_login_response() :: #personnel_login_response{}.

-spec personnel_login_error_to_string(personnel_login_error()) -> binary().

personnel_login_error_to_string(failure) -> <<"failure">>;
personnel_login_error_to_string(already_logged_in) -> <<"already_logged_in">>;
personnel_login_error_to_string(account_not_exists) -> <<"account_not_exists">>;
personnel_login_error_to_string(account_is_blocked) -> <<"account_is_blocked">>;
personnel_login_error_to_string(account_is_deleted) -> <<"account_is_deleted">>;
personnel_login_error_to_string(invalid_password) -> <<"invalid_password">>.

-spec personnel_login_error_from_string(binary()) -> personnel_login_error().

personnel_login_error_from_string(<<"failure">>) -> failure;
personnel_login_error_from_string(<<"already_logged_in">>) -> already_logged_in;
personnel_login_error_from_string(<<"account_not_exists">>) -> account_not_exists;
personnel_login_error_from_string(<<"account_is_blocked">>) -> account_is_blocked;
personnel_login_error_from_string(<<"account_is_deleted">>) -> account_is_deleted;
personnel_login_error_from_string(<<"invalid_password">>) -> invalid_password.

-spec personnel_login_error_to_json(personnel_login_error()) -> igor_json:json_string().

personnel_login_error_to_json(failure) -> <<"failure">>;
personnel_login_error_to_json(already_logged_in) -> <<"already_logged_in">>;
personnel_login_error_to_json(account_not_exists) -> <<"account_not_exists">>;
personnel_login_error_to_json(account_is_blocked) -> <<"account_is_blocked">>;
personnel_login_error_to_json(account_is_deleted) -> <<"account_is_deleted">>;
personnel_login_error_to_json(invalid_password) -> <<"invalid_password">>.

-spec personnel_login_error_from_json(igor_json:json()) -> personnel_login_error().

personnel_login_error_from_json(<<"failure">>) -> failure;
personnel_login_error_from_json(<<"already_logged_in">>) -> already_logged_in;
personnel_login_error_from_json(<<"account_not_exists">>) -> account_not_exists;
personnel_login_error_from_json(<<"account_is_blocked">>) -> account_is_blocked;
personnel_login_error_from_json(<<"account_is_deleted">>) -> account_is_deleted;
personnel_login_error_from_json(<<"invalid_password">>) -> invalid_password.

-spec personnel_status_response_to_json(personnel_status_response()) -> igor_json:json_object().

personnel_status_response_to_json(Record) ->
    #personnel_status_response{
        logged_in = LoggedIn,
        user_id = UserId,
        email = Email,
        username = Username
    } = Record,
    ?assert(LoggedIn =/= undefined),
    #{
        <<"logged_in">> => igor_json:pack(LoggedIn, boolean),
        <<"user_id">> => igor_json:pack(UserId, long),
        <<"email">> => igor_json:pack(Email, string),
        <<"username">> => igor_json:pack(Username, string)
    }.

-spec personnel_status_response_from_json(igor_json:json_object()) -> personnel_status_response().

personnel_status_response_from_json(Json) ->
    LoggedIn = igor_json:parse(Json, <<"logged_in">>, boolean),
    UserId = igor_json:parse(Json, <<"user_id">>, long, undefined),
    Email = igor_json:parse(Json, <<"email">>, string, undefined),
    Username = igor_json:parse(Json, <<"username">>, string, undefined),
    #personnel_status_response{
        logged_in = LoggedIn,
        user_id = UserId,
        email = Email,
        username = Username
    }.

-spec personnel_login_request_to_json(personnel_login_request()) -> igor_json:json_object().

personnel_login_request_to_json(Record) ->
    #personnel_login_request{username = Username, password = Password} = Record,
    ?assert(Username =/= undefined),
    ?assert(Password =/= undefined),
    #{
        <<"username">> => igor_json:pack(Username, string),
        <<"password">> => igor_json:pack(Password, string)
    }.

-spec personnel_login_request_from_json(igor_json:json_object()) -> personnel_login_request().

personnel_login_request_from_json(Json) ->
    Username = igor_json:parse(Json, <<"username">>, string),
    Password = igor_json:parse(Json, <<"password">>, string),
    #personnel_login_request{username = Username, password = Password}.

-spec personnel_login_response_to_json(personnel_login_response()) -> igor_json:json_object().

personnel_login_response_to_json(Record) ->
    #personnel_login_response{
        result = VarResult,
        error = Error,
        session_id = SessionId,
        user_id = UserId,
        email = Email,
        username = Username
    } = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun protocol_auth:personnel_login_error_to_json/1}),
        <<"session_id">> => igor_json:pack(SessionId, string),
        <<"user_id">> => igor_json:pack(UserId, long),
        <<"email">> => igor_json:pack(Email, string),
        <<"username">> => igor_json:pack(Username, string)
    }.

-spec personnel_login_response_from_json(igor_json:json_object()) -> personnel_login_response().

personnel_login_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun protocol_auth:personnel_login_error_from_json/1}, undefined),
    SessionId = igor_json:parse(Json, <<"session_id">>, string, undefined),
    UserId = igor_json:parse(Json, <<"user_id">>, long, undefined),
    Email = igor_json:parse(Json, <<"email">>, string, undefined),
    Username = igor_json:parse(Json, <<"username">>, string, undefined),
    #personnel_login_response{
        result = VarResult,
        error = Error,
        session_id = SessionId,
        user_id = UserId,
        email = Email,
        username = Username
    }.

