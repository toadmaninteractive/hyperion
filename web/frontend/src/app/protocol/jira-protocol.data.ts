// Author: Igor compiler
// Compiler version: igorc 2.1.1
// DO NOT EDIT THIS FILE - it is machine generated

import * as Igor from './igor';

export class CreateJiraInstanceRequest {
    title!: string;
    url!: string;

    static fromJson(json: Igor.Json.JsonValue): CreateJiraInstanceRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new CreateJiraInstanceRequest();
        obj.title = jsonObject['title'] as string;
        obj.url = jsonObject['url'] as string;
        return obj;
    }

    static toJson(value: CreateJiraInstanceRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['title'] = value.title;
        result['url'] = value.url;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return CreateJiraInstanceRequest.toJson(this);
    }
}

export class UpdateJiraInstanceRequest {
    title?: string | null;
    url?: string | null;

    static fromJson(json: Igor.Json.JsonValue): UpdateJiraInstanceRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new UpdateJiraInstanceRequest();
        if (jsonObject['title'] !== undefined) obj.title = jsonObject['title'] as string;
        if (jsonObject['url'] !== undefined) obj.url = jsonObject['url'] as string;
        return obj;
    }

    static toJson(value: UpdateJiraInstanceRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        if (value.title !== undefined) result['title'] = value.title;
        if (value.url !== undefined) result['url'] = value.url;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return UpdateJiraInstanceRequest.toJson(this);
    }
}

export enum JiraInstanceError {
    /** JIRA title already exists */
    TitleAlreadyExists = 1,
    /** Invlaid JIRA title */
    InvalidTitle = 2,
    /** Invalid JIRA base URL */
    InvalidUrl = 3,
}

export namespace JiraInstanceError {
    export function toJson(value: JiraInstanceError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): JiraInstanceError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: JiraInstanceError): Igor.Json.JsonValue {
        switch (value) {
            case JiraInstanceError.TitleAlreadyExists: return 'title_already_exists';
            case JiraInstanceError.InvalidTitle: return 'invalid_title';
            case JiraInstanceError.InvalidUrl: return 'invalid_url';
            default: throw new Error(`Invalid JiraInstanceError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): JiraInstanceError {
        switch (json) {
            case 'title_already_exists': return JiraInstanceError.TitleAlreadyExists;
            case 'invalid_title': return JiraInstanceError.InvalidTitle;
            case 'invalid_url': return JiraInstanceError.InvalidUrl;
            default: throw new Error(`Invalid JiraInstanceError value: ${json}`);
        }
    }

    export function getDescription(value: JiraInstanceError): string {
        switch (value) {
            case JiraInstanceError.TitleAlreadyExists: return 'JIRA title already exists';
            case JiraInstanceError.InvalidTitle: return 'Invlaid JIRA title';
            case JiraInstanceError.InvalidUrl: return 'Invalid JIRA base URL';
            default: return '';
        }
    }
}

export class CreateJiraIssueRequest {
    summary!: string;
    description!: string;

    static fromJson(json: Igor.Json.JsonValue): CreateJiraIssueRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new CreateJiraIssueRequest();
        obj.summary = jsonObject['summary'] as string;
        obj.description = jsonObject['description'] as string;
        return obj;
    }

    static toJson(value: CreateJiraIssueRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['summary'] = value.summary;
        result['description'] = value.description;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return CreateJiraIssueRequest.toJson(this);
    }
}

export class CreateJiraIssueResponse {
    jiraIssueKey!: string;
    jiraIssueUrl!: string;

    static fromJson(json: Igor.Json.JsonValue): CreateJiraIssueResponse {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new CreateJiraIssueResponse();
        obj.jiraIssueKey = jsonObject['jira_issue_key'] as string;
        obj.jiraIssueUrl = jsonObject['jira_issue_url'] as string;
        return obj;
    }

    static toJson(value: CreateJiraIssueResponse): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['jira_issue_key'] = value.jiraIssueKey;
        result['jira_issue_url'] = value.jiraIssueUrl;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return CreateJiraIssueResponse.toJson(this);
    }
}

export enum JiraIssueError {
    /** JIRA issue already assigned */
    JiraIssueAlreadyAssigned = 1,
    /** JIRA instance not linked */
    JiraInstanceNotLinked = 2,
    /** Invalid JIRA instance */
    InvalidJiraInstance = 3,
    /** Invalid JIRA project key */
    InvalidJiraKey = 4,
    /** Invalid JIRA base URL */
    InvalidJiraUrl = 5,
    /** JIRA user not exists */
    JiraUserNotExists = 6,
    /** No JIRA credentials */
    NoCredentials = 7,
    /** Invalid JIRA credentials */
    InvalidCredentials = 8,
    /** Invalid project */
    InvalidProject = 9,
    /** Invalid issue summary */
    InvalidSummary = 10,
}

export namespace JiraIssueError {
    export function toJson(value: JiraIssueError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): JiraIssueError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: JiraIssueError): Igor.Json.JsonValue {
        switch (value) {
            case JiraIssueError.JiraIssueAlreadyAssigned: return 'jira_issue_already_assigned';
            case JiraIssueError.JiraInstanceNotLinked: return 'jira_instance_not_linked';
            case JiraIssueError.InvalidJiraInstance: return 'invalid_jira_instance';
            case JiraIssueError.InvalidJiraKey: return 'invalid_jira_key';
            case JiraIssueError.InvalidJiraUrl: return 'invalid_jira_url';
            case JiraIssueError.JiraUserNotExists: return 'jira_user_not_exists';
            case JiraIssueError.NoCredentials: return 'no_credentials';
            case JiraIssueError.InvalidCredentials: return 'invalid_credentials';
            case JiraIssueError.InvalidProject: return 'invalid_project';
            case JiraIssueError.InvalidSummary: return 'invalid_summary';
            default: throw new Error(`Invalid JiraIssueError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): JiraIssueError {
        switch (json) {
            case 'jira_issue_already_assigned': return JiraIssueError.JiraIssueAlreadyAssigned;
            case 'jira_instance_not_linked': return JiraIssueError.JiraInstanceNotLinked;
            case 'invalid_jira_instance': return JiraIssueError.InvalidJiraInstance;
            case 'invalid_jira_key': return JiraIssueError.InvalidJiraKey;
            case 'invalid_jira_url': return JiraIssueError.InvalidJiraUrl;
            case 'jira_user_not_exists': return JiraIssueError.JiraUserNotExists;
            case 'no_credentials': return JiraIssueError.NoCredentials;
            case 'invalid_credentials': return JiraIssueError.InvalidCredentials;
            case 'invalid_project': return JiraIssueError.InvalidProject;
            case 'invalid_summary': return JiraIssueError.InvalidSummary;
            default: throw new Error(`Invalid JiraIssueError value: ${json}`);
        }
    }

    export function getDescription(value: JiraIssueError): string {
        switch (value) {
            case JiraIssueError.JiraIssueAlreadyAssigned: return 'JIRA issue already assigned';
            case JiraIssueError.JiraInstanceNotLinked: return 'JIRA instance not linked';
            case JiraIssueError.InvalidJiraInstance: return 'Invalid JIRA instance';
            case JiraIssueError.InvalidJiraKey: return 'Invalid JIRA project key';
            case JiraIssueError.InvalidJiraUrl: return 'Invalid JIRA base URL';
            case JiraIssueError.JiraUserNotExists: return 'JIRA user not exists';
            case JiraIssueError.NoCredentials: return 'No JIRA credentials';
            case JiraIssueError.InvalidCredentials: return 'Invalid JIRA credentials';
            case JiraIssueError.InvalidProject: return 'Invalid project';
            case JiraIssueError.InvalidSummary: return 'Invalid issue summary';
            default: return '';
        }
    }
}

export class AuthenticateJiraRequest {
    username!: string;
    password!: string;

    static fromJson(json: Igor.Json.JsonValue): AuthenticateJiraRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new AuthenticateJiraRequest();
        obj.username = jsonObject['username'] as string;
        obj.password = jsonObject['password'] as string;
        return obj;
    }

    static toJson(value: AuthenticateJiraRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['username'] = value.username;
        result['password'] = value.password;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return AuthenticateJiraRequest.toJson(this);
    }
}

export enum JiraAuthenticationError {
    /** Invalid JIRA instance */
    InvalidJiraInstance = 1,
    /** Invalid JIRA base URL */
    InvalidJiraUrl = 2,
    /** JIRA user not exists */
    JiraUserNotExists = 3,
    /** Invalid JIRA credentials */
    InvalidCredentials = 4,
}

export namespace JiraAuthenticationError {
    export function toJson(value: JiraAuthenticationError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): JiraAuthenticationError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: JiraAuthenticationError): Igor.Json.JsonValue {
        switch (value) {
            case JiraAuthenticationError.InvalidJiraInstance: return 'invalid_jira_instance';
            case JiraAuthenticationError.InvalidJiraUrl: return 'invalid_jira_url';
            case JiraAuthenticationError.JiraUserNotExists: return 'jira_user_not_exists';
            case JiraAuthenticationError.InvalidCredentials: return 'invalid_credentials';
            default: throw new Error(`Invalid JiraAuthenticationError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): JiraAuthenticationError {
        switch (json) {
            case 'invalid_jira_instance': return JiraAuthenticationError.InvalidJiraInstance;
            case 'invalid_jira_url': return JiraAuthenticationError.InvalidJiraUrl;
            case 'jira_user_not_exists': return JiraAuthenticationError.JiraUserNotExists;
            case 'invalid_credentials': return JiraAuthenticationError.InvalidCredentials;
            default: throw new Error(`Invalid JiraAuthenticationError value: ${json}`);
        }
    }

    export function getDescription(value: JiraAuthenticationError): string {
        switch (value) {
            case JiraAuthenticationError.InvalidJiraInstance: return 'Invalid JIRA instance';
            case JiraAuthenticationError.InvalidJiraUrl: return 'Invalid JIRA base URL';
            case JiraAuthenticationError.JiraUserNotExists: return 'JIRA user not exists';
            case JiraAuthenticationError.InvalidCredentials: return 'Invalid JIRA credentials';
            default: return '';
        }
    }
}
