// Author: Igor compiler
// Compiler version: igorc 2.1.1
// DO NOT EDIT THIS FILE - it is machine generated

import * as Igor from './igor';
import * as DbProtocol from './db-protocol.data';

export enum NotificationKind {
    Hello = 1,
    ProjectCreated = 2,
    ProjectUpdated = 3,
    ProjectDeleted = 4,
    ParameterCreated = 5,
    ParameterUpdated = 6,
    ParameterDeleted = 7,
    SetupStepCreated = 8,
    SetupStepUpdated = 9,
    SetupStepDeleted = 10,
    TestCaseCreated = 11,
    TestCaseUpdated = 12,
    TestCaseDeleted = 13,
    TestRunCreated = 14,
    TestRunUpdated = 15,
    TestRunStarted = 16,
    TestRunClosed = 17,
    TestRunReopened = 18,
    TestRunDeleted = 19,
    TestCreated = 20,
    TestUpdated = 21,
    TestStarted = 22,
    TestPassed = 23,
    TestFailed = 24,
    TestBlocked = 25,
    TestReopened = 26,
    TestDeleted = 27,
    AttachmentLinked = 28,
    AttachmentUnlinked = 29,
    JiraInstanceCreated = 30,
    JiraInstanceUpdated = 31,
    JiraInstanceDeleted = 32,
}

export namespace NotificationKind {
    export function toJson(value: NotificationKind): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): NotificationKind {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: NotificationKind): Igor.Json.JsonValue {
        switch (value) {
            case NotificationKind.Hello: return 'hello';
            case NotificationKind.ProjectCreated: return 'project_created';
            case NotificationKind.ProjectUpdated: return 'project_updated';
            case NotificationKind.ProjectDeleted: return 'project_deleted';
            case NotificationKind.ParameterCreated: return 'parameter_created';
            case NotificationKind.ParameterUpdated: return 'parameter_updated';
            case NotificationKind.ParameterDeleted: return 'parameter_deleted';
            case NotificationKind.SetupStepCreated: return 'setup_step_created';
            case NotificationKind.SetupStepUpdated: return 'setup_step_updated';
            case NotificationKind.SetupStepDeleted: return 'setup_step_deleted';
            case NotificationKind.TestCaseCreated: return 'test_case_created';
            case NotificationKind.TestCaseUpdated: return 'test_case_updated';
            case NotificationKind.TestCaseDeleted: return 'test_case_deleted';
            case NotificationKind.TestRunCreated: return 'test_run_created';
            case NotificationKind.TestRunUpdated: return 'test_run_updated';
            case NotificationKind.TestRunStarted: return 'test_run_started';
            case NotificationKind.TestRunClosed: return 'test_run_closed';
            case NotificationKind.TestRunReopened: return 'test_run_reopened';
            case NotificationKind.TestRunDeleted: return 'test_run_deleted';
            case NotificationKind.TestCreated: return 'test_created';
            case NotificationKind.TestUpdated: return 'test_updated';
            case NotificationKind.TestStarted: return 'test_started';
            case NotificationKind.TestPassed: return 'test_passed';
            case NotificationKind.TestFailed: return 'test_failed';
            case NotificationKind.TestBlocked: return 'test_blocked';
            case NotificationKind.TestReopened: return 'test_reopened';
            case NotificationKind.TestDeleted: return 'test_deleted';
            case NotificationKind.AttachmentLinked: return 'attachment_linked';
            case NotificationKind.AttachmentUnlinked: return 'attachment_unlinked';
            case NotificationKind.JiraInstanceCreated: return 'jira_instance_created';
            case NotificationKind.JiraInstanceUpdated: return 'jira_instance_updated';
            case NotificationKind.JiraInstanceDeleted: return 'jira_instance_deleted';
            default: throw new Error(`Invalid NotificationKind value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): NotificationKind {
        switch (json) {
            case 'hello': return NotificationKind.Hello;
            case 'project_created': return NotificationKind.ProjectCreated;
            case 'project_updated': return NotificationKind.ProjectUpdated;
            case 'project_deleted': return NotificationKind.ProjectDeleted;
            case 'parameter_created': return NotificationKind.ParameterCreated;
            case 'parameter_updated': return NotificationKind.ParameterUpdated;
            case 'parameter_deleted': return NotificationKind.ParameterDeleted;
            case 'setup_step_created': return NotificationKind.SetupStepCreated;
            case 'setup_step_updated': return NotificationKind.SetupStepUpdated;
            case 'setup_step_deleted': return NotificationKind.SetupStepDeleted;
            case 'test_case_created': return NotificationKind.TestCaseCreated;
            case 'test_case_updated': return NotificationKind.TestCaseUpdated;
            case 'test_case_deleted': return NotificationKind.TestCaseDeleted;
            case 'test_run_created': return NotificationKind.TestRunCreated;
            case 'test_run_updated': return NotificationKind.TestRunUpdated;
            case 'test_run_started': return NotificationKind.TestRunStarted;
            case 'test_run_closed': return NotificationKind.TestRunClosed;
            case 'test_run_reopened': return NotificationKind.TestRunReopened;
            case 'test_run_deleted': return NotificationKind.TestRunDeleted;
            case 'test_created': return NotificationKind.TestCreated;
            case 'test_updated': return NotificationKind.TestUpdated;
            case 'test_started': return NotificationKind.TestStarted;
            case 'test_passed': return NotificationKind.TestPassed;
            case 'test_failed': return NotificationKind.TestFailed;
            case 'test_blocked': return NotificationKind.TestBlocked;
            case 'test_reopened': return NotificationKind.TestReopened;
            case 'test_deleted': return NotificationKind.TestDeleted;
            case 'attachment_linked': return NotificationKind.AttachmentLinked;
            case 'attachment_unlinked': return NotificationKind.AttachmentUnlinked;
            case 'jira_instance_created': return NotificationKind.JiraInstanceCreated;
            case 'jira_instance_updated': return NotificationKind.JiraInstanceUpdated;
            case 'jira_instance_deleted': return NotificationKind.JiraInstanceDeleted;
            default: throw new Error(`Invalid NotificationKind value: ${json}`);
        }
    }
}

export interface IActor {
    actorId: number;
    actorName: string;
}

export interface IData<T> {
    data: T;
}

export abstract class Notification {
    kind!: NotificationKind;

    static fromJson(json: Igor.Json.JsonValue): Notification {
        const jsonObject = json as Igor.Json.JsonObject;
        const kind = NotificationKind.fromJson(jsonObject['kind']);
        switch(kind) {
            case NotificationKind.Hello:
                return Hello.fromJson(json);
            case NotificationKind.ProjectCreated:
                return ProjectCreated.fromJson(json);
            case NotificationKind.ProjectUpdated:
                return ProjectUpdated.fromJson(json);
            case NotificationKind.ProjectDeleted:
                return ProjectDeleted.fromJson(json);
            case NotificationKind.ParameterCreated:
                return ParameterCreated.fromJson(json);
            case NotificationKind.ParameterUpdated:
                return ParameterUpdated.fromJson(json);
            case NotificationKind.ParameterDeleted:
                return ParameterDeleted.fromJson(json);
            case NotificationKind.SetupStepCreated:
                return SetupStepCreated.fromJson(json);
            case NotificationKind.SetupStepUpdated:
                return SetupStepUpdated.fromJson(json);
            case NotificationKind.SetupStepDeleted:
                return SetupStepDeleted.fromJson(json);
            case NotificationKind.TestCaseCreated:
                return TestCaseCreated.fromJson(json);
            case NotificationKind.TestCaseUpdated:
                return TestCaseUpdated.fromJson(json);
            case NotificationKind.TestCaseDeleted:
                return TestCaseDeleted.fromJson(json);
            case NotificationKind.TestRunCreated:
                return TestRunCreated.fromJson(json);
            case NotificationKind.TestRunUpdated:
                return TestRunUpdated.fromJson(json);
            case NotificationKind.TestRunStarted:
                return TestRunStarted.fromJson(json);
            case NotificationKind.TestRunClosed:
                return TestRunClosed.fromJson(json);
            case NotificationKind.TestRunReopened:
                return TestRunReopened.fromJson(json);
            case NotificationKind.TestRunDeleted:
                return TestRunDeleted.fromJson(json);
            case NotificationKind.TestCreated:
                return TestCreated.fromJson(json);
            case NotificationKind.TestUpdated:
                return TestUpdated.fromJson(json);
            case NotificationKind.TestStarted:
                return TestStarted.fromJson(json);
            case NotificationKind.TestPassed:
                return TestPassed.fromJson(json);
            case NotificationKind.TestFailed:
                return TestFailed.fromJson(json);
            case NotificationKind.TestBlocked:
                return TestBlocked.fromJson(json);
            case NotificationKind.TestReopened:
                return TestReopened.fromJson(json);
            case NotificationKind.TestDeleted:
                return TestDeleted.fromJson(json);
            case NotificationKind.AttachmentLinked:
                return AttachmentLinked.fromJson(json);
            case NotificationKind.AttachmentUnlinked:
                return AttachmentUnlinked.fromJson(json);
            case NotificationKind.JiraInstanceCreated:
                return JiraInstanceCreated.fromJson(json);
            case NotificationKind.JiraInstanceUpdated:
                return JiraInstanceUpdated.fromJson(json);
            case NotificationKind.JiraInstanceDeleted:
                return JiraInstanceDeleted.fromJson(json);
            default:
                throw new Error(`Invalid NotificationKind value: ${kind}`);
        }
    }

    static toJson(value: Notification): Igor.Json.JsonValue {
        return value.toJson();
    }

    abstract toJson(): Igor.Json.JsonValue;
}

export class Hello extends Notification {
    kind: NotificationKind = NotificationKind.Hello;

    static fromJson(json: Igor.Json.JsonValue): Hello {
        const obj = new Hello();
        return obj;
    }

    static toJson(value: Hello): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return Hello.toJson(this);
    }
}

export class ProjectCreated extends Notification implements IActor, IData<DbProtocol.Project> {
    kind: NotificationKind = NotificationKind.ProjectCreated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.Project;

    static fromJson(json: Igor.Json.JsonValue): ProjectCreated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new ProjectCreated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.Project.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: ProjectCreated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return ProjectCreated.toJson(this);
    }
}

export class ProjectUpdated extends Notification implements IActor, IData<DbProtocol.Project> {
    kind: NotificationKind = NotificationKind.ProjectUpdated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.Project;

    static fromJson(json: Igor.Json.JsonValue): ProjectUpdated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new ProjectUpdated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.Project.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: ProjectUpdated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return ProjectUpdated.toJson(this);
    }
}

export class ProjectDeleted extends Notification implements IActor, IData<DbProtocol.Project> {
    kind: NotificationKind = NotificationKind.ProjectDeleted;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.Project;

    static fromJson(json: Igor.Json.JsonValue): ProjectDeleted {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new ProjectDeleted();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.Project.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: ProjectDeleted): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return ProjectDeleted.toJson(this);
    }
}

export class ParameterCreated extends Notification implements IActor, IData<DbProtocol.Parameter> {
    kind: NotificationKind = NotificationKind.ParameterCreated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.Parameter;

    static fromJson(json: Igor.Json.JsonValue): ParameterCreated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new ParameterCreated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.Parameter.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: ParameterCreated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return ParameterCreated.toJson(this);
    }
}

export class ParameterUpdated extends Notification implements IActor, IData<DbProtocol.Parameter> {
    kind: NotificationKind = NotificationKind.ParameterUpdated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.Parameter;

    static fromJson(json: Igor.Json.JsonValue): ParameterUpdated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new ParameterUpdated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.Parameter.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: ParameterUpdated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return ParameterUpdated.toJson(this);
    }
}

export class ParameterDeleted extends Notification implements IActor, IData<DbProtocol.Parameter> {
    kind: NotificationKind = NotificationKind.ParameterDeleted;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.Parameter;

    static fromJson(json: Igor.Json.JsonValue): ParameterDeleted {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new ParameterDeleted();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.Parameter.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: ParameterDeleted): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return ParameterDeleted.toJson(this);
    }
}

export class SetupStepCreated extends Notification implements IActor, IData<DbProtocol.SetupStep> {
    kind: NotificationKind = NotificationKind.SetupStepCreated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.SetupStep;

    static fromJson(json: Igor.Json.JsonValue): SetupStepCreated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new SetupStepCreated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.SetupStep.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: SetupStepCreated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return SetupStepCreated.toJson(this);
    }
}

export class SetupStepUpdated extends Notification implements IActor, IData<DbProtocol.SetupStep> {
    kind: NotificationKind = NotificationKind.SetupStepUpdated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.SetupStep;

    static fromJson(json: Igor.Json.JsonValue): SetupStepUpdated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new SetupStepUpdated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.SetupStep.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: SetupStepUpdated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return SetupStepUpdated.toJson(this);
    }
}

export class SetupStepDeleted extends Notification implements IActor, IData<DbProtocol.SetupStep> {
    kind: NotificationKind = NotificationKind.SetupStepDeleted;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.SetupStep;

    static fromJson(json: Igor.Json.JsonValue): SetupStepDeleted {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new SetupStepDeleted();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.SetupStep.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: SetupStepDeleted): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return SetupStepDeleted.toJson(this);
    }
}

export class TestCaseCreated extends Notification implements IActor, IData<DbProtocol.TestCase> {
    kind: NotificationKind = NotificationKind.TestCaseCreated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestCase;

    static fromJson(json: Igor.Json.JsonValue): TestCaseCreated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestCaseCreated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestCase.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestCaseCreated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestCaseCreated.toJson(this);
    }
}

export class TestCaseUpdated extends Notification implements IActor, IData<DbProtocol.TestCase> {
    kind: NotificationKind = NotificationKind.TestCaseUpdated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestCase;

    static fromJson(json: Igor.Json.JsonValue): TestCaseUpdated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestCaseUpdated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestCase.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestCaseUpdated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestCaseUpdated.toJson(this);
    }
}

export class TestCaseDeleted extends Notification implements IActor, IData<DbProtocol.TestCase> {
    kind: NotificationKind = NotificationKind.TestCaseDeleted;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestCase;

    static fromJson(json: Igor.Json.JsonValue): TestCaseDeleted {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestCaseDeleted();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestCase.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestCaseDeleted): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestCaseDeleted.toJson(this);
    }
}

export class TestRunCreated extends Notification implements IActor, IData<DbProtocol.TestRun> {
    kind: NotificationKind = NotificationKind.TestRunCreated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRun;

    static fromJson(json: Igor.Json.JsonValue): TestRunCreated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestRunCreated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRun.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestRunCreated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestRunCreated.toJson(this);
    }
}

export class TestRunUpdated extends Notification implements IActor, IData<DbProtocol.TestRun> {
    kind: NotificationKind = NotificationKind.TestRunUpdated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRun;

    static fromJson(json: Igor.Json.JsonValue): TestRunUpdated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestRunUpdated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRun.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestRunUpdated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestRunUpdated.toJson(this);
    }
}

export class TestRunStarted extends Notification implements IActor, IData<DbProtocol.TestRun> {
    kind: NotificationKind = NotificationKind.TestRunStarted;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRun;

    static fromJson(json: Igor.Json.JsonValue): TestRunStarted {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestRunStarted();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRun.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestRunStarted): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestRunStarted.toJson(this);
    }
}

export class TestRunClosed extends Notification implements IActor, IData<DbProtocol.TestRun> {
    kind: NotificationKind = NotificationKind.TestRunClosed;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRun;

    static fromJson(json: Igor.Json.JsonValue): TestRunClosed {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestRunClosed();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRun.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestRunClosed): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestRunClosed.toJson(this);
    }
}

export class TestRunReopened extends Notification implements IActor, IData<DbProtocol.TestRun> {
    kind: NotificationKind = NotificationKind.TestRunReopened;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRun;

    static fromJson(json: Igor.Json.JsonValue): TestRunReopened {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestRunReopened();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRun.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestRunReopened): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestRunReopened.toJson(this);
    }
}

export class TestRunDeleted extends Notification implements IActor, IData<DbProtocol.TestRun> {
    kind: NotificationKind = NotificationKind.TestRunDeleted;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRun;

    static fromJson(json: Igor.Json.JsonValue): TestRunDeleted {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestRunDeleted();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRun.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestRunDeleted): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestRunDeleted.toJson(this);
    }
}

export class TestCreated extends Notification implements IActor, IData<DbProtocol.TestRunItem> {
    kind: NotificationKind = NotificationKind.TestCreated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRunItem;

    static fromJson(json: Igor.Json.JsonValue): TestCreated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestCreated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRunItem.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestCreated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestCreated.toJson(this);
    }
}

export class TestUpdated extends Notification implements IActor, IData<DbProtocol.TestRunItem> {
    kind: NotificationKind = NotificationKind.TestUpdated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRunItem;

    static fromJson(json: Igor.Json.JsonValue): TestUpdated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestUpdated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRunItem.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestUpdated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestUpdated.toJson(this);
    }
}

export class TestStarted extends Notification implements IActor, IData<DbProtocol.TestRunItem> {
    kind: NotificationKind = NotificationKind.TestStarted;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRunItem;

    static fromJson(json: Igor.Json.JsonValue): TestStarted {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestStarted();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRunItem.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestStarted): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestStarted.toJson(this);
    }
}

export class TestPassed extends Notification implements IActor, IData<DbProtocol.TestRunItem> {
    kind: NotificationKind = NotificationKind.TestPassed;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRunItem;

    static fromJson(json: Igor.Json.JsonValue): TestPassed {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestPassed();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRunItem.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestPassed): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestPassed.toJson(this);
    }
}

export class TestFailed extends Notification implements IActor, IData<DbProtocol.TestRunItem> {
    kind: NotificationKind = NotificationKind.TestFailed;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRunItem;

    static fromJson(json: Igor.Json.JsonValue): TestFailed {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestFailed();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRunItem.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestFailed): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestFailed.toJson(this);
    }
}

export class TestBlocked extends Notification implements IActor, IData<DbProtocol.TestRunItem> {
    kind: NotificationKind = NotificationKind.TestBlocked;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRunItem;

    static fromJson(json: Igor.Json.JsonValue): TestBlocked {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestBlocked();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRunItem.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestBlocked): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestBlocked.toJson(this);
    }
}

export class TestReopened extends Notification implements IActor, IData<DbProtocol.TestRunItem> {
    kind: NotificationKind = NotificationKind.TestReopened;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRunItem;

    static fromJson(json: Igor.Json.JsonValue): TestReopened {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestReopened();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRunItem.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestReopened): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestReopened.toJson(this);
    }
}

export class TestDeleted extends Notification implements IActor, IData<DbProtocol.TestRunItem> {
    kind: NotificationKind = NotificationKind.TestDeleted;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.TestRunItem;

    static fromJson(json: Igor.Json.JsonValue): TestDeleted {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestDeleted();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.TestRunItem.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: TestDeleted): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestDeleted.toJson(this);
    }
}

export class AttachmentLinked extends Notification implements IActor {
    kind: NotificationKind = NotificationKind.AttachmentLinked;
    actorId!: number;
    actorName!: string;
    attachment!: DbProtocol.FileAttachment;
    link!: DbProtocol.FileAttachmentLink;

    static fromJson(json: Igor.Json.JsonValue): AttachmentLinked {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new AttachmentLinked();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.attachment = DbProtocol.FileAttachment.fromJson(jsonObject['attachment']);
        obj.link = DbProtocol.FileAttachmentLink.fromJson(jsonObject['link']);
        return obj;
    }

    static toJson(value: AttachmentLinked): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['attachment'] = value.attachment.toJson();
        result['link'] = value.link.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return AttachmentLinked.toJson(this);
    }
}

export class AttachmentUnlinked extends Notification implements IActor {
    kind: NotificationKind = NotificationKind.AttachmentUnlinked;
    actorId!: number;
    actorName!: string;
    attachment!: DbProtocol.FileAttachment;
    link!: DbProtocol.FileAttachmentLink;

    static fromJson(json: Igor.Json.JsonValue): AttachmentUnlinked {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new AttachmentUnlinked();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.attachment = DbProtocol.FileAttachment.fromJson(jsonObject['attachment']);
        obj.link = DbProtocol.FileAttachmentLink.fromJson(jsonObject['link']);
        return obj;
    }

    static toJson(value: AttachmentUnlinked): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['attachment'] = value.attachment.toJson();
        result['link'] = value.link.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return AttachmentUnlinked.toJson(this);
    }
}

export class JiraInstanceCreated extends Notification implements IActor, IData<DbProtocol.JiraInstance> {
    kind: NotificationKind = NotificationKind.JiraInstanceCreated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.JiraInstance;

    static fromJson(json: Igor.Json.JsonValue): JiraInstanceCreated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new JiraInstanceCreated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.JiraInstance.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: JiraInstanceCreated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return JiraInstanceCreated.toJson(this);
    }
}

export class JiraInstanceUpdated extends Notification implements IActor, IData<DbProtocol.JiraInstance> {
    kind: NotificationKind = NotificationKind.JiraInstanceUpdated;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.JiraInstance;

    static fromJson(json: Igor.Json.JsonValue): JiraInstanceUpdated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new JiraInstanceUpdated();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.JiraInstance.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: JiraInstanceUpdated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return JiraInstanceUpdated.toJson(this);
    }
}

export class JiraInstanceDeleted extends Notification implements IActor, IData<DbProtocol.JiraInstance> {
    kind: NotificationKind = NotificationKind.JiraInstanceDeleted;
    actorId!: number;
    actorName!: string;
    data!: DbProtocol.JiraInstance;

    static fromJson(json: Igor.Json.JsonValue): JiraInstanceDeleted {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new JiraInstanceDeleted();
        obj.actorId = jsonObject['actor_id'] as number;
        obj.actorName = jsonObject['actor_name'] as string;
        obj.data = DbProtocol.JiraInstance.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: JiraInstanceDeleted): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['actor_id'] = value.actorId;
        result['actor_name'] = value.actorName;
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return JiraInstanceDeleted.toJson(this);
    }
}
