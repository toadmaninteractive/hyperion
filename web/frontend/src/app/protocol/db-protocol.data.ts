// Author: Igor compiler
// Compiler version: igorc 2.1.1
// DO NOT EDIT THIS FILE - it is machine generated

import * as Igor from './igor';
import * as CommonProtocol from './common-protocol.data';

export enum AccessRole {
    /** Consumer */
    Consumer = 1,
    /** Maintainer */
    Maintainer = 2,
    /** Administrator */
    Admin = 3,
}

export namespace AccessRole {
    export function toJson(value: AccessRole): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): AccessRole {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: AccessRole): Igor.Json.JsonValue {
        switch (value) {
            case AccessRole.Consumer: return 'consumer';
            case AccessRole.Maintainer: return 'maintainer';
            case AccessRole.Admin: return 'admin';
            default: throw new Error(`Invalid AccessRole value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): AccessRole {
        switch (json) {
            case 'consumer': return AccessRole.Consumer;
            case 'maintainer': return AccessRole.Maintainer;
            case 'admin': return AccessRole.Admin;
            default: throw new Error(`Invalid AccessRole value: ${json}`);
        }
    }

    export function getDescription(value: AccessRole): string {
        switch (value) {
            case AccessRole.Consumer: return 'Consumer';
            case AccessRole.Maintainer: return 'Maintainer';
            case AccessRole.Admin: return 'Administrator';
            default: return '';
        }
    }
}

export enum TestRunStatus {
    /** Draft */
    Draft = 1,
    /** In progress */
    InProgress = 2,
    /** Closed */
    Closed = 3,
}

export namespace TestRunStatus {
    export function toJson(value: TestRunStatus): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): TestRunStatus {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: TestRunStatus): Igor.Json.JsonValue {
        switch (value) {
            case TestRunStatus.Draft: return 'draft';
            case TestRunStatus.InProgress: return 'in_progress';
            case TestRunStatus.Closed: return 'closed';
            default: throw new Error(`Invalid TestRunStatus value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): TestRunStatus {
        switch (json) {
            case 'draft': return TestRunStatus.Draft;
            case 'in_progress': return TestRunStatus.InProgress;
            case 'closed': return TestRunStatus.Closed;
            default: throw new Error(`Invalid TestRunStatus value: ${json}`);
        }
    }

    export function getDescription(value: TestRunStatus): string {
        switch (value) {
            case TestRunStatus.Draft: return 'Draft';
            case TestRunStatus.InProgress: return 'In progress';
            case TestRunStatus.Closed: return 'Closed';
            default: return '';
        }
    }
}

export enum TestStatus {
    /** Pending */
    Pending = 1,
    /** In progress */
    InProgress = 2,
    /** Passed */
    Passed = 3,
    /** Failed */
    Failed = 4,
    /** Blocked */
    Blocked = 5,
}

export namespace TestStatus {
    export function toJson(value: TestStatus): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): TestStatus {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: TestStatus): Igor.Json.JsonValue {
        switch (value) {
            case TestStatus.Pending: return 'pending';
            case TestStatus.InProgress: return 'in_progress';
            case TestStatus.Passed: return 'passed';
            case TestStatus.Failed: return 'failed';
            case TestStatus.Blocked: return 'blocked';
            default: throw new Error(`Invalid TestStatus value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): TestStatus {
        switch (json) {
            case 'pending': return TestStatus.Pending;
            case 'in_progress': return TestStatus.InProgress;
            case 'passed': return TestStatus.Passed;
            case 'failed': return TestStatus.Failed;
            case 'blocked': return TestStatus.Blocked;
            default: throw new Error(`Invalid TestStatus value: ${json}`);
        }
    }

    export function getDescription(value: TestStatus): string {
        switch (value) {
            case TestStatus.Pending: return 'Pending';
            case TestStatus.InProgress: return 'In progress';
            case TestStatus.Passed: return 'Passed';
            case TestStatus.Failed: return 'Failed';
            case TestStatus.Blocked: return 'Blocked';
            default: return '';
        }
    }
}

export enum AttachmentOwner {
    SetupStep = 1,
    TestCase = 2,
    TestRun = 3,
    TestRunItem = 4,
}

export namespace AttachmentOwner {
    export function toJson(value: AttachmentOwner): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): AttachmentOwner {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: AttachmentOwner): Igor.Json.JsonValue {
        switch (value) {
            case AttachmentOwner.SetupStep: return 'setup_step';
            case AttachmentOwner.TestCase: return 'test_case';
            case AttachmentOwner.TestRun: return 'test_run';
            case AttachmentOwner.TestRunItem: return 'test_run_item';
            default: throw new Error(`Invalid AttachmentOwner value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): AttachmentOwner {
        switch (json) {
            case 'setup_step': return AttachmentOwner.SetupStep;
            case 'test_case': return AttachmentOwner.TestCase;
            case 'test_run': return AttachmentOwner.TestRun;
            case 'test_run_item': return AttachmentOwner.TestRunItem;
            default: throw new Error(`Invalid AttachmentOwner value: ${json}`);
        }
    }

    export function getDescription(value: AttachmentOwner): string {
        switch (value) {
            case AttachmentOwner.SetupStep: return '';
            case AttachmentOwner.TestCase: return '';
            case AttachmentOwner.TestRun: return '';
            case AttachmentOwner.TestRunItem: return '';
            default: return '';
        }
    }
}

export enum SpecType {
    Value = 1,
    Source = 2,
    Any = 3,
    Random = 4,
}

export namespace SpecType {
    export function toJson(value: SpecType): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): SpecType {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: SpecType): Igor.Json.JsonValue {
        switch (value) {
            case SpecType.Value: return 'value';
            case SpecType.Source: return 'source';
            case SpecType.Any: return 'any';
            case SpecType.Random: return 'random';
            default: throw new Error(`Invalid SpecType value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): SpecType {
        switch (json) {
            case 'value': return SpecType.Value;
            case 'source': return SpecType.Source;
            case 'any': return SpecType.Any;
            case 'random': return SpecType.Random;
            default: throw new Error(`Invalid SpecType value: ${json}`);
        }
    }

    export function getDescription(value: SpecType): string {
        switch (value) {
            case SpecType.Value: return '';
            case SpecType.Source: return '';
            case SpecType.Any: return '';
            case SpecType.Random: return '';
            default: return '';
        }
    }
}

export class PersonnelAccount {
    id!: number;
    rev!: number;
    username!: string;
    name?: string | null = null;
    email?: string | null = null;
    phone?: string | null = null;
    isBlocked!: boolean;
    isDeleted!: boolean;
    isSuperadmin!: boolean;
    createdAt!: Date;
    updatedAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): PersonnelAccount {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new PersonnelAccount();
        obj.id = jsonObject['id'] as number;
        obj.rev = jsonObject['rev'] as number;
        obj.username = jsonObject['username'] as string;
        obj.name = ('name' in jsonObject && jsonObject['name'] != null) ? jsonObject['name'] as string : null;
        obj.email = ('email' in jsonObject && jsonObject['email'] != null) ? jsonObject['email'] as string : null;
        obj.phone = ('phone' in jsonObject && jsonObject['phone'] != null) ? jsonObject['phone'] as string : null;
        obj.isBlocked = jsonObject['is_blocked'] as boolean;
        obj.isDeleted = jsonObject['is_deleted'] as boolean;
        obj.isSuperadmin = jsonObject['is_superadmin'] as boolean;
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        return obj;
    }

    static toJson(value: PersonnelAccount): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['rev'] = value.rev;
        result['username'] = value.username;
        if (value.name != null) result['name'] = value.name;
        if (value.email != null) result['email'] = value.email;
        if (value.phone != null) result['phone'] = value.phone;
        result['is_blocked'] = value.isBlocked;
        result['is_deleted'] = value.isDeleted;
        result['is_superadmin'] = value.isSuperadmin;
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return PersonnelAccount.toJson(this);
    }
}

export class PersonnelAccountProfile {
    id!: number;
    rev!: number;
    username!: string;
    name?: string | null = null;
    email?: string | null = null;
    phone?: string | null = null;
    isBlocked!: boolean;
    isDeleted!: boolean;
    isProjectManager!: boolean;
    isSuperadmin!: boolean;
    createdAt!: Date;
    updatedAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): PersonnelAccountProfile {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new PersonnelAccountProfile();
        obj.id = jsonObject['id'] as number;
        obj.rev = jsonObject['rev'] as number;
        obj.username = jsonObject['username'] as string;
        obj.name = ('name' in jsonObject && jsonObject['name'] != null) ? jsonObject['name'] as string : null;
        obj.email = ('email' in jsonObject && jsonObject['email'] != null) ? jsonObject['email'] as string : null;
        obj.phone = ('phone' in jsonObject && jsonObject['phone'] != null) ? jsonObject['phone'] as string : null;
        obj.isBlocked = jsonObject['is_blocked'] as boolean;
        obj.isDeleted = jsonObject['is_deleted'] as boolean;
        obj.isProjectManager = jsonObject['is_project_manager'] as boolean;
        obj.isSuperadmin = jsonObject['is_superadmin'] as boolean;
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        return obj;
    }

    static toJson(value: PersonnelAccountProfile): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['rev'] = value.rev;
        result['username'] = value.username;
        if (value.name != null) result['name'] = value.name;
        if (value.email != null) result['email'] = value.email;
        if (value.phone != null) result['phone'] = value.phone;
        result['is_blocked'] = value.isBlocked;
        result['is_deleted'] = value.isDeleted;
        result['is_project_manager'] = value.isProjectManager;
        result['is_superadmin'] = value.isSuperadmin;
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return PersonnelAccountProfile.toJson(this);
    }
}

export class PersonnelAccountRole {
    personnelId!: number;
    username!: string;
    projectId!: number;
    projectTitle!: string;
    groupRoles?: Igor.Json.JsonValue | null = null;
    userRole?: AccessRole | null = null;

    static fromJson(json: Igor.Json.JsonValue): PersonnelAccountRole {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new PersonnelAccountRole();
        obj.personnelId = jsonObject['personnel_id'] as number;
        obj.username = jsonObject['username'] as string;
        obj.projectId = jsonObject['project_id'] as number;
        obj.projectTitle = jsonObject['project_title'] as string;
        obj.groupRoles = ('group_roles' in jsonObject && jsonObject['group_roles'] != null) ? jsonObject['group_roles'] : null;
        obj.userRole = ('user_role' in jsonObject && jsonObject['user_role'] != null) ? AccessRole.fromJson(jsonObject['user_role']) : null;
        return obj;
    }

    static toJson(value: PersonnelAccountRole): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['personnel_id'] = value.personnelId;
        result['username'] = value.username;
        result['project_id'] = value.projectId;
        result['project_title'] = value.projectTitle;
        if (value.groupRoles != null) result['group_roles'] = value.groupRoles;
        if (value.userRole != null) result['user_role'] = AccessRole.toJson(value.userRole);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return PersonnelAccountRole.toJson(this);
    }
}

export class PersonnelGroup {
    id!: number;
    rev!: number;
    name!: string;
    description?: string | null = null;
    isDeleted!: boolean;
    members!: Array<string>;
    memberCount!: number;
    isSuperadmin!: boolean;
    createdAt!: Date;
    updatedAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): PersonnelGroup {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new PersonnelGroup();
        obj.id = jsonObject['id'] as number;
        obj.rev = jsonObject['rev'] as number;
        obj.name = jsonObject['name'] as string;
        obj.description = ('description' in jsonObject && jsonObject['description'] != null) ? jsonObject['description'] as string : null;
        obj.isDeleted = jsonObject['is_deleted'] as boolean;
        obj.members = Igor.Json.List(Igor.Json.String).fromJson(jsonObject['members']);
        obj.memberCount = jsonObject['member_count'] as number;
        obj.isSuperadmin = jsonObject['is_superadmin'] as boolean;
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        return obj;
    }

    static toJson(value: PersonnelGroup): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['rev'] = value.rev;
        result['name'] = value.name;
        if (value.description != null) result['description'] = value.description;
        result['is_deleted'] = value.isDeleted;
        result['members'] = Igor.Json.List(Igor.Json.String).toJson(value.members);
        result['member_count'] = value.memberCount;
        result['is_superadmin'] = value.isSuperadmin;
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return PersonnelGroup.toJson(this);
    }
}

export class PersonnelGroupRole {
    groupId!: number;
    groupName!: string;
    projectId!: number;
    projectTitle!: string;
    groupRole?: AccessRole | null = null;

    static fromJson(json: Igor.Json.JsonValue): PersonnelGroupRole {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new PersonnelGroupRole();
        obj.groupId = jsonObject['group_id'] as number;
        obj.groupName = jsonObject['group_name'] as string;
        obj.projectId = jsonObject['project_id'] as number;
        obj.projectTitle = jsonObject['project_title'] as string;
        obj.groupRole = ('group_role' in jsonObject && jsonObject['group_role'] != null) ? AccessRole.fromJson(jsonObject['group_role']) : null;
        return obj;
    }

    static toJson(value: PersonnelGroupRole): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['group_id'] = value.groupId;
        result['group_name'] = value.groupName;
        result['project_id'] = value.projectId;
        result['project_title'] = value.projectTitle;
        if (value.groupRole != null) result['group_role'] = AccessRole.toJson(value.groupRole);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return PersonnelGroupRole.toJson(this);
    }
}

export class Project {
    id!: number;
    rev!: number;
    title!: string;
    key!: string;
    slackReceivers?: string | null = null;
    ownerId!: number;
    ownerName!: string;
    jiraId?: number | null = null;
    jiraTitle?: string | null = null;
    jiraUrl?: string | null = null;
    jiraKey?: string | null = null;
    createdAt!: Date;
    updatedAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): Project {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new Project();
        obj.id = jsonObject['id'] as number;
        obj.rev = jsonObject['rev'] as number;
        obj.title = jsonObject['title'] as string;
        obj.key = jsonObject['key'] as string;
        obj.slackReceivers = ('slack_receivers' in jsonObject && jsonObject['slack_receivers'] != null) ? jsonObject['slack_receivers'] as string : null;
        obj.ownerId = jsonObject['owner_id'] as number;
        obj.ownerName = jsonObject['owner_name'] as string;
        obj.jiraId = ('jira_id' in jsonObject && jsonObject['jira_id'] != null) ? jsonObject['jira_id'] as number : null;
        obj.jiraTitle = ('jira_title' in jsonObject && jsonObject['jira_title'] != null) ? jsonObject['jira_title'] as string : null;
        obj.jiraUrl = ('jira_url' in jsonObject && jsonObject['jira_url'] != null) ? jsonObject['jira_url'] as string : null;
        obj.jiraKey = ('jira_key' in jsonObject && jsonObject['jira_key'] != null) ? jsonObject['jira_key'] as string : null;
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        return obj;
    }

    static toJson(value: Project): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['rev'] = value.rev;
        result['title'] = value.title;
        result['key'] = value.key;
        if (value.slackReceivers != null) result['slack_receivers'] = value.slackReceivers;
        result['owner_id'] = value.ownerId;
        result['owner_name'] = value.ownerName;
        if (value.jiraId != null) result['jira_id'] = value.jiraId;
        if (value.jiraTitle != null) result['jira_title'] = value.jiraTitle;
        if (value.jiraUrl != null) result['jira_url'] = value.jiraUrl;
        if (value.jiraKey != null) result['jira_key'] = value.jiraKey;
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return Project.toJson(this);
    }
}

export class SetupStep {
    id!: number;
    rev!: number;
    parentId?: number | null = null;
    projectId!: number;
    title?: string | null = null;
    description?: string | null = null;
    isDraft!: boolean;
    orderNum!: number;
    parameterId?: number | null = null;
    createdAt!: Date;
    updatedAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): SetupStep {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new SetupStep();
        obj.id = jsonObject['id'] as number;
        obj.rev = jsonObject['rev'] as number;
        obj.parentId = ('parent_id' in jsonObject && jsonObject['parent_id'] != null) ? jsonObject['parent_id'] as number : null;
        obj.projectId = jsonObject['project_id'] as number;
        obj.title = ('title' in jsonObject && jsonObject['title'] != null) ? jsonObject['title'] as string : null;
        obj.description = ('description' in jsonObject && jsonObject['description'] != null) ? jsonObject['description'] as string : null;
        obj.isDraft = jsonObject['is_draft'] as boolean;
        obj.orderNum = jsonObject['order_num'] as number;
        obj.parameterId = ('parameter_id' in jsonObject && jsonObject['parameter_id'] != null) ? jsonObject['parameter_id'] as number : null;
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        return obj;
    }

    static toJson(value: SetupStep): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['rev'] = value.rev;
        if (value.parentId != null) result['parent_id'] = value.parentId;
        result['project_id'] = value.projectId;
        if (value.title != null) result['title'] = value.title;
        if (value.description != null) result['description'] = value.description;
        result['is_draft'] = value.isDraft;
        result['order_num'] = value.orderNum;
        if (value.parameterId != null) result['parameter_id'] = value.parameterId;
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return SetupStep.toJson(this);
    }
}

export class TestCaseSpecialization {
    setupId!: number;
    specType!: SpecType;
    value?: string | null = null;
    parameterId?: number | null = null;

    static fromJson(json: Igor.Json.JsonValue): TestCaseSpecialization {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestCaseSpecialization();
        obj.setupId = jsonObject['setup_id'] as number;
        obj.specType = SpecType.fromJson(jsonObject['spec_type']);
        obj.value = ('value' in jsonObject && jsonObject['value'] != null) ? jsonObject['value'] as string : null;
        obj.parameterId = ('parameter_id' in jsonObject && jsonObject['parameter_id'] != null) ? jsonObject['parameter_id'] as number : null;
        return obj;
    }

    static toJson(value: TestCaseSpecialization): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['setup_id'] = value.setupId;
        result['spec_type'] = SpecType.toJson(value.specType);
        if (value.value != null) result['value'] = value.value;
        if (value.parameterId != null) result['parameter_id'] = value.parameterId;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestCaseSpecialization.toJson(this);
    }
}

export class TestCase {
    id!: number;
    rev!: number;
    parentId?: number | null = null;
    projectId!: number;
    preconditionId?: number | null = null;
    setupId?: number | null = null;
    isGroup!: boolean;
    title?: string | null = null;
    description?: string | null = null;
    testSteps!: string;
    expectedResult!: string;
    isDraft!: boolean;
    orderNum!: number;
    specs: Array<TestCaseSpecialization> = [];
    createdAt!: Date;
    updatedAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): TestCase {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestCase();
        obj.id = jsonObject['id'] as number;
        obj.rev = jsonObject['rev'] as number;
        obj.parentId = ('parent_id' in jsonObject && jsonObject['parent_id'] != null) ? jsonObject['parent_id'] as number : null;
        obj.projectId = jsonObject['project_id'] as number;
        obj.preconditionId = ('precondition_id' in jsonObject && jsonObject['precondition_id'] != null) ? jsonObject['precondition_id'] as number : null;
        obj.setupId = ('setup_id' in jsonObject && jsonObject['setup_id'] != null) ? jsonObject['setup_id'] as number : null;
        obj.isGroup = jsonObject['is_group'] as boolean;
        obj.title = ('title' in jsonObject && jsonObject['title'] != null) ? jsonObject['title'] as string : null;
        obj.description = ('description' in jsonObject && jsonObject['description'] != null) ? jsonObject['description'] as string : null;
        obj.testSteps = jsonObject['test_steps'] as string;
        obj.expectedResult = jsonObject['expected_result'] as string;
        obj.isDraft = jsonObject['is_draft'] as boolean;
        obj.orderNum = jsonObject['order_num'] as number;
        obj.specs = ('specs' in jsonObject && jsonObject['specs'] != null) ? Igor.Json.List(TestCaseSpecialization).fromJson(jsonObject['specs']) : [];
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        return obj;
    }

    static toJson(value: TestCase): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['rev'] = value.rev;
        if (value.parentId != null) result['parent_id'] = value.parentId;
        result['project_id'] = value.projectId;
        if (value.preconditionId != null) result['precondition_id'] = value.preconditionId;
        if (value.setupId != null) result['setup_id'] = value.setupId;
        result['is_group'] = value.isGroup;
        if (value.title != null) result['title'] = value.title;
        if (value.description != null) result['description'] = value.description;
        result['test_steps'] = value.testSteps;
        result['expected_result'] = value.expectedResult;
        result['is_draft'] = value.isDraft;
        result['order_num'] = value.orderNum;
        result['specs'] = Igor.Json.List(TestCaseSpecialization).toJson(value.specs);
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestCase.toJson(this);
    }
}

export class TestRun {
    id!: number;
    rev!: number;
    projectId!: number;
    title?: string | null = null;
    status!: TestRunStatus;
    createdAt!: Date;
    updatedAt!: Date;
    startedAt?: Date | null = null;
    finishedAt?: Date | null = null;
    totalItemCount!: number;
    pendingItemCount!: number;
    inProgressItemCount!: number;
    passedItemCount!: number;
    failedItemCount!: number;
    blockedItemCount!: number;

    static fromJson(json: Igor.Json.JsonValue): TestRun {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestRun();
        obj.id = jsonObject['id'] as number;
        obj.rev = jsonObject['rev'] as number;
        obj.projectId = jsonObject['project_id'] as number;
        obj.title = ('title' in jsonObject && jsonObject['title'] != null) ? jsonObject['title'] as string : null;
        obj.status = TestRunStatus.fromJson(jsonObject['status']);
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        obj.startedAt = ('started_at' in jsonObject && jsonObject['started_at'] != null) ? Igor.Json.DateTimeSerializer.fromJson(jsonObject['started_at']) : null;
        obj.finishedAt = ('finished_at' in jsonObject && jsonObject['finished_at'] != null) ? Igor.Json.DateTimeSerializer.fromJson(jsonObject['finished_at']) : null;
        obj.totalItemCount = jsonObject['total_item_count'] as number;
        obj.pendingItemCount = jsonObject['pending_item_count'] as number;
        obj.inProgressItemCount = jsonObject['in_progress_item_count'] as number;
        obj.passedItemCount = jsonObject['passed_item_count'] as number;
        obj.failedItemCount = jsonObject['failed_item_count'] as number;
        obj.blockedItemCount = jsonObject['blocked_item_count'] as number;
        return obj;
    }

    static toJson(value: TestRun): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['rev'] = value.rev;
        result['project_id'] = value.projectId;
        if (value.title != null) result['title'] = value.title;
        result['status'] = TestRunStatus.toJson(value.status);
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        if (value.startedAt != null) result['started_at'] = Igor.Json.DateTimeSerializer.toJson(value.startedAt);
        if (value.finishedAt != null) result['finished_at'] = Igor.Json.DateTimeSerializer.toJson(value.finishedAt);
        result['total_item_count'] = value.totalItemCount;
        result['pending_item_count'] = value.pendingItemCount;
        result['in_progress_item_count'] = value.inProgressItemCount;
        result['passed_item_count'] = value.passedItemCount;
        result['failed_item_count'] = value.failedItemCount;
        result['blocked_item_count'] = value.blockedItemCount;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestRun.toJson(this);
    }
}

export class SpecializedSetup {
    setupId!: number;
    param!: string;
    value!: string;

    static fromJson(json: Igor.Json.JsonValue): SpecializedSetup {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new SpecializedSetup();
        obj.setupId = jsonObject['setup_id'] as number;
        obj.param = jsonObject['param'] as string;
        obj.value = jsonObject['value'] as string;
        return obj;
    }

    static toJson(value: SpecializedSetup): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['setup_id'] = value.setupId;
        result['param'] = value.param;
        result['value'] = value.value;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return SpecializedSetup.toJson(this);
    }
}

export class TestRunItemParams {
    setupSteps: Array<number> = [];
    specs: Array<SpecializedSetup> = [];

    static fromJson(json: Igor.Json.JsonValue): TestRunItemParams {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestRunItemParams();
        obj.setupSteps = ('setup_steps' in jsonObject && jsonObject['setup_steps'] != null) ? Igor.Json.List(Igor.Json.Number).fromJson(jsonObject['setup_steps']) : [];
        obj.specs = ('specs' in jsonObject && jsonObject['specs'] != null) ? Igor.Json.List(SpecializedSetup).fromJson(jsonObject['specs']) : [];
        return obj;
    }

    static toJson(value: TestRunItemParams): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['setup_steps'] = Igor.Json.List(Igor.Json.Number).toJson(value.setupSteps);
        result['specs'] = Igor.Json.List(SpecializedSetup).toJson(value.specs);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestRunItemParams.toJson(this);
    }
}

export class TestRunItem {
    id!: number;
    rev!: number;
    runId!: number;
    caseId!: number;
    reporterId!: number;
    reporterName!: string;
    assigneeId?: number | null = null;
    assigneeName?: string | null = null;
    status!: TestStatus;
    summary?: string | null = null;
    failedSetupId?: number | null = null;
    orderNum!: number;
    params!: TestRunItemParams;
    jiraIssueKey?: string | null = null;
    jiraIssueUrl?: string | null = null;
    createdAt!: Date;
    updatedAt!: Date;
    startedAt?: Date | null = null;
    finishedAt?: Date | null = null;

    static fromJson(json: Igor.Json.JsonValue): TestRunItem {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new TestRunItem();
        obj.id = jsonObject['id'] as number;
        obj.rev = jsonObject['rev'] as number;
        obj.runId = jsonObject['run_id'] as number;
        obj.caseId = jsonObject['case_id'] as number;
        obj.reporterId = jsonObject['reporter_id'] as number;
        obj.reporterName = jsonObject['reporter_name'] as string;
        obj.assigneeId = ('assignee_id' in jsonObject && jsonObject['assignee_id'] != null) ? jsonObject['assignee_id'] as number : null;
        obj.assigneeName = ('assignee_name' in jsonObject && jsonObject['assignee_name'] != null) ? jsonObject['assignee_name'] as string : null;
        obj.status = TestStatus.fromJson(jsonObject['status']);
        obj.summary = ('summary' in jsonObject && jsonObject['summary'] != null) ? jsonObject['summary'] as string : null;
        obj.failedSetupId = ('failed_setup_id' in jsonObject && jsonObject['failed_setup_id'] != null) ? jsonObject['failed_setup_id'] as number : null;
        obj.orderNum = jsonObject['order_num'] as number;
        obj.params = TestRunItemParams.fromJson(jsonObject['params']);
        obj.jiraIssueKey = ('jira_issue_key' in jsonObject && jsonObject['jira_issue_key'] != null) ? jsonObject['jira_issue_key'] as string : null;
        obj.jiraIssueUrl = ('jira_issue_url' in jsonObject && jsonObject['jira_issue_url'] != null) ? jsonObject['jira_issue_url'] as string : null;
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        obj.startedAt = ('started_at' in jsonObject && jsonObject['started_at'] != null) ? Igor.Json.DateTimeSerializer.fromJson(jsonObject['started_at']) : null;
        obj.finishedAt = ('finished_at' in jsonObject && jsonObject['finished_at'] != null) ? Igor.Json.DateTimeSerializer.fromJson(jsonObject['finished_at']) : null;
        return obj;
    }

    static toJson(value: TestRunItem): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['rev'] = value.rev;
        result['run_id'] = value.runId;
        result['case_id'] = value.caseId;
        result['reporter_id'] = value.reporterId;
        result['reporter_name'] = value.reporterName;
        if (value.assigneeId != null) result['assignee_id'] = value.assigneeId;
        if (value.assigneeName != null) result['assignee_name'] = value.assigneeName;
        result['status'] = TestStatus.toJson(value.status);
        if (value.summary != null) result['summary'] = value.summary;
        if (value.failedSetupId != null) result['failed_setup_id'] = value.failedSetupId;
        result['order_num'] = value.orderNum;
        result['params'] = value.params.toJson();
        if (value.jiraIssueKey != null) result['jira_issue_key'] = value.jiraIssueKey;
        if (value.jiraIssueUrl != null) result['jira_issue_url'] = value.jiraIssueUrl;
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        if (value.startedAt != null) result['started_at'] = Igor.Json.DateTimeSerializer.toJson(value.startedAt);
        if (value.finishedAt != null) result['finished_at'] = Igor.Json.DateTimeSerializer.toJson(value.finishedAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return TestRunItem.toJson(this);
    }
}

export class FileAttachment {
    id!: number;
    fileSize!: number;
    fileSha!: string;
    filename!: string;
    thumbFilename?: string | null = null;
    originalFilename?: string | null = null;
    contentType?: string | null = null;
    personnelId!: number;
    personnelName!: string;
    createdAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): FileAttachment {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new FileAttachment();
        obj.id = jsonObject['id'] as number;
        obj.fileSize = jsonObject['file_size'] as number;
        obj.fileSha = jsonObject['file_sha'] as string;
        obj.filename = jsonObject['filename'] as string;
        obj.thumbFilename = ('thumb_filename' in jsonObject && jsonObject['thumb_filename'] != null) ? jsonObject['thumb_filename'] as string : null;
        obj.originalFilename = ('original_filename' in jsonObject && jsonObject['original_filename'] != null) ? jsonObject['original_filename'] as string : null;
        obj.contentType = ('content_type' in jsonObject && jsonObject['content_type'] != null) ? jsonObject['content_type'] as string : null;
        obj.personnelId = jsonObject['personnel_id'] as number;
        obj.personnelName = jsonObject['personnel_name'] as string;
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        return obj;
    }

    static toJson(value: FileAttachment): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['file_size'] = value.fileSize;
        result['file_sha'] = value.fileSha;
        result['filename'] = value.filename;
        if (value.thumbFilename != null) result['thumb_filename'] = value.thumbFilename;
        if (value.originalFilename != null) result['original_filename'] = value.originalFilename;
        if (value.contentType != null) result['content_type'] = value.contentType;
        result['personnel_id'] = value.personnelId;
        result['personnel_name'] = value.personnelName;
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return FileAttachment.toJson(this);
    }
}

export class FileAttachmentLink {
    attachmentId!: number;
    owner!: AttachmentOwner;
    linkedId!: number;
    projectId!: number;
    personnelId!: number;
    personnelName!: string;
    createdAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): FileAttachmentLink {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new FileAttachmentLink();
        obj.attachmentId = jsonObject['attachment_id'] as number;
        obj.owner = AttachmentOwner.fromJson(jsonObject['owner']);
        obj.linkedId = jsonObject['linked_id'] as number;
        obj.projectId = jsonObject['project_id'] as number;
        obj.personnelId = jsonObject['personnel_id'] as number;
        obj.personnelName = jsonObject['personnel_name'] as string;
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        return obj;
    }

    static toJson(value: FileAttachmentLink): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['attachment_id'] = value.attachmentId;
        result['owner'] = AttachmentOwner.toJson(value.owner);
        result['linked_id'] = value.linkedId;
        result['project_id'] = value.projectId;
        result['personnel_id'] = value.personnelId;
        result['personnel_name'] = value.personnelName;
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return FileAttachmentLink.toJson(this);
    }
}

export class ParameterValue {
    value!: string;
    dependentValue?: string | null = null;

    static fromJson(json: Igor.Json.JsonValue): ParameterValue {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new ParameterValue();
        obj.value = jsonObject['value'] as string;
        obj.dependentValue = ('dependent_value' in jsonObject && jsonObject['dependent_value'] != null) ? jsonObject['dependent_value'] as string : null;
        return obj;
    }

    static toJson(value: ParameterValue): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['value'] = value.value;
        if (value.dependentValue != null) result['dependent_value'] = value.dependentValue;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return ParameterValue.toJson(this);
    }
}

export class Parameter {
    id!: number;
    rev!: number;
    projectId!: number;
    parentId?: number | null = null;
    dependentId?: number | null = null;
    title!: string;
    values: Array<ParameterValue> = [];
    createdAt!: Date;
    updatedAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): Parameter {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new Parameter();
        obj.id = jsonObject['id'] as number;
        obj.rev = jsonObject['rev'] as number;
        obj.projectId = jsonObject['project_id'] as number;
        obj.parentId = ('parent_id' in jsonObject && jsonObject['parent_id'] != null) ? jsonObject['parent_id'] as number : null;
        obj.dependentId = ('dependent_id' in jsonObject && jsonObject['dependent_id'] != null) ? jsonObject['dependent_id'] as number : null;
        obj.title = jsonObject['title'] as string;
        obj.values = ('values' in jsonObject && jsonObject['values'] != null) ? Igor.Json.List(ParameterValue).fromJson(jsonObject['values']) : [];
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        return obj;
    }

    static toJson(value: Parameter): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['rev'] = value.rev;
        result['project_id'] = value.projectId;
        if (value.parentId != null) result['parent_id'] = value.parentId;
        if (value.dependentId != null) result['dependent_id'] = value.dependentId;
        result['title'] = value.title;
        result['values'] = Igor.Json.List(ParameterValue).toJson(value.values);
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return Parameter.toJson(this);
    }
}

export class JiraInstance {
    id!: number;
    title!: string;
    url!: string;
    createdAt!: Date;
    updatedAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): JiraInstance {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new JiraInstance();
        obj.id = jsonObject['id'] as number;
        obj.title = jsonObject['title'] as string;
        obj.url = jsonObject['url'] as string;
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        return obj;
    }

    static toJson(value: JiraInstance): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['id'] = value.id;
        result['title'] = value.title;
        result['url'] = value.url;
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return JiraInstance.toJson(this);
    }
}

export class JiraAuth {
    jiraId!: number;
    personnelId!: number;
    username!: string;
    authToken!: string;
    createdAt!: Date;
    updatedAt!: Date;

    static fromJson(json: Igor.Json.JsonValue): JiraAuth {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new JiraAuth();
        obj.jiraId = jsonObject['jira_id'] as number;
        obj.personnelId = jsonObject['personnel_id'] as number;
        obj.username = jsonObject['username'] as string;
        obj.authToken = jsonObject['auth_token'] as string;
        obj.createdAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['created_at']);
        obj.updatedAt = Igor.Json.DateTimeSerializer.fromJson(jsonObject['updated_at']);
        return obj;
    }

    static toJson(value: JiraAuth): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['jira_id'] = value.jiraId;
        result['personnel_id'] = value.personnelId;
        result['username'] = value.username;
        result['auth_token'] = value.authToken;
        result['created_at'] = Igor.Json.DateTimeSerializer.toJson(value.createdAt);
        result['updated_at'] = Igor.Json.DateTimeSerializer.toJson(value.updatedAt);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return JiraAuth.toJson(this);
    }
}
