// Author: Igor compiler
// Compiler version: igorc 2.1.1
// DO NOT EDIT THIS FILE - it is machine generated

import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as Igor from './igor';
import * as DataProtocol from './data-protocol.data';
import * as DbProtocol from './db-protocol.data';
import * as SetupProtocol from './setup-protocol.data';
import * as CommonProtocol from './common-protocol.data';

@Injectable({
    providedIn: 'root',
})
export class HyperionSetupService {
    public baseUrl = '';

    constructor(private http: HttpClient) { }

    public getSetup(projectId: number): Observable<DataProtocol.Collection<DataProtocol.TreeNode<DbProtocol.SetupStep>>> {
        return this.http
            .get(`${this.baseUrl}/api/setup/${projectId}`)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DataProtocol.Collection.instanceJsonSerializer<DataProtocol.TreeNode<DbProtocol.SetupStep>>(DataProtocol.TreeNode.instanceJsonSerializer<DbProtocol.SetupStep>(DbProtocol.SetupStep)).fromJson(response as Igor.Json.JsonValue))
            );
    }

    public getSetupStep(id: number): Observable<DbProtocol.SetupStep> {
        return this.http
            .get(`${this.baseUrl}/api/setup/steps/${id}`)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 404: return throwError(DataProtocol.NotFoundError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DbProtocol.SetupStep.fromJson(response as Igor.Json.JsonValue))
            );
    }

    public createSetupStep(request: SetupProtocol.CreateSetupStepRequest, projectId: number): Observable<DbProtocol.SetupStep> {
        const options = { headers: new HttpHeaders({'Content-Type': 'application/json' }) };

        return this.http
            .post(`${this.baseUrl}/api/setup/steps/new/${projectId}`, request.toJson(), options)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 400: return throwError(DataProtocol.BadRequestError.instanceJsonSerializer<SetupProtocol.SetupError>(SetupProtocol.SetupError).fromJson(response.error));
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DbProtocol.SetupStep.fromJson(response as Igor.Json.JsonValue))
            );
    }

    public updateSetupStep(request: SetupProtocol.UpdateSetupStepRequest, id: number): Observable<DbProtocol.SetupStep> {
        const options = { headers: new HttpHeaders({'Content-Type': 'application/json' }) };

        return this.http
            .put(`${this.baseUrl}/api/setup/steps/${id}`, request.toJson(), options)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 400: return throwError(DataProtocol.BadRequestError.instanceJsonSerializer<SetupProtocol.SetupError>(SetupProtocol.SetupError).fromJson(response.error));
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 404: return throwError(DataProtocol.NotFoundError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DbProtocol.SetupStep.fromJson(response as Igor.Json.JsonValue))
            );
    }

    public deleteSetupStep(id: number): Observable<DataProtocol.GenericResponse> {
        return this.http
            .delete(`${this.baseUrl}/api/setup/steps/${id}`)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 400: return throwError(DataProtocol.BadRequestError.instanceJsonSerializer<SetupProtocol.SetupError>(SetupProtocol.SetupError).fromJson(response.error));
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 404: return throwError(DataProtocol.NotFoundError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DataProtocol.GenericResponse.fromJson(response as Igor.Json.JsonValue))
            );
    }

    public linkSetupStepToParameter(request: CommonProtocol.Empty, id: number, paramId: number): Observable<DbProtocol.SetupStep> {
        const options = { headers: new HttpHeaders({'Content-Type': 'application/json' }) };

        return this.http
            .put(`${this.baseUrl}/api/setup/steps/${id}/param/${paramId}/link`, request.toJson(), options)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 400: return throwError(DataProtocol.BadRequestError.instanceJsonSerializer<SetupProtocol.SetupLinkError>(SetupProtocol.SetupLinkError).fromJson(response.error));
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 404: return throwError(DataProtocol.NotFoundError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DbProtocol.SetupStep.fromJson(response as Igor.Json.JsonValue))
            );
    }

    public unlinkSetupStepFromParameter(request: CommonProtocol.Empty, id: number): Observable<DbProtocol.SetupStep> {
        const options = { headers: new HttpHeaders({'Content-Type': 'application/json' }) };

        return this.http
            .put(`${this.baseUrl}/api/setup/steps/${id}/param/unlink`, request.toJson(), options)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 404: return throwError(DataProtocol.NotFoundError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DbProtocol.SetupStep.fromJson(response as Igor.Json.JsonValue))
            );
    }
}
