// Author: Igor compiler
// Compiler version: igorc 2.1.1
// DO NOT EDIT THIS FILE - it is machine generated

import { Subject } from 'rxjs';
import * as NotificationProtocol from './notification-protocol.data';

export class AbstractNotificationService {
    hello = new Subject<NotificationProtocol.Hello>();
    projectCreated = new Subject<NotificationProtocol.ProjectCreated>();
    projectUpdated = new Subject<NotificationProtocol.ProjectUpdated>();
    projectDeleted = new Subject<NotificationProtocol.ProjectDeleted>();
    parameterCreated = new Subject<NotificationProtocol.ParameterCreated>();
    parameterUpdated = new Subject<NotificationProtocol.ParameterUpdated>();
    parameterDeleted = new Subject<NotificationProtocol.ParameterDeleted>();
    setupStepCreated = new Subject<NotificationProtocol.SetupStepCreated>();
    setupStepUpdated = new Subject<NotificationProtocol.SetupStepUpdated>();
    setupStepDeleted = new Subject<NotificationProtocol.SetupStepDeleted>();
    testCaseCreated = new Subject<NotificationProtocol.TestCaseCreated>();
    testCaseUpdated = new Subject<NotificationProtocol.TestCaseUpdated>();
    testCaseDeleted = new Subject<NotificationProtocol.TestCaseDeleted>();
    testRunCreated = new Subject<NotificationProtocol.TestRunCreated>();
    testRunUpdated = new Subject<NotificationProtocol.TestRunUpdated>();
    testRunStarted = new Subject<NotificationProtocol.TestRunStarted>();
    testRunClosed = new Subject<NotificationProtocol.TestRunClosed>();
    testRunReopened = new Subject<NotificationProtocol.TestRunReopened>();
    testRunDeleted = new Subject<NotificationProtocol.TestRunDeleted>();
    testCreated = new Subject<NotificationProtocol.TestCreated>();
    testUpdated = new Subject<NotificationProtocol.TestUpdated>();
    testStarted = new Subject<NotificationProtocol.TestStarted>();
    testPassed = new Subject<NotificationProtocol.TestPassed>();
    testFailed = new Subject<NotificationProtocol.TestFailed>();
    testBlocked = new Subject<NotificationProtocol.TestBlocked>();
    testReopened = new Subject<NotificationProtocol.TestReopened>();
    testDeleted = new Subject<NotificationProtocol.TestDeleted>();
    attachmentLinked = new Subject<NotificationProtocol.AttachmentLinked>();
    attachmentUnlinked = new Subject<NotificationProtocol.AttachmentUnlinked>();
    jiraInstanceCreated = new Subject<NotificationProtocol.JiraInstanceCreated>();
    jiraInstanceUpdated = new Subject<NotificationProtocol.JiraInstanceUpdated>();
    jiraInstanceDeleted = new Subject<NotificationProtocol.JiraInstanceDeleted>();

    recv(notification: NotificationProtocol.Notification): void {
        switch (notification.kind) {
            case NotificationProtocol.NotificationKind.Hello:
                this.hello.next(<NotificationProtocol.Hello>notification);
                break;
            case NotificationProtocol.NotificationKind.ProjectCreated:
                this.projectCreated.next(<NotificationProtocol.ProjectCreated>notification);
                break;
            case NotificationProtocol.NotificationKind.ProjectUpdated:
                this.projectUpdated.next(<NotificationProtocol.ProjectUpdated>notification);
                break;
            case NotificationProtocol.NotificationKind.ProjectDeleted:
                this.projectDeleted.next(<NotificationProtocol.ProjectDeleted>notification);
                break;
            case NotificationProtocol.NotificationKind.ParameterCreated:
                this.parameterCreated.next(<NotificationProtocol.ParameterCreated>notification);
                break;
            case NotificationProtocol.NotificationKind.ParameterUpdated:
                this.parameterUpdated.next(<NotificationProtocol.ParameterUpdated>notification);
                break;
            case NotificationProtocol.NotificationKind.ParameterDeleted:
                this.parameterDeleted.next(<NotificationProtocol.ParameterDeleted>notification);
                break;
            case NotificationProtocol.NotificationKind.SetupStepCreated:
                this.setupStepCreated.next(<NotificationProtocol.SetupStepCreated>notification);
                break;
            case NotificationProtocol.NotificationKind.SetupStepUpdated:
                this.setupStepUpdated.next(<NotificationProtocol.SetupStepUpdated>notification);
                break;
            case NotificationProtocol.NotificationKind.SetupStepDeleted:
                this.setupStepDeleted.next(<NotificationProtocol.SetupStepDeleted>notification);
                break;
            case NotificationProtocol.NotificationKind.TestCaseCreated:
                this.testCaseCreated.next(<NotificationProtocol.TestCaseCreated>notification);
                break;
            case NotificationProtocol.NotificationKind.TestCaseUpdated:
                this.testCaseUpdated.next(<NotificationProtocol.TestCaseUpdated>notification);
                break;
            case NotificationProtocol.NotificationKind.TestCaseDeleted:
                this.testCaseDeleted.next(<NotificationProtocol.TestCaseDeleted>notification);
                break;
            case NotificationProtocol.NotificationKind.TestRunCreated:
                this.testRunCreated.next(<NotificationProtocol.TestRunCreated>notification);
                break;
            case NotificationProtocol.NotificationKind.TestRunUpdated:
                this.testRunUpdated.next(<NotificationProtocol.TestRunUpdated>notification);
                break;
            case NotificationProtocol.NotificationKind.TestRunStarted:
                this.testRunStarted.next(<NotificationProtocol.TestRunStarted>notification);
                break;
            case NotificationProtocol.NotificationKind.TestRunClosed:
                this.testRunClosed.next(<NotificationProtocol.TestRunClosed>notification);
                break;
            case NotificationProtocol.NotificationKind.TestRunReopened:
                this.testRunReopened.next(<NotificationProtocol.TestRunReopened>notification);
                break;
            case NotificationProtocol.NotificationKind.TestRunDeleted:
                this.testRunDeleted.next(<NotificationProtocol.TestRunDeleted>notification);
                break;
            case NotificationProtocol.NotificationKind.TestCreated:
                this.testCreated.next(<NotificationProtocol.TestCreated>notification);
                break;
            case NotificationProtocol.NotificationKind.TestUpdated:
                this.testUpdated.next(<NotificationProtocol.TestUpdated>notification);
                break;
            case NotificationProtocol.NotificationKind.TestStarted:
                this.testStarted.next(<NotificationProtocol.TestStarted>notification);
                break;
            case NotificationProtocol.NotificationKind.TestPassed:
                this.testPassed.next(<NotificationProtocol.TestPassed>notification);
                break;
            case NotificationProtocol.NotificationKind.TestFailed:
                this.testFailed.next(<NotificationProtocol.TestFailed>notification);
                break;
            case NotificationProtocol.NotificationKind.TestBlocked:
                this.testBlocked.next(<NotificationProtocol.TestBlocked>notification);
                break;
            case NotificationProtocol.NotificationKind.TestReopened:
                this.testReopened.next(<NotificationProtocol.TestReopened>notification);
                break;
            case NotificationProtocol.NotificationKind.TestDeleted:
                this.testDeleted.next(<NotificationProtocol.TestDeleted>notification);
                break;
            case NotificationProtocol.NotificationKind.AttachmentLinked:
                this.attachmentLinked.next(<NotificationProtocol.AttachmentLinked>notification);
                break;
            case NotificationProtocol.NotificationKind.AttachmentUnlinked:
                this.attachmentUnlinked.next(<NotificationProtocol.AttachmentUnlinked>notification);
                break;
            case NotificationProtocol.NotificationKind.JiraInstanceCreated:
                this.jiraInstanceCreated.next(<NotificationProtocol.JiraInstanceCreated>notification);
                break;
            case NotificationProtocol.NotificationKind.JiraInstanceUpdated:
                this.jiraInstanceUpdated.next(<NotificationProtocol.JiraInstanceUpdated>notification);
                break;
            case NotificationProtocol.NotificationKind.JiraInstanceDeleted:
                this.jiraInstanceDeleted.next(<NotificationProtocol.JiraInstanceDeleted>notification);
                break;
        }
    }
}
