// Author: Igor compiler
// Compiler version: igorc 2.1.1
// DO NOT EDIT THIS FILE - it is machine generated

import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as Igor from './igor';
import * as DataProtocol from './data-protocol.data';
import * as DbProtocol from './db-protocol.data';
import * as AttachmentProtocol from './attachment-protocol.data';

@Injectable({
    providedIn: 'root',
})
export class HyperionAttachmentService {
    public baseUrl = '';

    constructor(private http: HttpClient) { }

    public getProjectAttachments(projectId: number, orderBy: AttachmentProtocol.FileAttachmentOrderBy, orderDir: DataProtocol.OrderDirection, offset: number, limit: number, needle: string | null = null): Observable<DataProtocol.CollectionSlice<DbProtocol.FileAttachment>> {
        const queryParams: Array<string> = [];
        queryParams.push(`order_by=${AttachmentProtocol.FileAttachmentOrderBy.toJson(orderBy)}`);
        queryParams.push(`order_dir=${DataProtocol.OrderDirection.toJson(orderDir)}`);
        queryParams.push(`offset=${offset}`);
        queryParams.push(`limit=${limit}`);
        if (needle != null)
            queryParams.push(`needle=${needle}`);
        const queryString = queryParams.length > 0 ? `?${queryParams.join('&')}` : '';

        return this.http
            .get(`${this.baseUrl}/api/attachments/project/${projectId}${queryString}`)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DataProtocol.CollectionSlice.instanceJsonSerializer<DbProtocol.FileAttachment>(DbProtocol.FileAttachment).fromJson(response as Igor.Json.JsonValue))
            );
    }

    public getLinkedAttachments(owner: DbProtocol.AttachmentOwner, linkedId: number): Observable<DataProtocol.Collection<DbProtocol.FileAttachment>> {
        return this.http
            .get(`${this.baseUrl}/api/attachments/${DbProtocol.AttachmentOwner.toJson(owner)}/${linkedId}`)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 404: return throwError(DataProtocol.NotFoundError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DataProtocol.Collection.instanceJsonSerializer<DbProtocol.FileAttachment>(DbProtocol.FileAttachment).fromJson(response as Igor.Json.JsonValue))
            );
    }

    public deleteAttachmentLink(id: number, owner: DbProtocol.AttachmentOwner, linkedId: number): Observable<DataProtocol.GenericResponse> {
        return this.http
            .delete(`${this.baseUrl}/api/attachments/${id}/${DbProtocol.AttachmentOwner.toJson(owner)}/${linkedId}`)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 404: return throwError(DataProtocol.NotFoundError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DataProtocol.GenericResponse.fromJson(response as Igor.Json.JsonValue))
            );
    }

    public getAttachmentLinks(id: number): Observable<DataProtocol.Collection<DbProtocol.FileAttachmentLink>> {
        return this.http
            .get(`${this.baseUrl}/api/attachments/${id}/links`)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 403: return throwError(DataProtocol.ForbiddenError.fromJson(response.error));
                            case 500: return throwError(DataProtocol.InternalServerError.fromJson(response.error));
                        }
                    }
                    throwError(response);
                }),
                map(response => DataProtocol.Collection.instanceJsonSerializer<DbProtocol.FileAttachmentLink>(DbProtocol.FileAttachmentLink).fromJson(response as Igor.Json.JsonValue))
            );
    }
}
