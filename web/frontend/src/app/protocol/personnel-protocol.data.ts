// Author: Igor compiler
// Compiler version: igorc 2.1.1
// DO NOT EDIT THIS FILE - it is machine generated

import * as Igor from './igor';
import * as DbProtocol from './db-protocol.data';

export enum PersonnelAccountOrderBy {
    Id = 1,
    Username = 2,
    Name = 3,
    Email = 4,
    IsBlocked = 5,
    IsDeleted = 6,
    CreatedAt = 7,
    UpdatedAt = 8,
}

export namespace PersonnelAccountOrderBy {
    export function toJson(value: PersonnelAccountOrderBy): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): PersonnelAccountOrderBy {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: PersonnelAccountOrderBy): Igor.Json.JsonValue {
        switch (value) {
            case PersonnelAccountOrderBy.Id: return 'id';
            case PersonnelAccountOrderBy.Username: return 'username';
            case PersonnelAccountOrderBy.Name: return 'name';
            case PersonnelAccountOrderBy.Email: return 'email';
            case PersonnelAccountOrderBy.IsBlocked: return 'is_blocked';
            case PersonnelAccountOrderBy.IsDeleted: return 'is_deleted';
            case PersonnelAccountOrderBy.CreatedAt: return 'created_at';
            case PersonnelAccountOrderBy.UpdatedAt: return 'updated_at';
            default: throw new Error(`Invalid PersonnelAccountOrderBy value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): PersonnelAccountOrderBy {
        switch (json) {
            case 'id': return PersonnelAccountOrderBy.Id;
            case 'username': return PersonnelAccountOrderBy.Username;
            case 'name': return PersonnelAccountOrderBy.Name;
            case 'email': return PersonnelAccountOrderBy.Email;
            case 'is_blocked': return PersonnelAccountOrderBy.IsBlocked;
            case 'is_deleted': return PersonnelAccountOrderBy.IsDeleted;
            case 'created_at': return PersonnelAccountOrderBy.CreatedAt;
            case 'updated_at': return PersonnelAccountOrderBy.UpdatedAt;
            default: throw new Error(`Invalid PersonnelAccountOrderBy value: ${json}`);
        }
    }
}

export enum PersonnelAccountRoleOrderBy {
    PersonnelId = 1,
    Username = 2,
    ProjectId = 3,
    ProjectTitle = 4,
    UserRole = 5,
}

export namespace PersonnelAccountRoleOrderBy {
    export function toJson(value: PersonnelAccountRoleOrderBy): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): PersonnelAccountRoleOrderBy {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: PersonnelAccountRoleOrderBy): Igor.Json.JsonValue {
        switch (value) {
            case PersonnelAccountRoleOrderBy.PersonnelId: return 'personnel_id';
            case PersonnelAccountRoleOrderBy.Username: return 'username';
            case PersonnelAccountRoleOrderBy.ProjectId: return 'project_id';
            case PersonnelAccountRoleOrderBy.ProjectTitle: return 'project_title';
            case PersonnelAccountRoleOrderBy.UserRole: return 'user_role';
            default: throw new Error(`Invalid PersonnelAccountRoleOrderBy value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): PersonnelAccountRoleOrderBy {
        switch (json) {
            case 'personnel_id': return PersonnelAccountRoleOrderBy.PersonnelId;
            case 'username': return PersonnelAccountRoleOrderBy.Username;
            case 'project_id': return PersonnelAccountRoleOrderBy.ProjectId;
            case 'project_title': return PersonnelAccountRoleOrderBy.ProjectTitle;
            case 'user_role': return PersonnelAccountRoleOrderBy.UserRole;
            default: throw new Error(`Invalid PersonnelAccountRoleOrderBy value: ${json}`);
        }
    }
}

export enum PersonnelGroupOrderBy {
    Id = 1,
    Name = 2,
    IsDeleted = 3,
    MemberCount = 4,
    CreatedAt = 5,
    UpdatedAt = 6,
}

export namespace PersonnelGroupOrderBy {
    export function toJson(value: PersonnelGroupOrderBy): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): PersonnelGroupOrderBy {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: PersonnelGroupOrderBy): Igor.Json.JsonValue {
        switch (value) {
            case PersonnelGroupOrderBy.Id: return 'id';
            case PersonnelGroupOrderBy.Name: return 'name';
            case PersonnelGroupOrderBy.IsDeleted: return 'is_deleted';
            case PersonnelGroupOrderBy.MemberCount: return 'member_count';
            case PersonnelGroupOrderBy.CreatedAt: return 'created_at';
            case PersonnelGroupOrderBy.UpdatedAt: return 'updated_at';
            default: throw new Error(`Invalid PersonnelGroupOrderBy value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): PersonnelGroupOrderBy {
        switch (json) {
            case 'id': return PersonnelGroupOrderBy.Id;
            case 'name': return PersonnelGroupOrderBy.Name;
            case 'is_deleted': return PersonnelGroupOrderBy.IsDeleted;
            case 'member_count': return PersonnelGroupOrderBy.MemberCount;
            case 'created_at': return PersonnelGroupOrderBy.CreatedAt;
            case 'updated_at': return PersonnelGroupOrderBy.UpdatedAt;
            default: throw new Error(`Invalid PersonnelGroupOrderBy value: ${json}`);
        }
    }
}

export enum PersonnelGroupRoleOrderBy {
    GroupId = 1,
    GroupName = 2,
    ProjectId = 3,
    ProjectTitle = 4,
    GroupRole = 5,
}

export namespace PersonnelGroupRoleOrderBy {
    export function toJson(value: PersonnelGroupRoleOrderBy): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): PersonnelGroupRoleOrderBy {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: PersonnelGroupRoleOrderBy): Igor.Json.JsonValue {
        switch (value) {
            case PersonnelGroupRoleOrderBy.GroupId: return 'group_id';
            case PersonnelGroupRoleOrderBy.GroupName: return 'group_name';
            case PersonnelGroupRoleOrderBy.ProjectId: return 'project_id';
            case PersonnelGroupRoleOrderBy.ProjectTitle: return 'project_title';
            case PersonnelGroupRoleOrderBy.GroupRole: return 'group_role';
            default: throw new Error(`Invalid PersonnelGroupRoleOrderBy value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): PersonnelGroupRoleOrderBy {
        switch (json) {
            case 'group_id': return PersonnelGroupRoleOrderBy.GroupId;
            case 'group_name': return PersonnelGroupRoleOrderBy.GroupName;
            case 'project_id': return PersonnelGroupRoleOrderBy.ProjectId;
            case 'project_title': return PersonnelGroupRoleOrderBy.ProjectTitle;
            case 'group_role': return PersonnelGroupRoleOrderBy.GroupRole;
            default: throw new Error(`Invalid PersonnelGroupRoleOrderBy value: ${json}`);
        }
    }
}

export class AccessRoleUpdateRequest {
    role!: DbProtocol.AccessRole;

    static fromJson(json: Igor.Json.JsonValue): AccessRoleUpdateRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new AccessRoleUpdateRequest();
        obj.role = DbProtocol.AccessRole.fromJson(jsonObject['role']);
        return obj;
    }

    static toJson(value: AccessRoleUpdateRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['role'] = DbProtocol.AccessRole.toJson(value.role);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return AccessRoleUpdateRequest.toJson(this);
    }
}
