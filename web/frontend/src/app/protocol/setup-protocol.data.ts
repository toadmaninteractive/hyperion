// Author: Igor compiler
// Compiler version: igorc 2.1.1
// DO NOT EDIT THIS FILE - it is machine generated

import * as Igor from './igor';

export class CreateSetupStepRequest {
    parentId?: number | null = null;
    title!: string;
    description?: string | null = null;
    isDraft!: boolean;
    orderNum!: number;

    static fromJson(json: Igor.Json.JsonValue): CreateSetupStepRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new CreateSetupStepRequest();
        obj.parentId = ('parent_id' in jsonObject && jsonObject['parent_id'] != null) ? jsonObject['parent_id'] as number : null;
        obj.title = jsonObject['title'] as string;
        obj.description = ('description' in jsonObject && jsonObject['description'] != null) ? jsonObject['description'] as string : null;
        obj.isDraft = jsonObject['is_draft'] as boolean;
        obj.orderNum = jsonObject['order_num'] as number;
        return obj;
    }

    static toJson(value: CreateSetupStepRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        if (value.parentId != null) result['parent_id'] = value.parentId;
        result['title'] = value.title;
        if (value.description != null) result['description'] = value.description;
        result['is_draft'] = value.isDraft;
        result['order_num'] = value.orderNum;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return CreateSetupStepRequest.toJson(this);
    }
}

export class UpdateSetupStepRequest {
    parentId?: number | null;
    title!: string;
    description!: string;
    isDraft!: boolean;
    orderNum!: number;

    static fromJson(json: Igor.Json.JsonValue): UpdateSetupStepRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new UpdateSetupStepRequest();
        if (jsonObject['parent_id'] !== undefined) obj.parentId = jsonObject['parent_id'] as number;
        if (jsonObject['title'] !== undefined) obj.title = jsonObject['title'] as string;
        if (jsonObject['description'] !== undefined) obj.description = jsonObject['description'] as string;
        if (jsonObject['is_draft'] !== undefined) obj.isDraft = jsonObject['is_draft'] as boolean;
        if (jsonObject['order_num'] !== undefined) obj.orderNum = jsonObject['order_num'] as number;
        return obj;
    }

    static toJson(value: UpdateSetupStepRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        if (value.parentId !== undefined) result['parent_id'] = value.parentId;
        if (value.title !== undefined) result['title'] = value.title;
        if (value.description !== undefined) result['description'] = value.description;
        if (value.isDraft !== undefined) result['is_draft'] = value.isDraft;
        if (value.orderNum !== undefined) result['order_num'] = value.orderNum;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return UpdateSetupStepRequest.toJson(this);
    }
}

export enum SetupError {
    ParentNotExists = 1,
    ProjectNotExists = 2,
    TitleAlreadyExists = 3,
    HasChildren = 4,
}

export namespace SetupError {
    export function toJson(value: SetupError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): SetupError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: SetupError): Igor.Json.JsonValue {
        switch (value) {
            case SetupError.ParentNotExists: return 'parent_not_exists';
            case SetupError.ProjectNotExists: return 'project_not_exists';
            case SetupError.TitleAlreadyExists: return 'title_already_exists';
            case SetupError.HasChildren: return 'has_children';
            default: throw new Error(`Invalid SetupError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): SetupError {
        switch (json) {
            case 'parent_not_exists': return SetupError.ParentNotExists;
            case 'project_not_exists': return SetupError.ProjectNotExists;
            case 'title_already_exists': return SetupError.TitleAlreadyExists;
            case 'has_children': return SetupError.HasChildren;
            default: throw new Error(`Invalid SetupError value: ${json}`);
        }
    }
}

export enum SetupLinkError {
    SetupStepNotExists = 1,
    ParameterNotExists = 2,
    ProjectMismatch = 3,
}

export namespace SetupLinkError {
    export function toJson(value: SetupLinkError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): SetupLinkError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: SetupLinkError): Igor.Json.JsonValue {
        switch (value) {
            case SetupLinkError.SetupStepNotExists: return 'setup_step_not_exists';
            case SetupLinkError.ParameterNotExists: return 'parameter_not_exists';
            case SetupLinkError.ProjectMismatch: return 'project_mismatch';
            default: throw new Error(`Invalid SetupLinkError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): SetupLinkError {
        switch (json) {
            case 'setup_step_not_exists': return SetupLinkError.SetupStepNotExists;
            case 'parameter_not_exists': return SetupLinkError.ParameterNotExists;
            case 'project_mismatch': return SetupLinkError.ProjectMismatch;
            default: throw new Error(`Invalid SetupLinkError value: ${json}`);
        }
    }
}
