// Author: Igor compiler
// Compiler version: igorc 2.1.1
// DO NOT EDIT THIS FILE - it is machine generated

import * as Igor from './igor';

export class CreateParameterRequest {
    parentId?: number | null = null;
    dependentId?: number | null = null;
    title!: string;

    static fromJson(json: Igor.Json.JsonValue): CreateParameterRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new CreateParameterRequest();
        obj.parentId = ('parent_id' in jsonObject && jsonObject['parent_id'] != null) ? jsonObject['parent_id'] as number : null;
        obj.dependentId = ('dependent_id' in jsonObject && jsonObject['dependent_id'] != null) ? jsonObject['dependent_id'] as number : null;
        obj.title = jsonObject['title'] as string;
        return obj;
    }

    static toJson(value: CreateParameterRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        if (value.parentId != null) result['parent_id'] = value.parentId;
        if (value.dependentId != null) result['dependent_id'] = value.dependentId;
        result['title'] = value.title;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return CreateParameterRequest.toJson(this);
    }
}

export enum ParameterCreateError {
    ProjectNotExists = 1,
    ParameterAlreadyExists = 2,
    ParentNotExists = 3,
    ParentIsIndependent = 4,
    ParameterSourceAlreadyExists = 5,
}

export namespace ParameterCreateError {
    export function toJson(value: ParameterCreateError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): ParameterCreateError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: ParameterCreateError): Igor.Json.JsonValue {
        switch (value) {
            case ParameterCreateError.ProjectNotExists: return 'project_not_exists';
            case ParameterCreateError.ParameterAlreadyExists: return 'parameter_already_exists';
            case ParameterCreateError.ParentNotExists: return 'parent_not_exists';
            case ParameterCreateError.ParentIsIndependent: return 'parent_is_independent';
            case ParameterCreateError.ParameterSourceAlreadyExists: return 'parameter_source_already_exists';
            default: throw new Error(`Invalid ParameterCreateError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): ParameterCreateError {
        switch (json) {
            case 'project_not_exists': return ParameterCreateError.ProjectNotExists;
            case 'parameter_already_exists': return ParameterCreateError.ParameterAlreadyExists;
            case 'parent_not_exists': return ParameterCreateError.ParentNotExists;
            case 'parent_is_independent': return ParameterCreateError.ParentIsIndependent;
            case 'parameter_source_already_exists': return ParameterCreateError.ParameterSourceAlreadyExists;
            default: throw new Error(`Invalid ParameterCreateError value: ${json}`);
        }
    }
}

export class RenameParameterRequest {
    newTitle!: string;

    static fromJson(json: Igor.Json.JsonValue): RenameParameterRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new RenameParameterRequest();
        obj.newTitle = jsonObject['new_title'] as string;
        return obj;
    }

    static toJson(value: RenameParameterRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['new_title'] = value.newTitle;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return RenameParameterRequest.toJson(this);
    }
}

export enum ParameterRenameError {
    ParameterNotExists = 1,
    TitleAlreadyExists = 2,
}

export namespace ParameterRenameError {
    export function toJson(value: ParameterRenameError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): ParameterRenameError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: ParameterRenameError): Igor.Json.JsonValue {
        switch (value) {
            case ParameterRenameError.ParameterNotExists: return 'parameter_not_exists';
            case ParameterRenameError.TitleAlreadyExists: return 'title_already_exists';
            default: throw new Error(`Invalid ParameterRenameError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): ParameterRenameError {
        switch (json) {
            case 'parameter_not_exists': return ParameterRenameError.ParameterNotExists;
            case 'title_already_exists': return ParameterRenameError.TitleAlreadyExists;
            default: throw new Error(`Invalid ParameterRenameError value: ${json}`);
        }
    }
}

export enum ParameterDeleteError {
    ParameterNotExists = 1,
    HasChildren = 2,
    HasDependants = 3,
}

export namespace ParameterDeleteError {
    export function toJson(value: ParameterDeleteError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): ParameterDeleteError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: ParameterDeleteError): Igor.Json.JsonValue {
        switch (value) {
            case ParameterDeleteError.ParameterNotExists: return 'parameter_not_exists';
            case ParameterDeleteError.HasChildren: return 'has_children';
            case ParameterDeleteError.HasDependants: return 'has_dependants';
            default: throw new Error(`Invalid ParameterDeleteError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): ParameterDeleteError {
        switch (json) {
            case 'parameter_not_exists': return ParameterDeleteError.ParameterNotExists;
            case 'has_children': return ParameterDeleteError.HasChildren;
            case 'has_dependants': return ParameterDeleteError.HasDependants;
            default: throw new Error(`Invalid ParameterDeleteError value: ${json}`);
        }
    }
}

export class AddParameterValueRequest {
    dependentValue?: string | null = null;
    value!: string;

    static fromJson(json: Igor.Json.JsonValue): AddParameterValueRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new AddParameterValueRequest();
        obj.dependentValue = ('dependent_value' in jsonObject && jsonObject['dependent_value'] != null) ? jsonObject['dependent_value'] as string : null;
        obj.value = jsonObject['value'] as string;
        return obj;
    }

    static toJson(value: AddParameterValueRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        if (value.dependentValue != null) result['dependent_value'] = value.dependentValue;
        result['value'] = value.value;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return AddParameterValueRequest.toJson(this);
    }
}

export enum ParameterValueAddError {
    ParameterNotExists = 1,
    ParameterSourceNotExists = 2,
    ValueAlreadyExists = 3,
    ValueNotExists = 4,
    DependentParameterNotExists = 5,
    DependentSourceNotExists = 6,
    DependentValueNotExists = 7,
}

export namespace ParameterValueAddError {
    export function toJson(value: ParameterValueAddError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): ParameterValueAddError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: ParameterValueAddError): Igor.Json.JsonValue {
        switch (value) {
            case ParameterValueAddError.ParameterNotExists: return 'parameter_not_exists';
            case ParameterValueAddError.ParameterSourceNotExists: return 'parameter_source_not_exists';
            case ParameterValueAddError.ValueAlreadyExists: return 'value_already_exists';
            case ParameterValueAddError.ValueNotExists: return 'value_not_exists';
            case ParameterValueAddError.DependentParameterNotExists: return 'dependent_parameter_not_exists';
            case ParameterValueAddError.DependentSourceNotExists: return 'dependent_source_not_exists';
            case ParameterValueAddError.DependentValueNotExists: return 'dependent_value_not_exists';
            default: throw new Error(`Invalid ParameterValueAddError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): ParameterValueAddError {
        switch (json) {
            case 'parameter_not_exists': return ParameterValueAddError.ParameterNotExists;
            case 'parameter_source_not_exists': return ParameterValueAddError.ParameterSourceNotExists;
            case 'value_already_exists': return ParameterValueAddError.ValueAlreadyExists;
            case 'value_not_exists': return ParameterValueAddError.ValueNotExists;
            case 'dependent_parameter_not_exists': return ParameterValueAddError.DependentParameterNotExists;
            case 'dependent_source_not_exists': return ParameterValueAddError.DependentSourceNotExists;
            case 'dependent_value_not_exists': return ParameterValueAddError.DependentValueNotExists;
            default: throw new Error(`Invalid ParameterValueAddError value: ${json}`);
        }
    }
}

export class RenameParameterValueRequest {
    oldValue!: string;
    newValue!: string;

    static fromJson(json: Igor.Json.JsonValue): RenameParameterValueRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new RenameParameterValueRequest();
        obj.oldValue = jsonObject['old_value'] as string;
        obj.newValue = jsonObject['new_value'] as string;
        return obj;
    }

    static toJson(value: RenameParameterValueRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['old_value'] = value.oldValue;
        result['new_value'] = value.newValue;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return RenameParameterValueRequest.toJson(this);
    }
}

export enum ParameterValueRenameError {
    ParameterNotExists = 1,
    InvalidParameter = 2,
    ValueNotExists = 3,
    ValueAlreadyExists = 4,
}

export namespace ParameterValueRenameError {
    export function toJson(value: ParameterValueRenameError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): ParameterValueRenameError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: ParameterValueRenameError): Igor.Json.JsonValue {
        switch (value) {
            case ParameterValueRenameError.ParameterNotExists: return 'parameter_not_exists';
            case ParameterValueRenameError.InvalidParameter: return 'invalid_parameter';
            case ParameterValueRenameError.ValueNotExists: return 'value_not_exists';
            case ParameterValueRenameError.ValueAlreadyExists: return 'value_already_exists';
            default: throw new Error(`Invalid ParameterValueRenameError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): ParameterValueRenameError {
        switch (json) {
            case 'parameter_not_exists': return ParameterValueRenameError.ParameterNotExists;
            case 'invalid_parameter': return ParameterValueRenameError.InvalidParameter;
            case 'value_not_exists': return ParameterValueRenameError.ValueNotExists;
            case 'value_already_exists': return ParameterValueRenameError.ValueAlreadyExists;
            default: throw new Error(`Invalid ParameterValueRenameError value: ${json}`);
        }
    }
}

export class RemoveParameterValueRequest {
    dependentValue?: string | null = null;
    value!: string;

    static fromJson(json: Igor.Json.JsonValue): RemoveParameterValueRequest {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new RemoveParameterValueRequest();
        obj.dependentValue = ('dependent_value' in jsonObject && jsonObject['dependent_value'] != null) ? jsonObject['dependent_value'] as string : null;
        obj.value = jsonObject['value'] as string;
        return obj;
    }

    static toJson(value: RemoveParameterValueRequest): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        if (value.dependentValue != null) result['dependent_value'] = value.dependentValue;
        result['value'] = value.value;
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return RemoveParameterValueRequest.toJson(this);
    }
}

export enum ParameterValueRemoveError {
    ParameterNotExists = 1,
    ValueNotExists = 2,
    LinkedToChildren = 3,
    LinkedToDependants = 4,
    DependentParameterNotExists = 5,
    DependentSourceNotExists = 6,
    DependentValueNotExists = 7,
}

export namespace ParameterValueRemoveError {
    export function toJson(value: ParameterValueRemoveError): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): ParameterValueRemoveError {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: ParameterValueRemoveError): Igor.Json.JsonValue {
        switch (value) {
            case ParameterValueRemoveError.ParameterNotExists: return 'parameter_not_exists';
            case ParameterValueRemoveError.ValueNotExists: return 'value_not_exists';
            case ParameterValueRemoveError.LinkedToChildren: return 'linked_to_children';
            case ParameterValueRemoveError.LinkedToDependants: return 'linked_to_dependants';
            case ParameterValueRemoveError.DependentParameterNotExists: return 'dependent_parameter_not_exists';
            case ParameterValueRemoveError.DependentSourceNotExists: return 'dependent_source_not_exists';
            case ParameterValueRemoveError.DependentValueNotExists: return 'dependent_value_not_exists';
            default: throw new Error(`Invalid ParameterValueRemoveError value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): ParameterValueRemoveError {
        switch (json) {
            case 'parameter_not_exists': return ParameterValueRemoveError.ParameterNotExists;
            case 'value_not_exists': return ParameterValueRemoveError.ValueNotExists;
            case 'linked_to_children': return ParameterValueRemoveError.LinkedToChildren;
            case 'linked_to_dependants': return ParameterValueRemoveError.LinkedToDependants;
            case 'dependent_parameter_not_exists': return ParameterValueRemoveError.DependentParameterNotExists;
            case 'dependent_source_not_exists': return ParameterValueRemoveError.DependentSourceNotExists;
            case 'dependent_value_not_exists': return ParameterValueRemoveError.DependentValueNotExists;
            default: throw new Error(`Invalid ParameterValueRemoveError value: ${json}`);
        }
    }
}
